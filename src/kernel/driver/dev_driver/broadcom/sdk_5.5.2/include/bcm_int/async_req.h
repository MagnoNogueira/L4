/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * $Id: async_req.h,v 1.241.2.23 Broadcom SDK $
 * $Copyright: Copyright 2008 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR U.S. $1,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 *
 * File:	async_req.h
 * Purpose:	Async BCM - request structure
 * Generator:	mkdispatch 1.28
 * Generated:	Wed Feb 27 14:42:50 2008
 */

#ifndef	_BCM_INT_ASYNC_REQ_H
#define	_BCM_INT_ASYNC_REQ_H

#include <bcm/types.h>
#include <bcm/async.h>
#include <bcm/auth.h>
#include <bcm/bcmi2c.h>
#include <bcm/cosq.h>
#include <bcm/custom.h>
#include <bcm/diffserv.h>
#include <bcm/dmux.h>
#include <bcm/eav.h>
#include <bcm/error.h>
#include <bcm/fabric.h>
#include <bcm/failover.h>
#include <bcm/field.h>
#include <bcm/filter.h>
#include <bcm/htls.h>
#include <bcm/igmp.h>
#include <bcm/init.h>
#include <bcm/ipfix.h>
#include <bcm/ipmc.h>
#include <bcm/l2.h>
#include <bcm/l3.h>
#include <bcm/link.h>
#include <bcm/mcast.h>
#include <bcm/meter.h>
#include <bcm/mim.h>
#include <bcm/mirror.h>
#include <bcm/module.h>
#include <bcm/mpls.h>
#include <bcm/multicast.h>
#include <bcm/oam.h>
#include <bcm/pkt.h>
#include <bcm/policer.h>
#include <bcm/port.h>
#include <bcm/proxy.h>
#include <bcm/rate.h>
#include <bcm/rx.h>
#include <bcm/stack.h>
#include <bcm/stat.h>
#include <bcm/stg.h>
#include <bcm/subport.h>
#include <bcm/switch.h>
#include <bcm/topo.h>
#include <bcm/trunk.h>
#include <bcm/tunnel.h>
#include <bcm/tx.h>
#include <bcm/vlan.h>
#include <bcm/vswitch.h>

#ifdef	BCM_ASYNC_SUPPORT

typedef struct bcm_async_req_s {
	struct bcm_async_req_s *next;
	int type;
	void (*run)(struct bcm_async_req_s *);
	bcm_async_cb_t callback;
	void *cookie;
	union {
		struct {
			int unit;
		} _shutdown;
		struct {
			int unit;
			char * type;
			char * subtype;
			int remunit;
		} attach;
		struct {
			int unit;
		} attach_check;
		struct {
			int * max_units;
		} attach_max;
		struct {
			int unit;
		} auth_detach;
		struct {
			int unit;
			int port;
			int * enable;
		} auth_egress_get;
		struct {
			int unit;
			int port;
			int enable;
		} auth_egress_set;
		struct {
			int unit;
		} auth_init;
		struct {
			int unit;
			int port;
			uint8 * mac;
		} auth_mac_add;
		struct {
			int unit;
			int port;
			uint8 * mac;
		} auth_mac_delete;
		struct {
			int unit;
			int port;
		} auth_mac_delete_all;
		struct {
			int unit;
			int port;
			uint32 * modep;
		} auth_mode_get;
		struct {
			int unit;
			int port;
			uint32 mode;
		} auth_mode_set;
		struct {
			int unit;
			bcm_auth_cb_t func;
			void * cookie;
		} auth_unauth_callback;
		struct {
			int unit;
		} clear;
		struct {
			int unit;
			int * numq;
		} cosq_config_get;
		struct {
			int unit;
			int numq;
		} cosq_config_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cos_queue_t cosq;
			bcm_cosq_control_t type;
			int * arg;
		} cosq_control_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_cos_queue_t cosq;
			bcm_cosq_control_t type;
			int arg;
		} cosq_control_set;
		struct {
			int unit;
		} cosq_detach;
		struct {
			int unit;
			uint32 * flags;
		} cosq_discard_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cos_queue_t cosq;
			uint32 color;
			int * drop_start;
			int * drop_slope;
			int * average_time;
		} cosq_discard_port_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cos_queue_t cosq;
			uint32 color;
			int drop_start;
			int drop_slope;
			int average_time;
		} cosq_discard_port_set;
		struct {
			int unit;
			uint32 flags;
		} cosq_discard_set;
		struct {
			int unit;
			bcm_fabric_distribution_t ds_id;
			int num_cos_levels;
			uint32 flags;
			bcm_gport_t * req_gport;
		} cosq_fabric_distribution_add;
		struct {
			int unit;
			bcm_fabric_distribution_t ds_id;
			int * num_cos_levels;
			bcm_gport_t * req_gport;
			uint32 * flags;
		} cosq_fabric_distribution_get;
		struct {
			int unit;
			bcm_gport_t port;
			int numq;
			uint32 flags;
			bcm_gport_t * gport;
		} cosq_gport_add;
		struct {
			int unit;
			bcm_gport_t sched_port;
			bcm_gport_t input_port;
			bcm_cos_queue_t cosq;
		} cosq_gport_attach;
		struct {
			int unit;
			bcm_gport_t sched_port;
			bcm_gport_t * input_port;
			bcm_cos_queue_t * cosq;
		} cosq_gport_attach_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			uint32 * kbits_sec_min;
			uint32 * kbits_sec_max;
			uint32 * flags;
		} cosq_gport_bandwidth_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			uint32 kbits_sec_min;
			uint32 kbits_sec_max;
			uint32 flags;
		} cosq_gport_bandwidth_set;
		struct {
			int unit;
			bcm_gport_t gport;
		} cosq_gport_delete;
		struct {
			int unit;
			bcm_gport_t sched_port;
			bcm_gport_t input_port;
			bcm_cos_queue_t cosq;
		} cosq_gport_detach;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_gport_discard_t * discard;
		} cosq_gport_discard_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_gport_discard_t * discard;
		} cosq_gport_discard_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			int * enable;
		} cosq_gport_enable_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			int enable;
		} cosq_gport_enable_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_gport_t * physical_port;
			int * num_cos_levels;
			uint32 * flags;
		} cosq_gport_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_t priority;
			bcm_cos_queue_t * cosq;
		} cosq_gport_mapping_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_t priority;
			bcm_cos_queue_t cosq;
		} cosq_gport_mapping_set;
		struct {
			int unit;
			bcm_gport_t master_port;
			bcm_cos_queue_t master_port_cosq;
			bcm_gport_t nexus_port;
			bcm_cos_queue_t nexus_port_cosq;
		} cosq_gport_nexus_attach;
		struct {
			int unit;
			bcm_gport_t master_port;
			bcm_cos_queue_t master_port_cosq;
			bcm_gport_t nexus_port;
			bcm_cos_queue_t nexus_port_cosq;
		} cosq_gport_nexus_detach;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			int * mode;
			int * weight;
		} cosq_gport_sched_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			int mode;
			int weight;
		} cosq_gport_sched_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			uint32 * bytes_min;
			uint32 * bytes_max;
		} cosq_gport_size_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			uint32 bytes_min;
			uint32 bytes_max;
		} cosq_gport_size_set;
		struct {
			int unit;
			bcm_gport_t gport;
			int * enable;
		} cosq_gport_stat_enable_get;
		struct {
			int unit;
			bcm_gport_t gport;
			int enable;
		} cosq_gport_stat_enable_set;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_gport_stats_t stat;
			uint64 * value;
		} cosq_gport_stat_get;
		struct {
			int unit;
			bcm_gport_t gport;
			bcm_cos_queue_t cosq;
			bcm_cosq_gport_stats_t stat;
			uint64 value;
		} cosq_gport_stat_set;
		struct {
			int unit;
			bcm_cosq_gport_traverse_cb cb;
			void * user_data;
		} cosq_gport_traverse;
		struct {
			int unit;
		} cosq_init;
		struct {
			int unit;
			bcm_cos_t priority;
			bcm_cos_queue_t * cosq;
		} cosq_mapping_get;
		struct {
			int unit;
			bcm_cos_t priority;
			bcm_cos_queue_t cosq;
		} cosq_mapping_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cos_queue_t cosq;
			uint32 * kbits_sec_min;
			uint32 * kbits_sec_max;
			uint32 * flags;
		} cosq_port_bandwidth_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cos_queue_t cosq;
			uint32 kbits_sec_min;
			uint32 kbits_sec_max;
			uint32 flags;
		} cosq_port_bandwidth_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cos_t priority;
			bcm_cos_queue_t * cosq;
		} cosq_port_mapping_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_cos_t priority;
			bcm_cos_queue_t cosq;
		} cosq_port_mapping_set;
		struct {
			int unit;
			bcm_pbmp_t pbm;
			int * mode;
			int * weights;
			int * delay;
		} cosq_port_sched_get;
		struct {
			int unit;
			bcm_pbmp_t pbm;
			int mode;
			int * weights;
			int delay;
		} cosq_port_sched_set;
		struct {
			int unit;
			int * mode;
			int * weights;
			int * delay;
		} cosq_sched_get;
		struct {
			int unit;
			int mode;
			int * weights;
			int delay;
		} cosq_sched_set;
		struct {
			int unit;
			int mode;
			int * weight_max;
		} cosq_sched_weight_max_get;
		struct {
			int unit;
			bcm_port_t port;
			int type;
			uint32 * args;
		} custom_port_get;
		struct {
			int unit;
			bcm_port_t port;
			int type;
			uint32 * args;
		} custom_port_set;
		struct {
			int unit;
			bcm_custom_cb_t func;
		} custom_register;
		struct {
			int unit;
		} custom_unregister;
		struct {
			int unit;
		} detach;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * flags;
		} dmux_config_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
		} dmux_config_set;
		struct {
			int unit;
			bcm_port_t port;
			int dest_mod;
			bcm_port_t dest_port;
		} dmux_dest_add;
		struct {
			int unit;
			bcm_port_t port;
			int dest_mod;
			bcm_port_t dest_port;
		} dmux_dest_delete;
		struct {
			int unit;
			bcm_port_t port;
		} dmux_dest_delete_all;
		struct {
			int unit;
			bcm_port_t port;
			int dest_mod;
			bcm_pbmp_t * dest_pbmp;
		} dmux_dest_get;
		struct {
			int unit;
		} dmux_detach;
		struct {
			int unit;
		} dmux_init;
		struct {
			int unit;
			int dpid;
			bcm_ds_clfr_t * clfr;
			bcm_ds_inprofile_actn_t * inp_actn;
			bcm_ds_outprofile_actn_t * outp_actn;
			bcm_ds_nomatch_actn_t * nm_actn;
			int * cfid;
		} ds_classifier_create;
		struct {
			int unit;
			int dpid;
			bcm_ds_clfr_t * clfr;
			bcm_ds_inprofile_actn_t * inp_actn;
			bcm_ds_outprofile_actn_t * outp_actn;
			bcm_ds_nomatch_actn_t * nm_actn;
			int cfid;
		} ds_classifier_create_id;
		struct {
			int unit;
			int dpid;
			int cfid;
		} ds_classifier_delete;
		struct {
			int unit;
			int dpid;
			int cfid;
			bcm_ds_clfr_t * clfr;
			bcm_ds_inprofile_actn_t * inp_actn;
			bcm_ds_outprofile_actn_t * outp_actn;
			bcm_ds_nomatch_actn_t * nm_actn;
		} ds_classifier_get;
		struct {
			int unit;
			int dpid;
			bcm_ds_classifier_traverse_cb cb;
			void * user_data;
		} ds_classifier_traverse;
		struct {
			int unit;
			int dpid;
			int cfid;
			uint32 flags;
			bcm_ds_inprofile_actn_t * inp_actn;
			bcm_ds_outprofile_actn_t * outp_actn;
		} ds_classifier_update;
		struct {
			int unit;
			int dpid;
			int cfid;
			bcm_ds_counters_t * counter;
		} ds_counter_get;
		struct {
			int unit;
			uint32 flags;
			bcm_pbmp_t ports;
			int * dpid;
		} ds_datapath_create;
		struct {
			int unit;
			uint32 flags;
			bcm_pbmp_t ports;
			int dpid;
		} ds_datapath_create_id;
		struct {
			int unit;
			int dpid;
		} ds_datapath_delete;
		struct {
			int unit;
			int dpid;
		} ds_datapath_install;
		struct {
			int unit;
			void * mibid;
			int dpid;
			int cfid;
		} ds_dpid_cfid_bind;
		struct {
			int unit;
			void * mibid;
			int dpid;
			int * cfid;
		} ds_dpid_cfid_get;
		struct {
			int unit;
			void * mibid;
			int dpid;
			int cfid;
		} ds_dpid_cfid_unbind;
		struct {
			int unit;
		} ds_init;
		struct {
			int unit;
			int dpid;
			bcm_ds_scheduler_t * scheduler;
		} ds_scheduler_add;
		struct {
			int unit;
			bcm_port_t port;
			bcm_eav_stream_class_t type;
			uint32 * bytes_sec;
			uint32 * bytes_burst;
		} eav_bandwidth_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_eav_stream_class_t type;
			uint32 bytes_sec;
			uint32 bytes_burst;
		} eav_bandwidth_set;
		struct {
			int unit;
			bcm_eav_control_t type;
			uint32 * arg;
			uint32 * arg2;
		} eav_control_get;
		struct {
			int unit;
			bcm_eav_control_t type;
			uint32 arg;
			uint32 arg2;
		} eav_control_set;
		struct {
			int unit;
		} eav_init;
		struct {
			int unit;
			bcm_port_t port;
			int * link;
		} eav_link_status_get;
		struct {
			int unit;
			bcm_port_t port;
			int link;
		} eav_link_status_set;
		struct {
			int unit;
			bcm_eav_stream_class_t type;
			int * pcp;
			int * remapped_pcp;
		} eav_pcp_mapping_get;
		struct {
			int unit;
			bcm_eav_stream_class_t type;
			int pcp;
			int remapped_pcp;
		} eav_pcp_mapping_set;
		struct {
			int unit;
			bcm_port_t port;
			int * enable;
		} eav_port_enable_get;
		struct {
			int unit;
			bcm_port_t port;
			int enable;
		} eav_port_enable_set;
		struct {
			int unit;
			uint8 * mac;
			bcm_port_ethertype_t * ethertype;
		} eav_srp_mac_ethertype_get;
		struct {
			int unit;
			uint8 * mac;
			bcm_port_ethertype_t ethertype;
		} eav_srp_mac_ethertype_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * timestamp;
		} eav_timestamp_get;
		struct {
			int unit;
			uint8 * eav_mac;
		} eav_timesync_mac_get;
		struct {
			int unit;
			uint8 * eav_mac;
		} eav_timesync_mac_set;
		struct {
			int unit;
			bcm_fabric_control_t type;
			int * arg;
		} fabric_control_get;
		struct {
			int unit;
			bcm_fabric_control_redundancy_handler_t f;
		} fabric_control_redundancy_register;
		struct {
			int unit;
			bcm_fabric_control_redundancy_handler_t f;
		} fabric_control_redundancy_unregister;
		struct {
			int unit;
			bcm_fabric_control_t type;
			int arg;
		} fabric_control_set;
		struct {
			int unit;
			int xbar;
			int src_modid;
			bcm_port_t src_xbport;
			int dst_modid;
			bcm_port_t * dst_xbport;
		} fabric_crossbar_connection_get;
		struct {
			int unit;
			int xbar;
			int src_modid;
			bcm_port_t src_xbport;
			int dst_modid;
			bcm_port_t dst_xbport;
		} fabric_crossbar_connection_set;
		struct {
			int unit;
			uint64 * xbars;
		} fabric_crossbar_enable_get;
		struct {
			int unit;
			uint64 xbars;
		} fabric_crossbar_enable_set;
		struct {
			int unit;
			int modid;
			int switch_fabric_arbiter_id;
			int xbar;
			bcm_port_t * port;
		} fabric_crossbar_mapping_get;
		struct {
			int unit;
			int modid;
			int switch_fabric_arbiter_id;
			int xbar;
			bcm_port_t port;
		} fabric_crossbar_mapping_set;
		struct {
			int unit;
			uint64 * xbars;
		} fabric_crossbar_status_get;
		struct {
			int unit;
			uint32 flags;
			bcm_fabric_distribution_t * ds_id;
		} fabric_distribution_create;
		struct {
			int unit;
			bcm_fabric_distribution_t ds_id;
		} fabric_distribution_destroy;
		struct {
			int unit;
			bcm_fabric_distribution_t ds_id;
			int max_count;
			int * dist_modids;
			int * count;
		} fabric_distribution_get;
		struct {
			int unit;
			bcm_fabric_distribution_t ds_id;
			int modid_count;
			int * dist_modids;
		} fabric_distribution_set;
		struct {
			int unit;
		} fabric_init;
		struct {
			int unit;
			int pkt_adjust_selector;
			int * pkt_adjust_len;
		} fabric_packet_adjust_get;
		struct {
			int unit;
			int pkt_adjust_selector;
			int pkt_adjust_len;
		} fabric_packet_adjust_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_failover_t * failover_id;
			bcm_gport_t * failover_port;
		} fabric_port_failover_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_failover_t failover_id;
			bcm_gport_t failover_port;
		} fabric_port_failover_set;
		struct {
			int unit;
			uint32 flags;
			bcm_failover_t * failover_id;
		} failover_create;
		struct {
			int unit;
			bcm_failover_t failover_id;
		} failover_destroy;
		struct {
			int unit;
			bcm_failover_t failover_id;
			int * enable;
		} failover_get;
		struct {
			int unit;
			bcm_failover_t failover_id;
			int enable;
		} failover_set;
		struct {
			int unit;
			int port;
			int * ffpcounterid;
		} ffpcounter_create;
		struct {
			int unit;
			int port;
			int ffpcounterid;
		} ffpcounter_delete;
		struct {
			int unit;
		} ffpcounter_delete_all;
		struct {
			int unit;
			int port;
			int ffpcounterid;
			uint64 * val;
		} ffpcounter_get;
		struct {
			int unit;
		} ffpcounter_init;
		struct {
			int unit;
			int port;
			int ffpcounterid;
			uint64 val;
		} ffpcounter_set;
		struct {
			int unit;
			int port;
			int mid;
			uint64 * val;
		} ffppacketcounter_get;
		struct {
			int unit;
			int port;
			int mid;
			uint64 val;
		} ffppacketcounter_set;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_action_t action;
			uint32 param0;
			uint32 param1;
		} field_action_add;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_action_t action;
			uint32 param0;
			uint32 param1;
		} field_action_delete;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_action_t action;
			uint32 * param0;
			uint32 * param1;
		} field_action_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_action_t action;
			bcm_pbmp_t pbmp;
		} field_action_ports_add;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_action_t action;
			bcm_pbmp_t * pbmp;
		} field_action_ports_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_action_t action;
		} field_action_remove;
		struct {
			int unit;
			bcm_field_entry_t entry;
		} field_action_remove_all;
		struct {
			int unit;
			bcm_field_control_t control;
			uint32 * state;
		} field_control_get;
		struct {
			int unit;
			bcm_field_control_t control;
			uint32 state;
		} field_control_set;
		struct {
			int unit;
			bcm_field_entry_t entry;
		} field_counter_create;
		struct {
			int unit;
			bcm_field_entry_t entry;
		} field_counter_destroy;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int counter_num;
			uint64 * valp;
		} field_counter_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int counter_num;
			uint32 * valp;
		} field_counter_get32;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int counter_num;
			uint64 val;
		} field_counter_set;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int counter_num;
			uint32 val;
		} field_counter_set32;
		struct {
			int unit;
			bcm_field_entry_t src_entry;
			bcm_field_entry_t dst_entry;
		} field_counter_share;
		struct {
			int unit;
			bcm_field_data_qualifier_t * data_qualifier;
		} field_data_qualifier_create;
		struct {
			int unit;
			int qual_id;
		} field_data_qualifier_destroy;
		struct {
			int unit;
		} field_data_qualifier_destroy_all;
		struct {
			int unit;
			int qual_id;
			bcm_field_data_ethertype_t * etype;
		} field_data_qualifier_ethertype_add;
		struct {
			int unit;
			int qual_id;
			bcm_field_data_ethertype_t * etype;
		} field_data_qualifier_ethertype_delete;
		struct {
			int unit;
			int qual_id;
			bcm_field_data_ip_protocol_t * ip_protocol;
		} field_data_qualifier_ip_protocol_add;
		struct {
			int unit;
			int qual_id;
			bcm_field_data_ip_protocol_t * ip_protocol;
		} field_data_qualifier_ip_protocol_delete;
		struct {
			int unit;
			int qual_id;
			bcm_field_data_packet_format_t * packet_format;
		} field_data_qualifier_packet_format_add;
		struct {
			int unit;
			int qual_id;
			bcm_field_data_packet_format_t * packet_format;
		} field_data_qualifier_packet_format_delete;
		struct {
			int unit;
		} field_detach;
		struct {
			int unit;
			bcm_field_entry_t src_entry;
			bcm_field_entry_t * dst_entry;
		} field_entry_copy;
		struct {
			int unit;
			bcm_field_entry_t src_entry;
			bcm_field_entry_t dst_entry;
		} field_entry_copy_id;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_field_entry_t * entry;
		} field_entry_create;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_field_entry_t entry;
		} field_entry_create_id;
		struct {
			int unit;
			bcm_field_entry_t entry;
		} field_entry_destroy;
		struct {
			int unit;
		} field_entry_destroy_all;
#ifdef	BROADCOM_DEBUG
		struct {
			int unit;
			bcm_field_entry_t entry;
		} field_entry_dump;
#endif	/* BROADCOM_DEBUG */
		struct {
			int unit;
			bcm_field_entry_t entry;
		} field_entry_install;
		struct {
			int unit;
			bcm_field_entry_t entry_id;
			int level;
			bcm_policer_t policer_id;
		} field_entry_policer_attach;
		struct {
			int unit;
			bcm_field_entry_t entry_id;
			int level;
		} field_entry_policer_detach;
		struct {
			int unit;
			bcm_field_entry_t entry_id;
		} field_entry_policer_detach_all;
		struct {
			int unit;
			bcm_field_entry_t entry_id;
			int level;
			bcm_policer_t * policer_id;
		} field_entry_policer_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int * prio;
		} field_entry_prio_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int prio;
		} field_entry_prio_set;
		struct {
			int unit;
			bcm_field_entry_t entry;
		} field_entry_reinstall;
		struct {
			int unit;
			bcm_field_entry_t entry;
		} field_entry_remove;
		struct {
			int unit;
			bcm_field_group_t group;
		} field_group_compress;
		struct {
			int unit;
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_t * group;
		} field_group_create;
		struct {
			int unit;
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_t group;
		} field_group_create_id;
		struct {
			int unit;
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_mode_t mode;
			bcm_field_group_t * group;
		} field_group_create_mode;
		struct {
			int unit;
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_mode_t mode;
			bcm_field_group_t group;
		} field_group_create_mode_id;
		struct {
			int unit;
			bcm_field_group_t group;
		} field_group_destroy;
#ifdef	BROADCOM_DEBUG
		struct {
			int unit;
			bcm_field_group_t group;
		} field_group_dump;
#endif	/* BROADCOM_DEBUG */
		struct {
			int unit;
			bcm_field_group_t group;
			int * enable;
		} field_group_enable_get;
		struct {
			int unit;
			bcm_field_group_t group;
			int enable;
		} field_group_enable_set;
		struct {
			int unit;
			bcm_field_group_t group;
		} field_group_flush;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_field_qset_t * qset;
		} field_group_get;
		struct {
			int unit;
			bcm_field_group_t group;
		} field_group_install;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_field_group_mode_t * mode;
		} field_group_mode_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_mode_t mode;
			bcm_field_group_t * group;
		} field_group_port_create_mode;
		struct {
			int unit;
			bcm_port_t port;
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_mode_t mode;
			bcm_field_group_t group;
		} field_group_port_create_mode_id;
		struct {
			int unit;
			bcm_pbmp_t pbmp;
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_mode_t mode;
			bcm_field_group_t * group;
		} field_group_ports_create_mode;
		struct {
			int unit;
			bcm_pbmp_t pbmp;
			bcm_field_qset_t qset;
			int pri;
			bcm_field_group_mode_t mode;
			bcm_field_group_t group;
		} field_group_ports_create_mode_id;
		struct {
			int unit;
			bcm_field_group_t group;
			int * priority;
		} field_group_priority_get;
		struct {
			int unit;
			bcm_field_group_t group;
			int priority;
		} field_group_priority_set;
		struct {
			int unit;
			bcm_field_group_t group;
		} field_group_remove;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_field_qset_t qset;
		} field_group_satisfies_qset;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_field_qset_t qset;
		} field_group_set;
		struct {
			int unit;
			bcm_field_group_t group;
			bcm_field_group_status_t * status;
		} field_group_status_get;
		struct {
			int unit;
		} field_init;
		struct {
			int unit;
			bcm_field_entry_t entry;
		} field_meter_create;
		struct {
			int unit;
			bcm_field_entry_t entry;
		} field_meter_destroy;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int meter_num;
			uint32 * kbits_sec;
			uint32 * kbits_burst;
		} field_meter_get;
		struct {
			int unit;
			bcm_field_entry_t entry;
			int meter_num;
			uint32 kbits_sec;
			uint32 kbits_burst;
		} field_meter_set;
		struct {
			int unit;
			bcm_field_entry_t src_entry;
			bcm_field_entry_t dst_entry;
		} field_meter_share;
		struct {
			int unit;
			bcm_field_qset_t * qset;
			bcm_field_udf_t udf_id;
		} field_qset_add_udf;
		struct {
			int unit;
			bcm_field_qset_t * qset;
			int qual_id;
		} field_qset_data_qualifier_add;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 flag;
			uint32 size;
		} field_qualify_BigIcmpCheck;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_DSCP;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_decap_t decap;
		} field_qualify_Decap;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_DosAttack;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Drop;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_DstClassField;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_DstClassL2;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_DstClassL3;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t data;
			bcm_ip_t mask;
		} field_qualify_DstIp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_DstIp6;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_DstIp6High;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_DstMac;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_module_t data;
			bcm_module_t mask;
		} field_qualify_DstModid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_module_t data_modid;
			bcm_module_t mask_modid;
			bcm_port_t data_port;
			bcm_port_t mask_port;
		} field_qualify_DstPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_port_t data;
			bcm_port_t mask;
		} field_qualify_DstPortTgid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_trunk_t data;
			bcm_trunk_t mask;
		} field_qualify_DstTrunk;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 flag;
		} field_qualify_EqualL4Port;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_EtherType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ExtensionHeaderSubCode;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ExtensionHeaderType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_ForwardingVlanValid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_HiGig;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_IcmpTypeCode;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 data;
			uint16 mask;
		} field_qualify_IgmpTypeMaxRespTime;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_port_t data;
			bcm_port_t mask;
		} field_qualify_InPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_pbmp_t data;
			bcm_pbmp_t mask;
		} field_qualify_InPorts;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IngressStpState;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerDSCP;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t data;
			bcm_ip_t mask;
		} field_qualify_InnerDstIp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerDstIp6;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerDstIp6High;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IpFrag_t frag_info;
		} field_qualify_InnerIpFrag;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerIpProtocol;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t data;
			bcm_ip_t mask;
		} field_qualify_InnerSrcIp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerSrcIp6;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_InnerSrcIp6High;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 tpid;
		} field_qualify_InnerTpid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_InnerTtl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_InnerVlan;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_InterfaceClassL2;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_InterfaceClassL3;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_InterfaceClassPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_Ip6FlowLabel;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Ip6HopLimit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Ip6NextHeader;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Ip6TrafficClass;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IpAuth;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IpFlags;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IpFrag_t frag_info;
		} field_qualify_IpFrag;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_IpInfo;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IpProtocol;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IpProtocolCommon_t protocol;
		} field_qualify_IpProtocolCommon;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_IpType_t type;
		} field_qualify_IpType;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_IpmcStarGroupHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2CacheHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2DestHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_L2Format_t type;
		} field_qualify_L2Format;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2SrcHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2SrcStatic;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L2StationMove;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L3DestHostHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L3DestRouteHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_if_group_t data;
			bcm_if_group_t mask;
		} field_qualify_L3IntfGroup;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L3Routable;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L3SrcHostHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_l4_port_t data;
			bcm_l4_port_t mask;
		} field_qualify_L4DstPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_L4Ports;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_l4_port_t data;
			bcm_l4_port_t mask;
		} field_qualify_L4SrcPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_llc_header_t data;
			bcm_field_llc_header_t mask;
		} field_qualify_Llc;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_LookupClass0;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_LookupStatus;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MHOpcode;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MirrorCopy;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_MplsTerminated;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_port_t data;
			bcm_port_t mask;
		} field_qualify_OutPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_pbmp_t data;
			bcm_pbmp_t mask;
		} field_qualify_OutPorts;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint16 tpid;
		} field_qualify_OuterTpid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_vlan_t data;
			bcm_vlan_t mask;
		} field_qualify_OuterVlan;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_PacketFormat;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_PacketRes;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_PortClass;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_range_t range;
			int invert;
		} field_qualify_RangeCheck;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_snap_header_t data;
			bcm_field_snap_header_t mask;
		} field_qualify_Snap;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_SrcClassField;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_SrcClassL2;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_SrcClassL3;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_ip_t data;
			bcm_ip_t mask;
		} field_qualify_SrcIp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_SrcIp6;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_SrcIp6High;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 flag;
		} field_qualify_SrcIpEqualDstIp;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 * data;
			uint8 * mask;
		} field_qualify_SrcMac;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_SrcMacGroup;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_module_t data;
			bcm_module_t mask;
		} field_qualify_SrcModid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_module_t data_modid;
			bcm_module_t mask_modid;
			bcm_port_t data_port;
			bcm_port_t mask_port;
		} field_qualify_SrcPort;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_port_t data;
			bcm_port_t mask;
		} field_qualify_SrcPortTgid;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_trunk_t data;
			bcm_trunk_t mask;
		} field_qualify_SrcTrunk;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_stage_t stage;
		} field_qualify_Stage;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TcpControl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TcpHeaderSize;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 flag;
		} field_qualify_TcpSequenceZero;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Tos;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_Ttl;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_TunnelTerminated;
		struct {
			int unit;
			bcm_field_entry_t entry;
			bcm_field_udf_t udf_id;
			uint8 * data;
			uint8 * mask;
		} field_qualify_UserDefined;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_VlanFormat;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint8 data;
			uint8 mask;
		} field_qualify_VlanTranslationHit;
		struct {
			int unit;
			bcm_field_entry_t entry;
			uint32 data;
			uint32 mask;
		} field_qualify_Vrf;
		struct {
			int unit;
			bcm_field_entry_t entry;
		} field_qualify_clear;
		struct {
			int unit;
			bcm_field_entry_t eid;
			int qual_id;
			uint8 * data;
			uint8 * mask;
			uint16 length;
		} field_qualify_data;
		struct {
			int unit;
			bcm_field_range_t * range;
			uint32 flags;
			bcm_l4_port_t min;
			bcm_l4_port_t max;
		} field_range_create;
		struct {
			int unit;
			bcm_field_range_t range;
			uint32 flags;
			bcm_l4_port_t min;
			bcm_l4_port_t max;
		} field_range_create_id;
		struct {
			int unit;
			bcm_field_range_t range;
		} field_range_destroy;
		struct {
			int unit;
			bcm_field_range_t range;
			uint32 * flags;
			bcm_l4_port_t * min;
			bcm_l4_port_t * max;
		} field_range_get;
		struct {
			int unit;
			bcm_field_range_t * range;
			uint32 flags;
			bcm_l4_port_t min;
			bcm_l4_port_t max;
			bcm_if_group_t group;
		} field_range_group_create;
		struct {
			int unit;
			bcm_field_range_t range;
			uint32 flags;
			bcm_l4_port_t min;
			bcm_l4_port_t max;
			bcm_if_group_t group;
		} field_range_group_create_id;
		struct {
			int unit;
		} field_resync;
#ifdef	BROADCOM_DEBUG
		struct {
			int unit;
			char * pfx;
		} field_show;
#endif	/* BROADCOM_DEBUG */
		struct {
			int unit;
			bcm_field_status_t * status;
		} field_status_get;
		struct {
			int unit;
			bcm_field_udf_spec_t * udf_spec;
			bcm_field_udf_t * udf_id;
		} field_udf_create;
		struct {
			int unit;
			bcm_field_udf_spec_t * udf_spec;
			bcm_field_udf_t udf_id;
		} field_udf_create_id;
		struct {
			int unit;
			bcm_field_udf_t udf_id;
		} field_udf_destroy;
		struct {
			int unit;
			int index;
			bcm_port_frametype_t * frametype;
			bcm_port_ethertype_t * ethertype;
		} field_udf_ethertype_get;
		struct {
			int unit;
			int index;
			bcm_port_frametype_t frametype;
			bcm_port_ethertype_t ethertype;
		} field_udf_ethertype_set;
		struct {
			int unit;
			bcm_field_udf_spec_t * udf_spec;
			bcm_field_udf_t udf_id;
		} field_udf_get;
		struct {
			int unit;
			int index;
			uint32 * flags;
			uint8 * proto;
		} field_udf_ipprotocol_get;
		struct {
			int unit;
			int index;
			uint32 flags;
			uint8 proto;
		} field_udf_ipprotocol_set;
		struct {
			int unit;
			bcm_field_udf_spec_t * udf_spec;
			uint32 * flags;
			uint32 * offset;
		} field_udf_spec_get;
		struct {
			int unit;
			bcm_field_udf_spec_t * udf_spec;
			uint32 flags;
			uint32 offset;
		} field_udf_spec_set;
		struct {
			int unit;
			bcm_filterid_t f;
			bcm_filter_action_t action;
			uint32 param;
		} filter_action_match;
		struct {
			int unit;
			bcm_filterid_t f;
			bcm_filter_action_t action;
			uint32 param;
		} filter_action_no_match;
		struct {
			int unit;
			bcm_filterid_t f;
			bcm_filter_action_t action;
			uint32 param;
			int meter_id;
		} filter_action_out_profile;
		struct {
			int unit;
			bcm_filterid_t f_src;
			bcm_filterid_t * f_return;
		} filter_copy;
		struct {
			int unit;
			bcm_filterid_t f_src;
			bcm_filterid_t f_dest;
		} filter_copy_id;
		struct {
			int unit;
			bcm_filterid_t * f_return;
		} filter_create;
		struct {
			int unit;
			bcm_filterid_t f;
		} filter_create_id;
		struct {
			int unit;
			bcm_filterid_t f;
		} filter_destroy;
#ifdef	BROADCOM_DEBUG
		struct {
			int unit;
			bcm_filterid_t f;
		} filter_dump;
#endif	/* BROADCOM_DEBUG */
		struct {
			int unit;
		} filter_init;
		struct {
			int unit;
			bcm_filterid_t f;
		} filter_install;
		struct {
			int unit;
			bcm_filterid_t f;
		} filter_qualify_broadcast;
		struct {
			int unit;
			bcm_filterid_t f;
			int offset;
			int len;
			uint8 * data;
			uint8 * mask;
		} filter_qualify_data;
		struct {
			int unit;
			bcm_filterid_t f;
			int offset;
			uint16 val;
			uint16 mask;
		} filter_qualify_data16;
		struct {
			int unit;
			bcm_filterid_t f;
			int offset;
			uint32 val;
			uint32 mask;
		} filter_qualify_data32;
		struct {
			int unit;
			bcm_filterid_t f;
			int offset;
			uint8 val;
			uint8 mask;
		} filter_qualify_data8;
		struct {
			int unit;
			bcm_filterid_t f;
		} filter_qualify_data_cvt;
		struct {
			int unit;
			bcm_filterid_t f;
			bcm_pbmp_t pbmp;
		} filter_qualify_egress;
		struct {
			int unit;
			bcm_filterid_t f;
			int module_id;
		} filter_qualify_egress_modid;
		struct {
			int unit;
			bcm_filterid_t f;
			bcm_filter_format_t format;
		} filter_qualify_format;
		struct {
			int unit;
			bcm_filterid_t f;
			bcm_pbmp_t pbmp;
		} filter_qualify_ingress;
		struct {
			int unit;
			bcm_filterid_t f;
		} filter_qualify_known_mcast;
		struct {
			int unit;
			bcm_filterid_t f;
		} filter_qualify_known_ucast;
		struct {
			int unit;
			bcm_filterid_t f;
			int prio;
		} filter_qualify_priority;
		struct {
			int unit;
			bcm_filterid_t f;
			int partial_match;
		} filter_qualify_stop;
		struct {
			int unit;
			bcm_filterid_t f;
		} filter_qualify_unknown_mcast;
		struct {
			int unit;
			bcm_filterid_t f;
		} filter_qualify_unknown_ucast;
		struct {
			int unit;
			bcm_filterid_t f;
		} filter_reinstall;
		struct {
			int unit;
			bcm_filterid_t f;
		} filter_remove;
		struct {
			int unit;
		} filter_remove_all;
#ifdef	BROADCOM_DEBUG
		struct {
			int unit;
			char * pfx;
		} filter_show;
#endif	/* BROADCOM_DEBUG */
		struct {
			char * type;
			char * subtype;
			int remunit;
		} find;
		struct {
			int unit;
			bcm_port_t port;
			int * ttl;
			uint16 * mmc_type;
			uint32 * flags;
		} htls_egress_port_get;
		struct {
			int unit;
			bcm_port_t port;
			int ttl;
			uint16 mmc_type;
			uint32 flags;
		} htls_egress_port_set;
		struct {
			int unit;
			int * enable;
		} htls_mode_get;
		struct {
			int unit;
			int enable;
		} htls_mode_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * tunnel_label;
		} htls_tunnel_label_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 tunnel_label;
		} htls_tunnel_label_set;
		struct {
			int unit;
			bcm_port_t port;
			uint8 * dest_mac;
		} htls_uplink_da_get;
		struct {
			int unit;
			bcm_port_t port;
			uint8 * dest_mac;
		} htls_uplink_da_set;
		struct {
			int unit;
			bcm_port_t port;
			uint8 * src_mac;
		} htls_uplink_sa_get;
		struct {
			int unit;
			bcm_port_t port;
			uint8 * src_mac;
		} htls_uplink_sa_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * vc_label;
		} htls_vclabel_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 vc_label;
		} htls_vclabel_set;
#ifdef	INCLUDE_I2C
		struct {
			int unit;
			int fd;
			int opcode;
			void * data;
			int len;
		} i2c_ioctl;
		struct {
			int unit;
			char * devname;
			uint32 flags;
			int speed;
		} i2c_open;
		struct {
			int unit;
			int fd;
			uint32 addr;
			uint8 * data;
			uint32 * nbytes;
		} i2c_read;
		struct {
			int unit;
			int fd;
			uint32 addr;
			uint8 * data;
			uint32 nbytes;
		} i2c_write;
#endif	/* INCLUDE_I2C */
		struct {
			int unit;
			int * enable;
		} igmp_snooping_enable_get;
		struct {
			int unit;
			int enable;
		} igmp_snooping_enable_set;
		struct {
			int unit;
		} igmp_snooping_init;
		struct {
			int unit;
			bcm_info_t * info;
		} info_get;
		struct {
			int unit;
		} init;
		struct {
			int unit;
		} init_check;
		struct {
			int unit;
			int * map;
		} init_phy_id_map;
		struct {
			int unit;
			uint32 flags;
		} init_selective;
#ifdef	INCLUDE_L3
		struct {
			uint8 * ip6;
			int len;
		} ip6_mask_create;
		struct {
			uint8 * mask;
		} ip6_mask_length;
	/* bcm_ip_mask_create has a non int return type */
		struct {
			bcm_ip_t ip;
		} ip_mask_length;
#endif	/* INCLUDE_L3 */
		struct {
			int unit;
			bcm_ipfix_stage_t stage;
			bcm_port_t port;
			bcm_ipfix_config_t * config;
		} ipfix_config_get;
		struct {
			int unit;
			bcm_ipfix_stage_t stage;
			bcm_port_t port;
			bcm_ipfix_config_t * config;
		} ipfix_config_set;
		struct {
			int unit;
			bcm_ipfix_callback_t callback;
			void * userdata;
		} ipfix_register;
		struct {
			int unit;
			bcm_ipfix_callback_t callback;
			void * userdata;
		} ipfix_unregister;
#ifdef	INCLUDE_L3
		struct {
			int unit;
			bcm_ipmc_addr_t * data;
		} ipmc_add;
		struct {
			int unit;
			bcm_ip_t s_ip_addr;
			bcm_ip_t mc_ip_addr;
			bcm_vlan_t vid;
			bcm_pbmp_t pbmp;
			bcm_pbmp_t ut_pbmp;
		} ipmc_add_l2_ports;
		struct {
			int unit;
			bcm_ip_t s_ip_addr;
			bcm_ip_t mc_ip_addr;
			bcm_vlan_t vid;
			bcm_pbmp_t pbmp;
		} ipmc_add_l3_ports;
		struct {
			int unit;
			uint32 flags;
			bcm_ipmc_traverse_cb age_cb;
			void * user_data;
		} ipmc_age;
		struct {
			int unit;
			int ipmc_idx;
			bcm_port_t port;
			bcm_pbmp_t pbmp;
		} ipmc_bitmap_del;
		struct {
			int unit;
			int ipmc_idx;
			bcm_port_t port;
			bcm_pbmp_t * pbmp;
		} ipmc_bitmap_get;
		struct {
			int unit;
			int * max_index;
		} ipmc_bitmap_max_get;
		struct {
			int unit;
			int ipmc_idx;
			bcm_port_t port;
			bcm_pbmp_t pbmp;
		} ipmc_bitmap_set;
		struct {
			int unit;
			bcm_ip_t s_ip_addr;
			bcm_ip_t mc_ip_addr;
			bcm_vlan_t vid;
			int cos;
		} ipmc_cos_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_ipmc_counters_t * counters;
		} ipmc_counters_get;
		struct {
			int unit;
			bcm_ip_t s_ip_addr;
			bcm_ip_t mc_ip_addr;
			bcm_vlan_t vid;
			int keep;
		} ipmc_delete;
		struct {
			int unit;
		} ipmc_delete_all;
		struct {
			int unit;
			bcm_ip_t s_ip_addr;
			bcm_ip_t mc_ip_addr;
			bcm_vlan_t vid;
			bcm_port_t port;
		} ipmc_delete_l2_ports;
		struct {
			int unit;
			bcm_ip_t s_ip_addr;
			bcm_ip_t mc_ip_addr;
			bcm_vlan_t vid;
			bcm_port_t port;
		} ipmc_delete_l3_port;
		struct {
			int unit;
		} ipmc_detach;
		struct {
			int unit;
			int mc_index;
			bcm_port_t port;
			bcm_l3_intf_t * l3_intf;
		} ipmc_egress_intf_add;
		struct {
			int unit;
			int mc_index;
			bcm_port_t port;
			bcm_l3_intf_t * l3_intf;
		} ipmc_egress_intf_delete;
		struct {
			int unit;
			int mc_index;
			bcm_port_t port;
		} ipmc_egress_intf_delete_all;
		struct {
			int unit;
			int mc_index;
			bcm_port_t port;
			int if_max;
			bcm_if_t * if_array;
			int * if_count;
		} ipmc_egress_intf_get;
		struct {
			int unit;
			int mc_index;
			bcm_port_t port;
			int if_count;
			bcm_if_t * if_array;
		} ipmc_egress_intf_set;
		struct {
			int unit;
			bcm_port_t port;
			uint8 * mac;
			int * untag;
			bcm_vlan_t * vid;
			int * ttl_threshold;
		} ipmc_egress_port_get;
		struct {
			int unit;
		} ipmc_egress_port_init;
		struct {
			int unit;
			bcm_port_t port;
			uint8 * mac;
			int untag;
			bcm_vlan_t vid;
			int ttl_threshold;
		} ipmc_egress_port_set;
		struct {
			int unit;
			int enable;
		} ipmc_enable;
		struct {
			int unit;
			bcm_ip_t s_ip_addr;
			bcm_ip_t mc_ip_addr;
			bcm_vlan_t vid;
			int enable;
		} ipmc_entry_enable_set;
		struct {
			int unit;
			bcm_ipmc_addr_t * data;
		} ipmc_find;
		struct {
			int unit;
			bcm_ip_t s_ip_addr;
			bcm_ip_t mc_ip_addr;
			bcm_vlan_t vid;
			bcm_ipmc_addr_t * data;
		} ipmc_get;
		struct {
			int unit;
			int index;
			bcm_ipmc_addr_t * data;
		} ipmc_get_by_index;
		struct {
			int unit;
		} ipmc_init;
		struct {
			int unit;
			bcm_ip_t s_ip_addr;
			bcm_ip_t mc_ip_addr;
			bcm_vlan_t vid;
			int mod_id;
		} ipmc_port_modid_set;
		struct {
			int unit;
			bcm_ip_t s_ip_addr;
			bcm_ip_t mc_ip_addr;
			bcm_vlan_t vid;
			int ts;
			int port_tgid;
		} ipmc_port_tgid_set;
		struct {
			int unit;
			bcm_ipmc_addr_t * data;
		} ipmc_remove;
		struct {
			int unit;
		} ipmc_remove_all;
		struct {
			int unit;
			int index;
			bcm_pbmp_t pbmp;
			bcm_vlan_t vlan;
		} ipmc_repl_add;
		struct {
			int unit;
			int index;
			bcm_pbmp_t pbmp;
			bcm_vlan_t vlan;
		} ipmc_repl_delete;
		struct {
			int unit;
			int index;
			bcm_pbmp_t pbmp;
		} ipmc_repl_delete_all;
		struct {
			int unit;
			int index;
			bcm_port_t port;
			uint32 * vlan_vec;
		} ipmc_repl_get;
		struct {
			int unit;
			int mc_index;
			bcm_port_t port;
			uint32 * vlan_vec;
		} ipmc_repl_set;
		struct {
			int unit;
			int enable;
		} ipmc_source_ip_search;
		struct {
			int unit;
			int enable;
		} ipmc_source_port_check;
		struct {
			int unit;
			bcm_ip_t s_ip_addr;
			bcm_ip_t mc_ip_addr;
			bcm_vlan_t vid;
			int cd;
		} ipmc_sport_mismatch_action;
		struct {
			int unit;
			uint32 flags;
			bcm_ipmc_traverse_cb cb;
			void * user_data;
		} ipmc_traverse;
		struct {
			int unit;
			bcm_ip_t s_ip_addr;
			bcm_ip_t mc_ip_addr;
			bcm_vlan_t vid;
			int ttl_threshold;
		} ipmc_ttl_threshold_set;
#endif	/* INCLUDE_L3 */
		struct {
			int unit;
			bcm_l2_addr_t * l2addr;
		} l2_addr_add;
		struct {
			int unit;
			uint8 * mac;
			bcm_vlan_t vid;
		} l2_addr_delete;
		struct {
			int unit;
			uint8 * mac;
			uint32 flags;
		} l2_addr_delete_by_mac;
		struct {
			int unit;
			uint8 * mac;
			bcm_module_t mod;
			bcm_port_t port;
			uint32 flags;
		} l2_addr_delete_by_mac_port;
		struct {
			int unit;
			bcm_module_t mod;
			bcm_port_t port;
			uint32 flags;
		} l2_addr_delete_by_port;
		struct {
			int unit;
			bcm_trunk_t tid;
			uint32 flags;
		} l2_addr_delete_by_trunk;
		struct {
			int unit;
			bcm_vlan_t vid;
			uint32 flags;
		} l2_addr_delete_by_vlan;
		struct {
			int unit;
			bcm_vlan_t vid;
			bcm_module_t mod;
			bcm_port_t port;
			uint32 flags;
		} l2_addr_delete_by_vlan_port;
		struct {
			int unit;
			bcm_vlan_t vid;
			bcm_trunk_t tid;
			uint32 flags;
		} l2_addr_delete_by_vlan_trunk;
		struct {
			int unit;
		} l2_addr_freeze;
		struct {
			int unit;
			uint8 * mac_addr;
			bcm_vlan_t vid;
			bcm_l2_addr_t * l2addr;
		} l2_addr_get;
		struct {
			int unit;
			bcm_l2_addr_callback_t callback;
			void * userdata;
		} l2_addr_register;
		struct {
			int unit;
		} l2_addr_thaw;
		struct {
			int unit;
			bcm_l2_addr_callback_t callback;
			void * userdata;
		} l2_addr_unregister;
		struct {
			int unit;
			int * age_seconds;
		} l2_age_timer_get;
		struct {
			int unit;
			int age_seconds;
		} l2_age_timer_set;
		struct {
			int unit;
		} l2_bpdu_count;
		struct {
			int unit;
			int index;
			bcm_mac_t * addr;
		} l2_bpdu_get;
		struct {
			int unit;
			int index;
			uint8 * addr;
		} l2_bpdu_set;
		struct {
			int unit;
			int index;
		} l2_cache_delete;
		struct {
			int unit;
		} l2_cache_delete_all;
		struct {
			int unit;
			int index;
			bcm_l2_cache_addr_t * addr;
		} l2_cache_get;
		struct {
			int unit;
		} l2_cache_init;
		struct {
			int unit;
			int index;
			bcm_l2_cache_addr_t * addr;
			int * index_used;
		} l2_cache_set;
		struct {
			int unit;
			int * size;
		} l2_cache_size_get;
		struct {
			int unit;
		} l2_clear;
		struct {
			int unit;
			bcm_l2_addr_t * addr;
			bcm_l2_addr_t * cf_array;
			int cf_max;
			int * cf_count;
		} l2_conflict_get;
		struct {
			int unit;
		} l2_detach;
		struct {
			int unit;
			bcm_l2_egress_t * egr;
		} l2_egress_create;
		struct {
			int unit;
			bcm_if_t encap_id;
		} l2_egress_destroy;
		struct {
			int unit;
			bcm_l2_egress_t * egr;
			bcm_if_t * encap_id;
		} l2_egress_find;
		struct {
			int unit;
			bcm_if_t encap_id;
			bcm_l2_egress_t * egr;
		} l2_egress_get;
		struct {
			int unit;
			bcm_l2_egress_traverse_cb trav_fn;
			void * user_data;
		} l2_egress_traverse;
		struct {
			int unit;
		} l2_init;
		struct {
			int unit;
			char * pfx;
			bcm_l2_addr_t * entry;
			char * sfx;
		} l2_key_dump;
		struct {
			int unit;
			int lclass;
			int * lclass_prio;
			uint32 * flags;
		} l2_learn_class_get;
		struct {
			int unit;
			int lclass;
			int lclass_prio;
			uint32 flags;
		} l2_learn_class_set;
		struct {
			int unit;
			bcm_l2_learn_limit_t * limit;
		} l2_learn_limit_get;
		struct {
			int unit;
			bcm_l2_learn_limit_t * limit;
		} l2_learn_limit_set;
		struct {
			int unit;
			bcm_gport_t port;
			int * lclass;
		} l2_learn_port_class_get;
		struct {
			int unit;
			bcm_gport_t port;
			int lclass;
		} l2_learn_port_class_set;
		struct {
			int unit;
			int modid;
			int port;
		} l2_port_native;
		struct {
			int unit;
			uint32 flags;
			bcm_l2_addr_t * match_addr;
			bcm_module_t new_module;
			bcm_port_t new_port;
			bcm_trunk_t new_trunk;
		} l2_replace;
		struct {
			int unit;
			bcm_l2_addr_t * l2_addr;
			int enable;
		} l2_stat_enable_set;
		struct {
			int unit;
			bcm_l2_addr_t * l2_addr;
			bcm_l2_stat_t stat;
			uint64 * val;
		} l2_stat_get;
		struct {
			int unit;
			bcm_l2_addr_t * l2_addr;
			bcm_l2_stat_t stat;
			uint32 * val;
		} l2_stat_get32;
		struct {
			int unit;
			bcm_l2_addr_t * l2_addr;
			bcm_l2_stat_t stat;
			uint64 val;
		} l2_stat_set;
		struct {
			int unit;
			bcm_l2_addr_t * l2_addr;
			bcm_l2_stat_t stat;
			uint32 val;
		} l2_stat_set32;
		struct {
			int unit;
			bcm_l2_traverse_cb trav_fn;
			void * user_data;
		} l2_traverse;
		struct {
			int unit;
			uint8 * mac;
			bcm_vlan_t vlan;
		} l2_tunnel_add;
		struct {
			int unit;
			uint8 * mac;
			bcm_vlan_t vlan;
		} l2_tunnel_delete;
		struct {
			int unit;
		} l2_tunnel_delete_all;
#ifdef	INCLUDE_L3
		struct {
			int unit;
			uint32 flags;
			bcm_l3_age_cb age_out;
		} l3_age;
		struct {
			int unit;
		} l3_cleanup;
		struct {
			int unit;
			bcm_l3_key_t * ipkey;
			bcm_l3_key_t * cf_array;
			int cf_max;
			int * cf_count;
		} l3_conflict_get;
		struct {
			int unit;
			bcm_l3_route_t * info;
		} l3_defip_add;
		struct {
			int unit;
			bcm_l3_route_traverse_cb age_out;
		} l3_defip_age;
		struct {
			int unit;
			bcm_l3_route_t * info;
		} l3_defip_delete;
		struct {
			int unit;
		} l3_defip_delete_all;
		struct {
			int unit;
			int intf;
		} l3_defip_delete_by_interface;
		struct {
			int unit;
			int index;
			bcm_l3_route_t * info;
		} l3_defip_find_index;
		struct {
			int unit;
			bcm_l3_route_t * info;
		} l3_defip_get;
		struct {
			int unit;
			int * max;
		} l3_defip_max_ecmp_get;
		struct {
			int unit;
			int max;
		} l3_defip_max_ecmp_set;
		struct {
			int unit;
			uint32 flags;
			bcm_l3_egress_t * egr;
			bcm_if_t * if_id;
		} l3_egress_create;
		struct {
			int unit;
			bcm_if_t intf;
		} l3_egress_destroy;
		struct {
			int unit;
			bcm_l3_egress_t * egr;
			bcm_if_t * intf;
		} l3_egress_find;
		struct {
			int unit;
			bcm_if_t intf;
			bcm_l3_egress_t * egr;
		} l3_egress_get;
		struct {
			int unit;
			bcm_if_t mpintf;
			bcm_if_t intf;
		} l3_egress_multipath_add;
		struct {
			int unit;
			uint32 flags;
			int intf_count;
			bcm_if_t * intf_array;
			bcm_if_t * mpintf;
		} l3_egress_multipath_create;
		struct {
			int unit;
			bcm_if_t mpintf;
			bcm_if_t intf;
		} l3_egress_multipath_delete;
		struct {
			int unit;
			bcm_if_t mpintf;
		} l3_egress_multipath_destroy;
		struct {
			int unit;
			int intf_count;
			bcm_if_t * intf_array;
			bcm_if_t * mpintf;
		} l3_egress_multipath_find;
		struct {
			int unit;
			bcm_if_t mpintf;
			int intf_size;
			bcm_if_t * intf_array;
			int * intf_count;
		} l3_egress_multipath_get;
		struct {
			int unit;
			bcm_l3_egress_multipath_traverse_cb trav_fn;
			void * user_data;
		} l3_egress_multipath_traverse;
		struct {
			int unit;
			bcm_l3_egress_t * egr;
			int enable;
		} l3_egress_stat_enable_set;
		struct {
			int unit;
			bcm_l3_egress_t * egr;
			bcm_l3_stat_t stat;
			uint64 * val;
		} l3_egress_stat_get;
		struct {
			int unit;
			bcm_l3_egress_t * egr;
			bcm_l3_stat_t stat;
			uint32 * val;
		} l3_egress_stat_get32;
		struct {
			int unit;
			bcm_l3_egress_t * egr;
			bcm_l3_stat_t stat;
			uint64 val;
		} l3_egress_stat_set;
		struct {
			int unit;
			bcm_l3_egress_t * egr;
			bcm_l3_stat_t stat;
			uint32 val;
		} l3_egress_stat_set32;
		struct {
			int unit;
			bcm_l3_egress_traverse_cb trav_fn;
			void * user_data;
		} l3_egress_traverse;
		struct {
			int unit;
			int enable;
		} l3_enable_set;
		struct {
			int unit;
			bcm_l3_host_t * info;
		} l3_host_add;
		struct {
			int unit;
			uint32 flags;
			bcm_l3_host_traverse_cb age_cb;
			void * user_data;
		} l3_host_age;
		struct {
			int unit;
			bcm_l3_key_t * ipkey;
			bcm_l3_key_t * cf_array;
			int cf_max;
			int * cf_count;
		} l3_host_conflict_get;
		struct {
			int unit;
			bcm_l3_host_t * ip_addr;
		} l3_host_delete;
		struct {
			int unit;
			bcm_l3_host_t * info;
		} l3_host_delete_all;
		struct {
			int unit;
			bcm_l3_host_t * info;
		} l3_host_delete_by_interface;
		struct {
			int unit;
			bcm_l3_route_t * ip_addr;
		} l3_host_delete_by_network;
		struct {
			int unit;
			bcm_l3_host_t * info;
		} l3_host_find;
		struct {
			int unit;
			bcm_ip_t info;
		} l3_host_invalidate_entry;
		struct {
			int unit;
			bcm_l3_host_t * host;
			int enable;
		} l3_host_stat_enable_set;
		struct {
			int unit;
			bcm_l3_host_t * host;
			bcm_l3_stat_t stat;
			uint64 * val;
		} l3_host_stat_get;
		struct {
			int unit;
			bcm_l3_host_t * host;
			bcm_l3_stat_t stat;
			uint32 * val;
		} l3_host_stat_get32;
		struct {
			int unit;
			bcm_l3_host_t * host;
			bcm_l3_stat_t stat;
			uint64 val;
		} l3_host_stat_set;
		struct {
			int unit;
			bcm_l3_host_t * host;
			bcm_l3_stat_t stat;
			uint32 val;
		} l3_host_stat_set32;
		struct {
			int unit;
			uint32 flags;
			uint32 start;
			uint32 end;
			bcm_l3_host_traverse_cb cb;
			void * user_data;
		} l3_host_traverse;
		struct {
			int unit;
			bcm_ip_t info;
		} l3_host_validate_entry;
		struct {
			int unit;
			bcm_l3_info_t * l3info;
		} l3_info;
		struct {
			int unit;
		} l3_init;
		struct {
			int unit;
			uint8 * mac_addr;
			bcm_vlan_t vid;
			int add_to_arl;
		} l3_interface_create;
		struct {
			int unit;
			int intf_id;
		} l3_interface_destroy;
		struct {
			int unit;
			int intf_id;
			bcm_vlan_t * vid;
			uint8 * mac_addr;
		} l3_interface_find;
		struct {
			int unit;
			bcm_vlan_t vid;
			int * intf_id;
		} l3_interface_find_by_vlan;
		struct {
			int unit;
			uint8 * mac_addr;
			bcm_vlan_t vid;
			int intf_idx;
			int add_to_arl;
		} l3_interface_id_create;
		struct {
			int unit;
			uint8 * mac_addr;
			bcm_vlan_t vid;
			int intf_idx;
			int add_to_arl;
		} l3_interface_id_update;
		struct {
			int unit;
			uint8 * mac_addr;
			bcm_vlan_t vid;
			int * intf_id;
		} l3_interface_lookup;
		struct {
			int unit;
			bcm_l3_intf_t * intf;
		} l3_intf_create;
		struct {
			int unit;
			bcm_l3_intf_t * intf;
		} l3_intf_delete;
		struct {
			int unit;
		} l3_intf_delete_all;
		struct {
			int unit;
			bcm_l3_intf_t * intf;
		} l3_intf_find;
		struct {
			int unit;
			bcm_l3_intf_t * intf;
		} l3_intf_find_vlan;
		struct {
			int unit;
			bcm_l3_intf_t * intf;
		} l3_intf_get;
		struct {
			int unit;
			bcm_ip_t l3_addr;
		} l3_invalidate_entry;
		struct {
			int unit;
			uint8 * ip6_addr;
		} l3_ip6_prefix_map_add;
		struct {
			int unit;
			uint8 * ip6_addr;
		} l3_ip6_prefix_map_delete;
		struct {
			int unit;
		} l3_ip6_prefix_map_delete_all;
		struct {
			int unit;
			int map_size;
			bcm_ip6_t * ip6_array;
			int * ip6_count;
		} l3_ip6_prefix_map_get;
		struct {
			int unit;
			bcm_l3_ip_t * info;
		} l3_ip_add;
		struct {
			int unit;
			bcm_ip_t ip_addr;
		} l3_ip_delete;
		struct {
			int unit;
		} l3_ip_delete_all;
		struct {
			int unit;
			int intf;
		} l3_ip_delete_by_interface;
		struct {
			int unit;
			bcm_ip_t ip_addr;
			bcm_ip_t mask;
		} l3_ip_delete_by_prefix;
		struct {
			int unit;
			bcm_l3_ip_t * info;
		} l3_ip_find;
		struct {
			int unit;
			int index;
			bcm_l3_ip_t * info;
		} l3_ip_find_index;
		struct {
			int unit;
			bcm_l3_ip_t * info;
		} l3_ip_update_entry_by_key;
		struct {
			int unit;
			bcm_l3_route_t * info;
		} l3_route_add;
		struct {
			int unit;
			uint32 flags;
			bcm_l3_route_traverse_cb age_out;
			void * user_data;
		} l3_route_age;
		struct {
			int unit;
			bcm_l3_route_t * info;
		} l3_route_delete;
		struct {
			int unit;
			bcm_l3_route_t * info;
		} l3_route_delete_all;
		struct {
			int unit;
			bcm_l3_route_t * info;
		} l3_route_delete_by_interface;
		struct {
			int unit;
			bcm_l3_route_t * info;
		} l3_route_get;
		struct {
			int unit;
			int * max;
		} l3_route_max_ecmp_get;
		struct {
			int unit;
			int max;
		} l3_route_max_ecmp_set;
		struct {
			int unit;
			bcm_l3_route_t * the_route;
			bcm_l3_route_t * path_array;
			int max_path;
			int * path_count;
		} l3_route_multipath_get;
		struct {
			int unit;
			bcm_l3_route_t * route;
			int enable;
		} l3_route_stat_enable_set;
		struct {
			int unit;
			bcm_l3_route_t * route;
			bcm_l3_stat_t stat;
			uint64 * val;
		} l3_route_stat_get;
		struct {
			int unit;
			bcm_l3_route_t * route;
			bcm_l3_stat_t stat;
			uint32 * val;
		} l3_route_stat_get32;
		struct {
			int unit;
			bcm_l3_route_t * route;
			bcm_l3_stat_t stat;
			uint64 val;
		} l3_route_stat_set;
		struct {
			int unit;
			bcm_l3_route_t * route;
			bcm_l3_stat_t stat;
			uint32 val;
		} l3_route_stat_set32;
		struct {
			int unit;
			uint32 flags;
			uint32 start;
			uint32 end;
			bcm_l3_route_traverse_cb trav_fn;
			void * user_data;
		} l3_route_traverse;
		struct {
			int unit;
			int * free_l3intf;
			int * free_l3;
			int * free_defip;
			int * free_lpm_blk;
		} l3_status;
		struct {
			int unit;
		} l3_untagged_update;
		struct {
			int unit;
			bcm_ip_t l3_addr;
		} l3_validate_entry;
#endif	/* INCLUDE_L3 */
		struct {
			int unit;
			bcm_pbmp_t pbmp;
		} link_change;
		struct {
			int unit;
			bcm_pbmp_t * pbm;
			int us;
		} link_wait;
		struct {
			int unit;
		} linkscan_detach;
#ifdef	BROADCOM_DEBUG
		struct {
			int unit;
		} linkscan_dump;
#endif	/* BROADCOM_DEBUG */
		struct {
			int unit;
			int * us;
		} linkscan_enable_get;
		struct {
			int unit;
			bcm_port_t port;
		} linkscan_enable_port_get;
		struct {
			int unit;
			int us;
		} linkscan_enable_set;
		struct {
			int unit;
		} linkscan_init;
		struct {
			int unit;
			bcm_port_t port;
			int * mode;
		} linkscan_mode_get;
		struct {
			int unit;
			bcm_port_t port;
			int mode;
		} linkscan_mode_set;
		struct {
			int unit;
			bcm_pbmp_t pbm;
			int mode;
		} linkscan_mode_set_pbm;
		struct {
			int unit;
			bcm_port_t port;
			bcm_linkscan_port_handler_t f;
		} linkscan_port_register;
		struct {
			int unit;
			bcm_port_t port;
			bcm_linkscan_port_handler_t f;
		} linkscan_port_unregister;
		struct {
			int unit;
			bcm_linkscan_handler_t f;
		} linkscan_register;
		struct {
			int unit;
			bcm_linkscan_handler_t f;
		} linkscan_unregister;
		struct {
			int unit;
			bcm_pbmp_t pbm;
		} linkscan_update;
		struct {
			int unit;
			bcm_mcast_addr_t * mcaddr;
		} mcast_addr_add;
		struct {
			int unit;
			bcm_mcast_addr_t * mcaddr;
		} mcast_addr_add_w_l2mcindex;
		struct {
			int unit;
			uint8 * mac;
			bcm_vlan_t vid;
		} mcast_addr_remove;
		struct {
			int unit;
			bcm_mcast_addr_t * mcaddr;
		} mcast_addr_remove_w_l2mcindex;
		struct {
			int unit;
			int mc_idx;
			bcm_port_t in_port;
			bcm_pbmp_t pbmp;
		} mcast_bitmap_del;
		struct {
			int unit;
			int mc_idx;
			bcm_port_t in_port;
			bcm_pbmp_t * pbmp;
		} mcast_bitmap_get;
		struct {
			int unit;
			int * max_index;
		} mcast_bitmap_max_get;
		struct {
			int unit;
			int mc_idx;
			bcm_port_t in_port;
			bcm_pbmp_t pbmp;
		} mcast_bitmap_set;
		struct {
			int unit;
		} mcast_init;
		struct {
			int unit;
			uint8 * mcMacAddr;
			bcm_vlan_t vlanId;
			int srcPort;
			bcm_mcast_addr_t * mcaddr;
			bcm_pbmp_t * allRouterBmp;
		} mcast_join;
		struct {
			int unit;
			uint8 * mcMacAddr;
			bcm_vlan_t vlanId;
			int srcPort;
		} mcast_leave;
		struct {
			int unit;
			bcm_mcast_addr_t * mcaddr;
		} mcast_port_add;
		struct {
			int unit;
			uint8 * mac;
			bcm_vlan_t vid;
			bcm_mcast_addr_t * mcaddr;
		} mcast_port_get;
		struct {
			int unit;
			bcm_mcast_addr_t * mcaddr;
		} mcast_port_remove;
		struct {
			int unit;
			int port;
			int * mid;
		} meter_create;
		struct {
			int unit;
			int port;
			int mid;
		} meter_delete;
		struct {
			int unit;
		} meter_delete_all;
		struct {
			int unit;
			int port;
			int mid;
			uint32 * kbits_sec;
			uint32 * kbits_burst;
		} meter_get;
		struct {
			int unit;
		} meter_init;
		struct {
			int unit;
			int port;
			int mid;
			uint32 kbits_sec;
			uint32 kbits_burst;
		} meter_set;
		struct {
			int unit;
			bcm_mim_vpn_t vpn;
			bcm_mim_port_t * mim_port;
		} mim_port_add;
		struct {
			int unit;
			bcm_mim_vpn_t vpn;
			bcm_gport_t mim_port_id;
		} mim_port_delete;
		struct {
			int unit;
			bcm_mim_vpn_t vpn;
		} mim_port_delete_all;
		struct {
			int unit;
			bcm_mim_vpn_t vpn;
			bcm_mim_port_t * mim_port;
		} mim_port_get;
		struct {
			int unit;
			bcm_mim_vpn_t vpn;
			int port_max;
			bcm_mim_port_t * port_array;
			int * port_count;
		} mim_port_get_all;
		struct {
			int unit;
			bcm_mim_vpn_config_t * info;
		} mim_vpn_create;
		struct {
			int unit;
			bcm_mim_vpn_t vpn;
		} mim_vpn_destroy;
		struct {
			int unit;
		} mim_vpn_destroy_all;
		struct {
			int unit;
			bcm_mim_vpn_t vpn;
			bcm_mim_vpn_config_t * info;
		} mim_vpn_get;
		struct {
			int unit;
			bcm_mim_vpn_traverse_cb cb;
			void * user_data;
		} mim_vpn_traverse;
		struct {
			int unit;
			bcm_mirror_destination_t * mirror_dest;
		} mirror_destination_create;
		struct {
			int unit;
			bcm_gport_t mirror_dest_id;
		} mirror_destination_destroy;
		struct {
			int unit;
			bcm_gport_t mirror_dest_id;
			bcm_mirror_destination_t * mirror_dest;
		} mirror_destination_get;
		struct {
			int unit;
			bcm_mirror_destination_traverse_cb cb;
			void * user_data;
		} mirror_destination_traverse;
		struct {
			int unit;
			bcm_port_t port;
			int * val;
		} mirror_egress_get;
		struct {
			int unit;
			bcm_module_t modid;
			bcm_port_t * port;
		} mirror_egress_path_get;
		struct {
			int unit;
			bcm_module_t modid;
			bcm_port_t port;
		} mirror_egress_path_set;
		struct {
			int unit;
			bcm_port_t port;
			int val;
		} mirror_egress_set;
		struct {
			int unit;
			bcm_port_t port;
			int * val;
		} mirror_ingress_get;
		struct {
			int unit;
			bcm_port_t port;
			int val;
		} mirror_ingress_set;
		struct {
			int unit;
		} mirror_init;
		struct {
			int unit;
			int * mode;
		} mirror_mode_get;
		struct {
			int unit;
			int mode;
		} mirror_mode_set;
		struct {
			int unit;
			int * val;
		} mirror_pfmt_get;
		struct {
			int unit;
			int val;
		} mirror_pfmt_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			bcm_gport_t mirror_dest_id;
		} mirror_port_dest_add;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			bcm_gport_t mirror_dest_id;
		} mirror_port_dest_delete;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
		} mirror_port_dest_delete_all;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			int mirror_dest_size;
			bcm_gport_t * mirror_dest;
			int * mirror_dest_count;
		} mirror_port_dest_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_module_t * dest_mod;
			bcm_port_t * dest_port;
			uint32 * flags;
		} mirror_port_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_module_t dest_mod;
			bcm_port_t dest_port;
			uint32 flags;
		} mirror_port_set;
		struct {
			int unit;
			bcm_port_t * port;
		} mirror_to_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_pbmp_t * pbmp;
		} mirror_to_pbmp_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_pbmp_t pbmp;
		} mirror_to_pbmp_set;
		struct {
			int unit;
			bcm_port_t port;
		} mirror_to_set;
		struct {
			int unit;
			bcm_port_t port;
			uint16 * tpid;
			uint16 * vlan;
		} mirror_vlan_get;
		struct {
			int unit;
			bcm_port_t port;
			uint16 tpid;
			uint16 vlan;
		} mirror_vlan_set;
	/* bcm_module_name has a non int return type */
#ifdef	INCLUDE_L3
		struct {
			int unit;
		} mpls_cleanup;
		struct {
			int unit;
			uint32 flags;
			int * exp_map_id;
		} mpls_exp_map_create;
		struct {
			int unit;
			int exp_map_id;
		} mpls_exp_map_destroy;
		struct {
			int unit;
			int exp_map_id;
			bcm_mpls_exp_map_t * exp_map;
		} mpls_exp_map_get;
		struct {
			int unit;
			int exp_map_id;
			bcm_mpls_exp_map_t * exp_map;
		} mpls_exp_map_set;
		struct {
			int unit;
			bcm_mpls_info_t * info;
		} mpls_info;
		struct {
			int unit;
		} mpls_init;
		struct {
			int unit;
			bcm_l3_intf_t * intf;
		} mpls_l3_initiator_clear;
		struct {
			int unit;
		} mpls_l3_initiator_clear_all;
		struct {
			int unit;
			bcm_l3_intf_t * intf;
			bcm_mpls_l3_initiator_t * mpls_label;
		} mpls_l3_initiator_get;
		struct {
			int unit;
			bcm_l3_intf_t * intf;
			bcm_mpls_l3_initiator_t * mpls_label;
		} mpls_l3_initiator_set;
		struct {
			int unit;
			bcm_mpls_label_t label;
			bcm_gport_t port;
			bcm_mpls_stat_t stat;
			uint64 * val;
		} mpls_label_stat_get;
		struct {
			int unit;
			bcm_mpls_label_t label;
			bcm_gport_t port;
			bcm_mpls_stat_t stat;
			uint32 * val;
		} mpls_label_stat_get32;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_mpls_port_t * mpls_port;
		} mpls_port_add;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_port_t port;
			int * enable;
		} mpls_port_block_get;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_port_t port;
			int enable;
		} mpls_port_block_set;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_gport_t mpls_port_id;
		} mpls_port_delete;
		struct {
			int unit;
			bcm_vpn_t vpn;
		} mpls_port_delete_all;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_mpls_port_t * mpls_port;
		} mpls_port_get;
		struct {
			int unit;
			bcm_vpn_t vpn;
			int port_max;
			bcm_mpls_port_t * port_array;
			int * port_count;
		} mpls_port_get_all;
		struct {
			int unit;
			bcm_gport_t mpls_port;
			int enable;
		} mpls_port_stat_enable_set;
		struct {
			int unit;
			bcm_gport_t mpls_port;
			bcm_cos_t cos;
			bcm_mpls_port_stat_t stat;
			uint64 * val;
		} mpls_port_stat_get;
		struct {
			int unit;
			bcm_gport_t mpls_port;
			bcm_cos_t cos;
			bcm_mpls_port_stat_t stat;
			uint32 * val;
		} mpls_port_stat_get32;
		struct {
			int unit;
			bcm_gport_t mpls_port;
			bcm_cos_t cos;
			bcm_mpls_port_stat_t stat;
			uint64 val;
		} mpls_port_stat_set;
		struct {
			int unit;
			bcm_gport_t mpls_port;
			bcm_cos_t cos;
			bcm_mpls_port_stat_t stat;
			uint32 val;
		} mpls_port_stat_set32;
		struct {
			int unit;
			bcm_mpls_switch_t * mswitch_info;
		} mpls_switch_add;
		struct {
			int unit;
			bcm_mpls_switch_t * mswitch_info;
		} mpls_switch_delete;
		struct {
			int unit;
			int flag;
		} mpls_switch_delete_all;
		struct {
			int unit;
			bcm_mpls_switch_t * mswitch_info;
		} mpls_switch_get;
		struct {
			int unit;
			uint32 flags;
			uint32 start;
			uint32 end;
			bcm_mpls_switch_traverse_cb trav_fn;
			void * user_data;
		} mpls_switch_traverse;
		struct {
			int unit;
			bcm_if_t intf;
		} mpls_tunnel_initiator_clear;
		struct {
			int unit;
		} mpls_tunnel_initiator_clear_all;
		struct {
			int unit;
			bcm_if_t intf;
			int label_max;
			bcm_mpls_egress_label_t * label_array;
			int * label_count;
		} mpls_tunnel_initiator_get;
		struct {
			int unit;
			bcm_if_t intf;
			int num_labels;
			bcm_mpls_egress_label_t * label_array;
		} mpls_tunnel_initiator_set;
		struct {
			int unit;
			bcm_mpls_tunnel_switch_t * info;
		} mpls_tunnel_switch_add;
		struct {
			int unit;
			bcm_mpls_tunnel_switch_t * info;
		} mpls_tunnel_switch_delete;
		struct {
			int unit;
		} mpls_tunnel_switch_delete_all;
		struct {
			int unit;
			bcm_mpls_tunnel_switch_t * info;
		} mpls_tunnel_switch_get;
		struct {
			int unit;
			bcm_mpls_tunnel_switch_traverse_cb cb;
			void * user_data;
		} mpls_tunnel_switch_traverse;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_mpls_vpn_t * vpn_info;
		} mpls_vpn_add;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_mpls_circuit_t * vc_info;
		} mpls_vpn_circuit_add;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_mpls_circuit_t * vc_info;
		} mpls_vpn_circuit_delete;
		struct {
			int unit;
			bcm_vpn_t vpn;
		} mpls_vpn_circuit_delete_all;
		struct {
			int unit;
			bcm_vpn_t vpn;
			int vc_array;
			bcm_mpls_circuit_t * vc_info;
			int * vc_count;
		} mpls_vpn_circuit_get;
		struct {
			int unit;
			bcm_vpn_t vpn;
			uint32 flags;
		} mpls_vpn_create;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_mpls_vpn_t * key;
		} mpls_vpn_delete;
		struct {
			int unit;
			bcm_vpn_t vpn;
		} mpls_vpn_delete_all;
		struct {
			int unit;
			bcm_vpn_t vpn;
		} mpls_vpn_destroy;
		struct {
			int unit;
			bcm_vpn_t vpn;
			int max_out;
			bcm_mpls_vpn_t * vpn_info;
			int * real_count;
		} mpls_vpn_get;
		struct {
			int unit;
			bcm_mpls_vpn_config_t * info;
		} mpls_vpn_id_create;
		struct {
			int unit;
			bcm_vpn_t vpn;
		} mpls_vpn_id_destroy;
		struct {
			int unit;
		} mpls_vpn_id_destroy_all;
		struct {
			int unit;
			bcm_vpn_t vpn;
			bcm_mpls_vpn_config_t * info;
		} mpls_vpn_id_get;
#endif	/* INCLUDE_L3 */
		struct {
			int unit;
			uint32 flags;
			bcm_multicast_t * group;
		} multicast_create;
		struct {
			int unit;
			bcm_multicast_t group;
		} multicast_destroy;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_if_t encap_id;
		} multicast_egress_add;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_if_t encap_id;
		} multicast_egress_delete;
		struct {
			int unit;
			bcm_multicast_t group;
		} multicast_egress_delete_all;
		struct {
			int unit;
			bcm_multicast_t group;
			int port_max;
			bcm_gport_t * port_array;
			bcm_if_t * encap_id_array;
			int * port_count;
		} multicast_egress_get;
		struct {
			int unit;
			bcm_multicast_t group;
			int port_count;
			bcm_gport_t * port_array;
			bcm_if_t * encap_id_array;
		} multicast_egress_set;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_vlan_t vlan;
			bcm_if_t * encap_id;
		} multicast_l2_encap_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_if_t intf;
			bcm_if_t * encap_id;
		} multicast_l3_encap_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_gport_t mim_port_id;
			bcm_if_t * encap_id;
		} multicast_mim_encap_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_gport_t subport;
			bcm_if_t * encap_id;
		} multicast_subport_encap_get;
		struct {
			int unit;
			bcm_multicast_t group;
			bcm_gport_t port;
			bcm_gport_t mpls_port_id;
			bcm_if_t * encap_id;
		} multicast_vpls_encap_get;
		struct {
			int unit;
			bcm_oam_ccm_t * ccm;
		} oam_ccm_endpoint_add;
		struct {
			int unit;
			bcm_oam_ccm_t * ccm;
		} oam_ccm_endpoint_delete;
		struct {
			int unit;
			bcm_oam_ccm_t * ccm;
		} oam_ccm_endpoint_delete_all;
		struct {
			int unit;
			bcm_oam_ccm_t * ccm;
		} oam_ccm_endpoint_get;
		struct {
			int unit;
			bcm_oam_ccm_timeout_cb_t fn;
		} oam_ccm_register;
		struct {
			int unit;
			uint32 flags;
			int start;
			int end;
			bcm_oam_ccm_traverse_cb_t cb;
			void * user_data;
		} oam_ccm_traverse;
		struct {
			int unit;
			bcm_oam_ccm_timeout_cb_t fn;
		} oam_ccm_unregister;
		struct {
			int unit;
		} oam_detach;
		struct {
			int unit;
		} oam_init;
		struct {
			int unit;
			int size;
			uint32 flags;
			bcm_pkt_t ** pkt_buf;
		} pkt_alloc;
		struct {
			int unit;
			int count;
			int size;
			uint32 flags;
			bcm_pkt_t *** packet_array;
		} pkt_blk_alloc;
		struct {
			int unit;
			bcm_pkt_t ** pkt;
			int count;
		} pkt_blk_free;
		struct {
			bcm_pkt_t * pkt;
			int n;
			int * len;
			int * blk_idx;
			uint8 ** location;
		} pkt_byte_index;
		struct {
			int unit;
			bcm_pkt_t * pkt;
			bcm_pkt_blk_t * blks;
			int blk_count;
			uint32 flags;
			bcm_pkt_t ** pkt_buf;
		} pkt_clear;
		struct {
			int unit;
			bcm_pkt_t * pkt;
			uint32 init_flags;
		} pkt_flags_init;
		struct {
			int unit;
			bcm_pkt_t * pkt;
			int alloc_bytes;
			int payload_len;
			uint32 flags;
		} pkt_flags_len_setup;
		struct {
			int unit;
			bcm_pkt_t * pkt;
		} pkt_free;
		struct {
			bcm_pkt_t * pkt;
			int dest_byte;
			uint8 * src;
			int len;
		} pkt_memcpy;
		struct {
			int unit;
			int len;
			bcm_pkt_t ** pkt_buf;
		} pkt_rx_alloc;
		struct {
			int unit;
			bcm_pkt_t * pkt;
		} pkt_rx_free;
		struct {
			int unit;
			bcm_policer_config_t * pol_cfg;
			bcm_policer_t * policer_id;
		} policer_create;
		struct {
			int unit;
			bcm_policer_t policer_id;
		} policer_destroy;
		struct {
			int unit;
		} policer_destroy_all;
		struct {
			int unit;
			bcm_policer_t policer_id;
			bcm_policer_config_t * pol_cfg;
		} policer_get;
		struct {
			int unit;
			bcm_policer_group_mode_t mode;
			bcm_policer_t * policer_id;
			int * npolicers;
		} policer_group_create;
		struct {
			int unit;
		} policer_init;
		struct {
			int unit;
			bcm_policer_t policer_id;
			bcm_policer_config_t * pol_cfg;
		} policer_set;
		struct {
			int unit;
			bcm_policer_t policer_id;
			int * enable;
		} policer_stat_enable_get;
		struct {
			int unit;
			bcm_policer_t policer_id;
			int enable;
		} policer_stat_enable_set;
		struct {
			int unit;
			bcm_policer_t policer_id;
			bcm_policer_stat_t stat;
			uint64 * value;
		} policer_stat_get;
		struct {
			int unit;
			bcm_policer_t policer_id;
			bcm_policer_stat_t stat;
			uint32 * value;
		} policer_stat_get32;
		struct {
			int unit;
			bcm_policer_t policer_id;
			bcm_policer_stat_t stat;
			uint64 value;
		} policer_stat_set;
		struct {
			int unit;
			bcm_policer_t policer_id;
			bcm_policer_stat_t stat;
			uint32 value;
		} policer_stat_set32;
		struct {
			int unit;
			bcm_policer_traverse_cb cb;
			void * user_data;
		} policer_traverse;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_ability_t * ability_mask;
		} port_ability_advert_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_ability_t * ability_mask;
		} port_ability_advert_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_abil_t * local_ability_mask;
		} port_ability_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_ability_t * local_ability_mask;
		} port_ability_local_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_ability_t * ability_mask;
		} port_ability_remote_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_abil_t * ability_mask;
		} port_advert_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_abil_t * ability_mask;
		} port_advert_remote_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_abil_t ability_mask;
		} port_advert_set;
		struct {
			int unit;
			bcm_port_t port;
			int * autoneg;
		} port_autoneg_get;
		struct {
			int unit;
			bcm_port_t port;
			int autoneg;
		} port_autoneg_set;
		struct {
			int unit;
			bcm_port_t port;
			int * enable;
		} port_bpdu_enable_get;
		struct {
			int unit;
			bcm_port_t port;
			int enable;
		} port_bpdu_enable_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_cable_diag_t * status;
		} port_cable_diag;
		struct {
			int unit;
			bcm_port_t port;
			int cfi;
			bcm_color_t * color;
		} port_cfi_color_get;
		struct {
			int unit;
			bcm_port_t port;
			int cfi;
			bcm_color_t color;
		} port_cfi_color_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_class_t pclass;
			uint32 * class_id;
		} port_class_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_class_t pclass;
			uint32 class_id;
		} port_class_set;
		struct {
			int unit;
		} port_clear;
		struct {
			int unit;
			bcm_port_config_t * config;
		} port_config_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_control_t type;
			int * value;
		} port_control_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_control_t type;
			int value;
		} port_control_set;
		struct {
			int unit;
			bcm_pbmp_t pbmp;
			bcm_pbmp_t * detached;
		} port_detach;
		struct {
			int unit;
			bcm_port_t port;
			int * mode;
		} port_discard_get;
		struct {
			int unit;
			bcm_port_t port;
			int mode;
		} port_discard_set;
		struct {
			int unit;
			bcm_port_t port;
			int srccp;
			int * mapcp;
			int * prio;
		} port_dscp_map_get;
		struct {
			int unit;
			bcm_port_t port;
			int * mode;
		} port_dscp_map_mode_get;
		struct {
			int unit;
			bcm_port_t port;
			int mode;
		} port_dscp_map_mode_set;
		struct {
			int unit;
			bcm_port_t port;
			int srccp;
			int mapcp;
			int prio;
		} port_dscp_map_set;
		struct {
			int unit;
			bcm_port_t port;
			int internal_pri;
			bcm_color_t color;
			int * pkt_dscp;
		} port_dscp_unmap_get;
		struct {
			int unit;
			bcm_port_t port;
			int internal_pri;
			bcm_color_t color;
			int pkt_dscp;
		} port_dscp_unmap_set;
		struct {
			int unit;
			bcm_port_t port;
			int * mode;
		} port_dtag_mode_get;
		struct {
			int unit;
			bcm_port_t port;
			int mode;
		} port_dtag_mode_set;
		struct {
			int unit;
			bcm_port_t port;
			int * duplex;
		} port_duplex_get;
		struct {
			int unit;
			bcm_port_t port;
			int duplex;
		} port_duplex_set;
		struct {
			int unit;
			bcm_port_t port;
			int modid;
			bcm_pbmp_t * pbmp;
		} port_egress_get;
		struct {
			int unit;
			bcm_port_t port;
			int modid;
			bcm_pbmp_t pbmp;
		} port_egress_set;
		struct {
			int unit;
			bcm_port_t port;
			int * enable;
		} port_enable_get;
		struct {
			int unit;
			bcm_port_t port;
			int enable;
		} port_enable_set;
		struct {
			int unit;
			bcm_port_t port;
			int * mode;
		} port_encap_get;
		struct {
			int unit;
			bcm_port_t port;
			int mode;
		} port_encap_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * flags;
		} port_fault_get;
		struct {
			int unit;
			bcm_port_t ingress_port;
			bcm_port_t egress_port;
			uint32 * flags;
		} port_flood_block_get;
		struct {
			int unit;
			bcm_port_t ingress_port;
			bcm_port_t egress_port;
			uint32 flags;
		} port_flood_block_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_t * egr_port;
			int * enabled;
		} port_force_forward_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_t egr_port;
			int enable;
		} port_force_forward_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t * vlan;
			int * pkt_prio;
			uint32 * flags;
		} port_force_vlan_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vlan;
			int pkt_prio;
			uint32 flags;
		} port_force_vlan_set;
		struct {
			int unit;
			bcm_port_t port;
			int * size;
		} port_frame_max_get;
		struct {
			int unit;
			bcm_port_t port;
			int size;
		} port_frame_max_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_gport_t * gport;
		} port_gport_get;
		struct {
			int unit;
			bcm_port_t port;
			int speed;
			bcm_port_duplex_t duplex;
			int * bit_times;
		} port_ifg_get;
		struct {
			int unit;
			bcm_port_t port;
			int speed;
			bcm_port_duplex_t duplex;
			int bit_times;
		} port_ifg_set;
		struct {
			int unit;
			bcm_port_t port;
			int * mode;
		} port_ifilter_get;
		struct {
			int unit;
			bcm_port_t port;
			int mode;
		} port_ifilter_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_info_t * info;
		} port_info_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_info_t * info;
		} port_info_restore;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_info_t * info;
		} port_info_save;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_info_t * info;
		} port_info_set;
		struct {
			int unit;
		} port_init;
		struct {
			int unit;
			bcm_port_t port;
			uint16 * tpid;
		} port_inner_tpid_get;
		struct {
			int unit;
			bcm_port_t port;
			uint16 tpid;
		} port_inner_tpid_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_if_t * intf;
		} port_interface_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_if_t intf;
		} port_interface_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * flags;
		} port_ipmc_modify_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
		} port_ipmc_modify_set;
		struct {
			int unit;
			bcm_port_t port;
			int * enable;
		} port_jam_get;
		struct {
			int unit;
			bcm_port_t port;
			int enable;
		} port_jam_set;
		struct {
			int unit;
			bcm_port_t port;
			int * enable;
		} port_l3_enable_get;
		struct {
			int unit;
			bcm_port_t port;
			int enable;
		} port_l3_enable_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * flags;
		} port_l3_modify_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
		} port_l3_modify_set;
		struct {
			int unit;
			bcm_port_t port;
			int * size;
		} port_l3_mtu_get;
		struct {
			int unit;
			bcm_port_t port;
			int size;
		} port_l3_mtu_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * flags;
		} port_learn_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 add;
			uint32 remove;
		} port_learn_modify;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
		} port_learn_set;
		struct {
			int unit;
			bcm_port_t port;
			int * up;
		} port_link_status_get;
		struct {
			int unit;
			bcm_port_t port;
			int * linkscan;
		} port_linkscan_get;
		struct {
			int unit;
			bcm_port_t port;
			int linkscan;
		} port_linkscan_set;
		struct {
			int unit;
			bcm_port_t port;
			int * loopback;
		} port_loopback_get;
		struct {
			int unit;
			bcm_port_t port;
			int loopback;
		} port_loopback_set;
		struct {
			int unit;
			bcm_port_t port;
			int * ms;
		} port_master_get;
		struct {
			int unit;
			bcm_port_t port;
			int ms;
		} port_master_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_mdix_t * mode;
		} port_mdix_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_mdix_t mode;
		} port_mdix_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_mdix_status_t * status;
		} port_mdix_status_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_medium_t medium;
			bcm_phy_config_t * config;
		} port_medium_config_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_medium_t medium;
			bcm_phy_config_t * config;
		} port_medium_config_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_medium_t * medium;
		} port_medium_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_medium_status_cb_t callback;
			void * user_data;
		} port_medium_status_register;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_medium_status_cb_t callback;
			void * user_data;
		} port_medium_status_unregister;
		struct {
			int unit;
			bcm_port_t port;
			bcm_module_t modid;
			bcm_pbmp_t * pbmp;
		} port_modid_egress_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_module_t modid;
			bcm_pbmp_t pbmp;
		} port_modid_egress_set;
		struct {
			int unit;
			bcm_port_t port;
			int modid;
			int * enable;
		} port_modid_enable_get;
		struct {
			int unit;
			bcm_port_t port;
			int modid;
			int enable;
		} port_modid_enable_set;
		struct {
			int unit;
			bcm_port_t port;
			uint8 * mac;
		} port_pause_addr_get;
		struct {
			int unit;
			bcm_port_t port;
			uint8 * mac;
		} port_pause_addr_set;
		struct {
			int unit;
			bcm_port_t port;
			int * pause_tx;
			int * pause_rx;
		} port_pause_get;
		struct {
			int unit;
			bcm_port_t port;
			int pause_tx;
			int pause_rx;
		} port_pause_set;
		struct {
			int unit;
			bcm_port_t port;
			int * pause;
		} port_pause_sym_get;
		struct {
			int unit;
			bcm_port_t port;
			int pause;
		} port_pause_sym_set;
		struct {
			int unit;
			bcm_port_t port;
			int * mode;
		} port_pfm_get;
		struct {
			int unit;
			bcm_port_t port;
			int mode;
		} port_pfm_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_phy_control_t type;
			uint32 * value;
		} port_phy_control_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_phy_control_t type;
			uint32 value;
		} port_phy_control_set;
		struct {
			int unit;
			bcm_port_t port;
			char * name;
			int len;
		} port_phy_drv_name_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			uint32 phy_reg_addr;
			uint32 * phy_data;
		} port_phy_get;
		struct {
			int unit;
			bcm_port_t port;
		} port_phy_reset;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_phy_reset_cb_t callback;
			void * user_data;
		} port_phy_reset_register;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_phy_reset_cb_t callback;
			void * user_data;
		} port_phy_reset_unregister;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
			uint32 phy_reg_addr;
			uint32 phy_data;
		} port_phy_set;
		struct {
			int unit;
			bcm_port_t port;
			int prio;
			bcm_color_t * color;
		} port_priority_color_get;
		struct {
			int unit;
			bcm_port_t port;
			int prio;
			bcm_color_t color;
		} port_priority_color_set;
		struct {
			int unit;
			bcm_pbmp_t pbmp;
			bcm_pbmp_t * okay_pbmp;
		} port_probe;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_frametype_t frame;
			bcm_port_ethertype_t ether;
			bcm_vlan_t vid;
		} port_protocol_vlan_add;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_frametype_t frame;
			bcm_port_ethertype_t ether;
		} port_protocol_vlan_delete;
		struct {
			int unit;
			bcm_port_t port;
		} port_protocol_vlan_delete_all;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * count;
		} port_queued_count_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * kbits_sec;
			uint32 * kbits_burst;
		} port_rate_egress_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 kbits_sec;
			uint32 kbits_burst;
		} port_rate_egress_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * traffic_types;
			uint32 * kbits_sec;
			uint32 * kbits_burst;
		} port_rate_egress_traffic_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 traffic_types;
			uint32 kbits_sec;
			uint32 kbits_burst;
		} port_rate_egress_traffic_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * kbits_sec;
			uint32 * kbits_burst;
		} port_rate_ingress_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 kbits_sec;
			uint32 kbits_burst;
		} port_rate_ingress_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * kbits_pause;
			uint32 * kbits_resume;
		} port_rate_pause_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 kbits_pause;
			uint32 kbits_resume;
		} port_rate_pause_set;
		struct {
			int unit;
			bcm_port_t port;
			int * ingress_rate;
			int * egress_rate;
		} port_sample_rate_get;
		struct {
			int unit;
			bcm_port_t port;
			int ingress_rate;
			int egress_rate;
		} port_sample_rate_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_info_t * info;
		} port_selective_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_info_t * info;
		} port_selective_set;
		struct {
			int unit;
			bcm_port_t port;
			int * speed;
		} port_speed_get;
		struct {
			int unit;
			bcm_port_t port;
			int * speed;
		} port_speed_max;
		struct {
			int unit;
			bcm_port_t port;
			int speed;
		} port_speed_set;
		struct {
			int unit;
			bcm_port_t port;
			int * state;
		} port_stp_get;
		struct {
			int unit;
			bcm_port_t port;
			int state;
		} port_stp_set;
		struct {
			int unit;
			bcm_port_t port;
			int * tgid;
			int * psc;
		} port_tgid_get;
		struct {
			int unit;
			bcm_port_t port;
			int tgid;
			int psc;
		} port_tgid_set;
		struct {
			int unit;
			bcm_port_t port;
			uint16 tpid;
			int color_select;
		} port_tpid_add;
		struct {
			int unit;
			bcm_port_t port;
			uint16 tpid;
		} port_tpid_delete;
		struct {
			int unit;
			bcm_port_t port;
		} port_tpid_delete_all;
		struct {
			int unit;
			bcm_port_t port;
			uint16 * tpid;
		} port_tpid_get;
		struct {
			int unit;
			bcm_port_t port;
			uint16 tpid;
		} port_tpid_set;
		struct {
			int unit;
			bcm_port_t port;
			int * port_index;
		} port_trunk_index_get;
		struct {
			int unit;
			bcm_port_t port;
			int port_index;
		} port_trunk_index_set;
		struct {
			int unit;
			bcm_port_t port;
			int * priority;
		} port_untagged_priority_get;
		struct {
			int unit;
			bcm_port_t port;
			int priority;
		} port_untagged_priority_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t * vid_ptr;
		} port_untagged_vlan_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vid;
		} port_untagged_vlan_set;
		struct {
			int unit;
			bcm_port_t port;
			int link;
		} port_update;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vlan;
			int dscp;
			int * internal_pri;
			bcm_color_t * color;
		} port_vlan_dscp_map_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vlan;
			int dscp;
			int internal_pri;
			bcm_color_t color;
		} port_vlan_dscp_map_set;
		struct {
			int unit;
			bcm_port_t port;
			uint16 * inner_tag;
		} port_vlan_inner_tag_get;
		struct {
			int unit;
			bcm_port_t port;
			uint16 inner_tag;
		} port_vlan_inner_tag_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * flags;
		} port_vlan_member_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
		} port_vlan_member_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vlan;
			int pkt_pri;
			int cfi;
			int * internal_pri;
			bcm_color_t * color;
		} port_vlan_pri_map_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_t vlan;
			int pkt_pri;
			int cfi;
			int internal_pri;
			bcm_color_t color;
		} port_vlan_pri_map_set;
		struct {
			int unit;
			bcm_port_t port;
			int pkt_pri;
			int cfi;
			int * internal_pri;
			bcm_color_t * color;
		} port_vlan_priority_map_get;
		struct {
			int unit;
			bcm_port_t port;
			int pkt_pri;
			int cfi;
			int internal_pri;
			bcm_color_t color;
		} port_vlan_priority_map_set;
		struct {
			int unit;
			bcm_port_t port;
			int internal_pri;
			bcm_color_t color;
			int * pkt_pri;
			int * cfi;
		} port_vlan_priority_unmap_get;
		struct {
			int unit;
			bcm_port_t port;
			int internal_pri;
			bcm_color_t color;
			int pkt_pri;
			int cfi;
		} port_vlan_priority_unmap_set;
#ifdef	INCLUDE_L3
		struct {
			int unit;
			bcm_port_t client_port;
			bcm_proxy_proto_type_t proto_type;
			bcm_module_t server_modid;
			bcm_port_t server_port;
			int enable;
		} proxy_client_set;
		struct {
			int unit;
			bcm_port_t server_port;
			bcm_proxy_mode_t mode;
			int * enable;
		} proxy_server_get;
		struct {
			int unit;
			bcm_port_t server_port;
			bcm_proxy_mode_t mode;
			int enable;
		} proxy_server_set;
#endif	/* INCLUDE_L3 */
		struct {
			int unit;
			bcm_port_t port;
			int flags;
			uint32 * kbits_sec;
			uint32 * kbits_burst;
		} rate_bandwidth_get;
		struct {
			int unit;
			bcm_port_t port;
			int flags;
			uint32 kbits_sec;
			uint32 kbits_burst;
		} rate_bandwidth_set;
		struct {
			int unit;
			int * pps;
			int * flags;
			int port;
		} rate_bcast_get;
		struct {
			int unit;
			int pps;
			int flags;
			int port;
		} rate_bcast_set;
		struct {
			int unit;
			int * pps;
			int * flags;
			int port;
		} rate_dlfbc_get;
		struct {
			int unit;
			int pps;
			int flags;
			int port;
		} rate_dlfbc_set;
		struct {
			int unit;
			int * pps;
			int * flags;
		} rate_get;
		struct {
			int unit;
			int * pps;
			int * flags;
			int port;
		} rate_mcast_get;
		struct {
			int unit;
			int pps;
			int flags;
			int port;
		} rate_mcast_set;
		struct {
			int unit;
			int pps;
			int flags;
		} rate_set;
		struct {
			int unit;
			bcm_rate_limit_t * rl;
		} rate_type_get;
		struct {
			int unit;
			bcm_rate_limit_t * rl;
		} rate_type_set;
		struct {
			int unit;
		} rx_active;
		struct {
			int unit;
			int pkt_size;
			uint32 flags;
			void ** buf;
		} rx_alloc;
		struct {
			int unit;
			int * burst;
		} rx_burst_get;
		struct {
			int unit;
			int burst;
		} rx_burst_set;
		struct {
			int unit;
			bcm_rx_cfg_t * cfg;
		} rx_cfg_get;
		struct {
			int unit;
		} rx_cfg_init;
		struct {
			int unit;
			uint32 * channels;
		} rx_channels_running;
		struct {
			int unit;
		} rx_clear;
		struct {
			int unit;
			int cos;
			int * burst;
		} rx_cos_burst_get;
		struct {
			int unit;
			int cos;
			int burst;
		} rx_cos_burst_set;
		struct {
			int unit;
			int cos;
			int * max_q_len;
		} rx_cos_max_len_get;
		struct {
			int unit;
			int cos;
			int max_q_len;
		} rx_cos_max_len_set;
		struct {
			int unit;
			int cos;
			int * pps;
		} rx_cos_rate_get;
		struct {
			int unit;
			int cos;
			int pps;
		} rx_cos_rate_set;
		struct {
			int unit;
			int index;
		} rx_cosq_mapping_delete;
		struct {
			int unit;
			int index;
			bcm_rx_reasons_t * reasons;
			bcm_rx_reasons_t * reasons_mask;
			uint8 * int_prio;
			uint8 * int_prio_mask;
			uint32 * packet_type;
			uint32 * packet_type_mask;
			bcm_cos_queue_t * cosq;
		} rx_cosq_mapping_get;
		struct {
			int unit;
			bcm_rx_reasons_t * reasons;
		} rx_cosq_mapping_reasons_get;
		struct {
			int unit;
			int index;
			bcm_rx_reasons_t reasons;
			bcm_rx_reasons_t reasons_mask;
			uint8 int_prio;
			uint8 int_prio_mask;
			uint32 packet_type;
			uint32 packet_type_mask;
			bcm_cos_queue_t cosq;
		} rx_cosq_mapping_set;
		struct {
			int unit;
			int * size;
		} rx_cosq_mapping_size_get;
		struct {
			int unit;
			int * pps;
		} rx_cpu_rate_get;
		struct {
			int unit;
			int pps;
		} rx_cpu_rate_set;
		struct {
			int unit;
			void * pkt_data;
		} rx_free;
		struct {
			int unit;
			void * pkt_data;
		} rx_free_enqueue;
		struct {
			int unit;
		} rx_init;
		struct {
			int unit;
			int size;
			uint32 flags;
			void ** pool;
		} rx_pool_alloc;
		struct {
			int unit;
			void * buf;
		} rx_pool_free;
		struct {
			int pkt_count;
			int bytes_per_pkt;
		} rx_pool_setup;
		struct {
			int unit;
			bcm_cos_queue_t queue_id;
			bcm_rx_chan_t * chan_id;
		} rx_queue_channel_get;
		struct {
			int unit;
			bcm_cos_queue_t queue_id;
			bcm_rx_chan_t chan_id;
		} rx_queue_channel_set;
		struct {
			int unit;
			bcm_cos_queue_t * cosq;
		} rx_queue_max_get;
		struct {
			int unit;
			bcm_cos_queue_t cosq;
			int * packet_count;
		} rx_queue_packet_count_get;
		struct {
			int unit;
			bcm_cos_queue_t cosq;
			int * packet_tokens;
		} rx_queue_rate_limit_status_get;
		struct {
			int unit;
			char * name;
			bcm_cos_queue_t cosq;
			bcm_rx_cb_f callback;
			uint8 priority;
			void * cookie;
			uint32 flags;
		} rx_queue_register;
		struct {
			int unit;
			bcm_cos_queue_t cosq;
			bcm_rx_cb_f callback;
			uint8 priority;
		} rx_queue_unregister;
		struct {
			int unit;
			int * pps;
		} rx_rate_get;
		struct {
			int unit;
			int pps;
		} rx_rate_set;
		struct {
			int unit;
			bcm_rx_reasons_t * reasons;
		} rx_reasons_get;
		struct {
			int unit;
			bcm_rx_reasons_t rx_reasons;
			bcm_policer_t polid;
		} rx_reasons_policer_set;
		struct {
			int unit;
			char * name;
			bcm_rx_cb_f callback;
			uint8 priority;
			void * cookie;
			uint32 flags;
		} rx_register;
#ifdef	BCM_RPC_SUPPORT
		struct {
			int len;
			bcm_pkt_t ** pkt;
		} rx_remote_pkt_alloc;
#endif	/* BCM_RPC_SUPPORT */
		struct {
			int unit;
			bcm_pkt_t * pkt;
		} rx_remote_pkt_enqueue;
#ifdef	BCM_RPC_SUPPORT
		struct {
			bcm_pkt_t * pkt;
		} rx_remote_pkt_free;
#endif	/* BCM_RPC_SUPPORT */
		struct {
			int unit;
			bcm_rx_sched_cb sched_cb;
		} rx_sched_register;
		struct {
			int unit;
		} rx_sched_unregister;
#ifdef	BROADCOM_DEBUG
		struct {
			int unit;
		} rx_show;
#endif	/* BROADCOM_DEBUG */
		struct {
			int unit;
			bcm_rx_cfg_t * cfg;
		} rx_start;
		struct {
			int unit;
			bcm_rx_cfg_t * cfg;
		} rx_stop;
		struct {
			int unit;
			int * next_unit;
		} rx_unit_next_get;
		struct {
			int unit;
			bcm_rx_cb_f callback;
			uint8 priority;
		} rx_unregister;
		struct {
			int unit;
			bcm_port_t port;
		} stat_clear;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t type;
			bcm_custom_stat_trigger_t trigger;
		} stat_custom_add;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t type;
			bcm_custom_stat_trigger_t trigger;
			int * result;
		} stat_custom_check;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t type;
			bcm_custom_stat_trigger_t trigger;
		} stat_custom_delete;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t type;
		} stat_custom_delete_all;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t type;
			uint32 * flags;
		} stat_custom_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t type;
			uint32 flags;
		} stat_custom_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t type;
			uint64 * value;
		} stat_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_stat_val_t type;
			uint32 * value;
		} stat_get32;
		struct {
			int unit;
		} stat_init;
		struct {
			int unit;
		} stat_sync;
		struct {
			int unit;
		} stg_clear;
		struct {
			int unit;
			int * max_stg;
		} stg_count_get;
		struct {
			int unit;
			bcm_stg_t * stg_ptr;
		} stg_create;
		struct {
			int unit;
			bcm_stg_t stg;
		} stg_create_id;
		struct {
			int unit;
			bcm_stg_t * stg_ptr;
		} stg_default_get;
		struct {
			int unit;
			bcm_stg_t stg;
		} stg_default_set;
		struct {
			int unit;
			bcm_stg_t stg;
		} stg_destroy;
		struct {
			int unit;
		} stg_init;
		struct {
			int unit;
			bcm_stg_t ** list;
			int * count;
		} stg_list;
		struct {
			int unit;
			bcm_stg_t * list;
			int count;
		} stg_list_destroy;
		struct {
			int unit;
			bcm_stg_t stg;
			bcm_port_t port;
			int * stp_state;
		} stg_stp_get;
		struct {
			int unit;
			bcm_stg_t stg;
			bcm_port_t port;
			int stp_state;
		} stg_stp_set;
		struct {
			int unit;
			bcm_stg_t stg;
			bcm_vlan_t vid;
		} stg_vlan_add;
		struct {
			int unit;
			bcm_stg_t stg;
			bcm_vlan_t ** list;
			int * count;
		} stg_vlan_list;
		struct {
			int unit;
			bcm_vlan_t * list;
			int count;
		} stg_vlan_list_destroy;
		struct {
			int unit;
			bcm_stg_t stg;
			bcm_vlan_t vid;
		} stg_vlan_remove;
		struct {
			int unit;
			bcm_stg_t stg;
		} stg_vlan_remove_all;
		struct {
			int unit;
			bcm_gport_t switch_port;
			bcm_gport_t * fabric_port;
		} stk_fabric_map_get;
		struct {
			int unit;
			bcm_gport_t switch_port;
			bcm_gport_t fabric_port;
		} stk_fabric_map_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_module_t * fmod;
			bcm_module_t * lmod;
		} stk_fmod_lmod_mapping_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_module_t fmod;
			bcm_module_t lmod;
		} stk_fmod_lmod_mapping_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_module_t fmod;
			bcm_module_t * smod;
			bcm_port_t * sport;
			uint32 * nports;
		} stk_fmod_smod_mapping_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_module_t fmod;
			bcm_module_t smod;
			bcm_port_t sport;
			uint32 nports;
		} stk_fmod_smod_mapping_set;
		struct {
			int unit;
		} stk_init;
		struct {
			int unit;
			uint32 * flags;
		} stk_mode_get;
		struct {
			int unit;
			uint32 flags;
		} stk_mode_set;
		struct {
			int unit;
			int * num_modid;
		} stk_modid_count;
		struct {
			int unit;
			int * modid;
		} stk_modid_get;
		struct {
			int unit;
			int modid;
		} stk_modid_set;
		struct {
			int unit;
			bcm_port_t port;
			int * enable;
		} stk_modmap_enable_get;
		struct {
			int unit;
			bcm_port_t port;
			int enable;
		} stk_modmap_enable_set;
		struct {
			int unit;
			int setget;
			bcm_module_t mod_in;
			bcm_port_t port_in;
			bcm_module_t * mod_out;
			bcm_port_t * port_out;
		} stk_modmap_map;
		struct {
			int unit;
			bcm_stk_modmap_cb_t func;
		} stk_modmap_register;
		struct {
			int unit;
		} stk_modmap_unregister;
		struct {
			int unit;
			int modid;
			bcm_port_t port;
		} stk_modport_add;
		struct {
			int unit;
			int modid;
		} stk_modport_clear;
		struct {
			int unit;
		} stk_modport_clear_all;
		struct {
			int unit;
			int modid;
			bcm_port_t port;
		} stk_modport_delete;
		struct {
			int unit;
			int modid;
			int * port;
		} stk_modport_get;
		struct {
			int unit;
			int modid;
			int port;
		} stk_modport_set;
		struct {
			int unit;
			bcm_module_t modid;
			int nports;
			int enable;
		} stk_module_enable;
		struct {
			int unit;
			bcm_module_t modid;
			bcm_module_protocol_t * protocol;
		} stk_module_protocol_get;
		struct {
			int unit;
			bcm_module_t modid;
			bcm_module_protocol_t protocol;
		} stk_module_protocol_set;
		struct {
			int unit;
			int * my_modid;
		} stk_my_modid_get;
		struct {
			int unit;
			int my_modid;
		} stk_my_modid_set;
		struct {
			int unit;
			bcm_pbmp_t * cur_pbm;
			bcm_pbmp_t * inactive_pbm;
		} stk_pbmp_get;
		struct {
			int unit;
			bcm_port_t port;
			uint32 * flags;
		} stk_port_get;
		struct {
			int unit;
			bcm_port_t port;
			int * group;
		} stk_port_modmap_group_get;
		struct {
			int unit;
			int * max_group;
		} stk_port_modmap_group_max_get;
		struct {
			int unit;
			bcm_port_t port;
			int group;
		} stk_port_modmap_group_set;
		struct {
			int unit;
			bcm_port_t port;
			uint32 flags;
		} stk_port_set;
		struct {
			int unit;
			int * count;
		} stk_sl_simplex_count_get;
		struct {
			int unit;
			int count;
		} stk_sl_simplex_count_set;
		struct {
			int unit;
			bcm_port_t port;
			int modid;
			bcm_pbmp_t pbmp;
		} stk_ucbitmap_del;
		struct {
			int unit;
			int port;
			int modid;
			bcm_pbmp_t * pbmp;
		} stk_ucbitmap_get;
		struct {
			int unit;
			int port;
			int modid;
			bcm_pbmp_t pbmp;
		} stk_ucbitmap_set;
		struct {
			int unit;
			bcm_stk_cb_f cb;
			void * cookie;
		} stk_update_callback_register;
		struct {
			int unit;
			bcm_stk_cb_f cb;
			void * cookie;
		} stk_update_callback_unregister;
		struct {
			int unit;
		} subport_cleanup;
		struct {
			int unit;
			bcm_subport_group_config_t * config;
			bcm_gport_t * group;
		} subport_group_create;
		struct {
			int unit;
			bcm_gport_t group;
		} subport_group_destroy;
		struct {
			int unit;
			bcm_gport_t group;
			bcm_subport_group_config_t * config;
		} subport_group_get;
		struct {
			int unit;
		} subport_init;
		struct {
			int unit;
			bcm_subport_config_t * config;
			bcm_gport_t * port;
		} subport_port_add;
		struct {
			int unit;
			bcm_gport_t port;
		} subport_port_delete;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_subport_config_t * config;
		} subport_port_get;
		struct {
			int unit;
			bcm_subport_port_traverse_cb cb;
			void * user_data;
		} subport_port_traverse;
		struct {
			int unit;
			bcm_switch_control_t type;
			int * arg;
		} switch_control_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_switch_control_t type;
			int * arg;
		} switch_control_port_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_switch_control_t type;
			int arg;
		} switch_control_port_set;
		struct {
			int unit;
			bcm_switch_control_t type;
			int arg;
		} switch_control_set;
		struct {
			int unit;
			int dest_modid;
			bcm_port_t * exit_port;
		} topo_port_get;
		struct {
			int unit;
			bcm_pbmp_t * pbmp_ptr;
		} trunk_bitmap_expand;
		struct {
			int unit;
			bcm_trunk_chip_info_t * ta_info;
		} trunk_chip_info_get;
		struct {
			int unit;
			bcm_trunk_t * tid;
		} trunk_create;
		struct {
			int unit;
			bcm_trunk_t tid;
		} trunk_create_id;
		struct {
			int unit;
			bcm_trunk_t tid;
		} trunk_destroy;
		struct {
			int unit;
		} trunk_detach;
		struct {
			int unit;
			bcm_trunk_t tid;
			bcm_pbmp_t * pbmp;
		} trunk_egress_get;
		struct {
			int unit;
			bcm_trunk_t tid;
			bcm_pbmp_t pbmp;
		} trunk_egress_set;
		struct {
			int unit;
			bcm_module_t modid;
			bcm_port_t port;
			bcm_trunk_t * tid;
		} trunk_find;
		struct {
			int unit;
			bcm_trunk_t tid;
			bcm_trunk_add_info_t * t_data;
		} trunk_get;
		struct {
			int unit;
		} trunk_init;
		struct {
			int unit;
			bcm_trunk_t tid;
			bcm_vlan_t vid;
			uint8 * mac;
		} trunk_mcast_join;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trunk_t tid;
			int idx;
			int * enable;
		} trunk_override_ipmc_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trunk_t tid;
			int idx;
			int enable;
		} trunk_override_ipmc_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trunk_t tid;
			int idx;
			int * enable;
		} trunk_override_mcast_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trunk_t tid;
			int idx;
			int enable;
		} trunk_override_mcast_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trunk_t tid;
			int modid;
			int * enable;
		} trunk_override_ucast_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trunk_t tid;
			int modid;
			int enable;
		} trunk_override_ucast_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trunk_t tid;
			bcm_vlan_t vid;
			int * enable;
		} trunk_override_vlan_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trunk_t tid;
			bcm_vlan_t vid;
			int enable;
		} trunk_override_vlan_set;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trunk_t tid;
			int * size;
			int * weights;
		} trunk_pool_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_trunk_t tid;
			int size;
			int * weights;
		} trunk_pool_set;
		struct {
			int unit;
			bcm_trunk_t tid;
			int * psc;
		} trunk_psc_get;
		struct {
			int unit;
			bcm_trunk_t tid;
			int psc;
		} trunk_psc_set;
		struct {
			int unit;
			bcm_trunk_t tid;
			bcm_trunk_add_info_t * add_info;
		} trunk_set;
#ifdef	INCLUDE_L3
		struct {
			int unit;
			bcm_tunnel_config_t * tconfig;
		} tunnel_config_get;
		struct {
			int unit;
			bcm_tunnel_config_t * tconfig;
		} tunnel_config_set;
		struct {
			int unit;
			uint32 flags;
			int * dscp_map_id;
		} tunnel_dscp_map_create;
		struct {
			int unit;
			int dscp_map_id;
		} tunnel_dscp_map_destroy;
		struct {
			int unit;
			int dscp_map_id;
			bcm_tunnel_dscp_map_t * dscp_map;
		} tunnel_dscp_map_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_tunnel_dscp_map_t * dscp_map;
		} tunnel_dscp_map_port_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_tunnel_dscp_map_t * dscp_map;
		} tunnel_dscp_map_port_set;
		struct {
			int unit;
			int dscp_map_id;
			bcm_tunnel_dscp_map_t * dscp_map;
		} tunnel_dscp_map_set;
		struct {
			int unit;
			bcm_l3_intf_t * intf;
		} tunnel_initiator_clear;
		struct {
			int unit;
			bcm_l3_intf_t * intf;
			bcm_tunnel_initiator_t * tunnel;
		} tunnel_initiator_get;
		struct {
			int unit;
			bcm_l3_intf_t * intf;
			bcm_tunnel_initiator_t * tunnel;
		} tunnel_initiator_set;
		struct {
			int unit;
			bcm_tunnel_terminator_t * info;
		} tunnel_terminator_add;
		struct {
			int unit;
			bcm_tunnel_terminator_t * info;
		} tunnel_terminator_delete;
		struct {
			int unit;
			bcm_tunnel_terminator_t * info;
		} tunnel_terminator_get;
		struct {
			int unit;
			bcm_tunnel_terminator_t * info;
		} tunnel_terminator_update;
#endif	/* INCLUDE_L3 */
		struct {
			int unit;
			bcm_pkt_t * tx_pkt;
			void * cookie;
		} tx;
		struct {
			int unit;
			bcm_pkt_t ** pkt;
			int count;
			bcm_pkt_cb_f all_done_cb;
			void * cookie;
		} tx_array;
#ifdef	BCM_RPC_SUPPORT
		struct {
			bcm_pkt_t * pkt;
			int dest_unit;
			int remote_port;
			uint32 flags;
			bcm_cpu_tunnel_mode_t mode;
		} tx_cpu_tunnel;
		struct {
			bcm_tx_cpu_tunnel_f * f;
		} tx_cpu_tunnel_get;
		struct {
			bcm_tx_cpu_tunnel_f f;
		} tx_cpu_tunnel_set;
#endif	/* BCM_RPC_SUPPORT */
#ifdef	BROADCOM_DEBUG
		struct {
			int unit;
			void * dv_p;
		} tx_dv_dump;
#endif	/* BROADCOM_DEBUG */
		struct {
			int unit;
		} tx_init;
		struct {
			int unit;
			bcm_pkt_t * pkt;
			bcm_pkt_cb_f all_done_cb;
			void * cookie;
		} tx_list;
		struct {
			int unit;
			bcm_pkt_t * pkt;
			uint8 * dest_mac;
			int vid;
		} tx_pkt_l2_map;
		struct {
			int unit;
			bcm_pkt_t * tx_pkt;
		} tx_pkt_setup;
#ifdef	BROADCOM_DEBUG
		struct {
			int unit;
		} tx_show;
#endif	/* BROADCOM_DEBUG */
		struct {
			int unit;
			bcm_vlan_control_t type;
			int * arg;
		} vlan_control_get;
		struct {
			int unit;
			int port;
			bcm_vlan_control_port_t type;
			int * arg;
		} vlan_control_port_get;
		struct {
			int unit;
			int port;
			bcm_vlan_control_port_t type;
			int arg;
		} vlan_control_port_set;
		struct {
			int unit;
			bcm_vlan_control_t type;
			int arg;
		} vlan_control_set;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_vlan_control_vlan_t * control;
		} vlan_control_vlan_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_vlan_control_vlan_t control;
		} vlan_control_vlan_set;
		struct {
			int unit;
			bcm_vlan_t vid;
		} vlan_create;
		struct {
			int unit;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_gport_t port_1;
			bcm_gport_t port_2;
		} vlan_cross_connect_add;
		struct {
			int unit;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
		} vlan_cross_connect_delete;
		struct {
			int unit;
		} vlan_cross_connect_delete_all;
		struct {
			int unit;
			bcm_vlan_cross_connect_traverse_cb cb;
			void * user_data;
		} vlan_cross_connect_traverse;
		struct {
			int unit;
			bcm_vlan_t * vid_ptr;
		} vlan_default_get;
		struct {
			int unit;
			bcm_vlan_t vid;
		} vlan_default_set;
		struct {
			int unit;
			bcm_vlan_t vid;
		} vlan_destroy;
		struct {
			int unit;
		} vlan_destroy_all;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid;
			bcm_vlan_t new_vid;
			int prio;
		} vlan_dtag_add;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid;
		} vlan_dtag_delete;
		struct {
			int unit;
		} vlan_dtag_delete_all;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid;
			bcm_vlan_t * new_vid;
			int * prio;
		} vlan_dtag_get;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid_low;
			bcm_vlan_t old_vid_high;
			bcm_vlan_t new_vid;
			int int_prio;
		} vlan_dtag_range_add;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid_low;
			bcm_vlan_t old_vid_high;
		} vlan_dtag_range_delete;
		struct {
			int unit;
		} vlan_dtag_range_delete_all;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid_low;
			bcm_vlan_t old_vid_high;
			bcm_vlan_t * new_vid;
			int * prio;
		} vlan_dtag_range_get;
		struct {
			int unit;
			bcm_vlan_dtag_range_traverse_cb cb;
			void * user_data;
		} vlan_dtag_range_traverse;
		struct {
			int unit;
			bcm_vlan_dtag_traverse_cb cb;
			void * user_data;
		} vlan_dtag_traverse;
		struct {
			int unit;
		} vlan_init;
		struct {
			int unit;
			bcm_ip_t ipaddr;
			bcm_ip_t netmask;
			bcm_vlan_t vid;
			int prio;
		} vlan_ip4_add;
		struct {
			int unit;
			bcm_ip_t ipaddr;
			bcm_ip_t netmask;
		} vlan_ip4_delete;
		struct {
			int unit;
		} vlan_ip4_delete_all;
		struct {
			int unit;
			bcm_vlan_ip_t * vlan_ip;
			bcm_vlan_action_set_t * action;
		} vlan_ip_action_add;
		struct {
			int unit;
			bcm_vlan_ip_t * vlan_ip;
		} vlan_ip_add;
		struct {
			int unit;
			bcm_vlan_ip_t * vlan_ip;
		} vlan_ip_delete;
		struct {
			int unit;
		} vlan_ip_delete_all;
		struct {
			int unit;
			bcm_vlan_data_t ** listp;
			int * countp;
		} vlan_list;
		struct {
			int unit;
			bcm_pbmp_t ports;
			bcm_vlan_data_t ** listp;
			int * countp;
		} vlan_list_by_pbmp;
		struct {
			int unit;
			bcm_vlan_data_t * list;
			int count;
		} vlan_list_destroy;
		struct {
			int unit;
			uint8 * mac;
			bcm_vlan_action_set_t * action;
		} vlan_mac_action_add;
		struct {
			int unit;
			uint8 * mac;
			bcm_vlan_t vid;
			int prio;
		} vlan_mac_add;
		struct {
			int unit;
			uint8 * mac;
		} vlan_mac_delete;
		struct {
			int unit;
		} vlan_mac_delete_all;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_vlan_mcast_flood_t * mode;
		} vlan_mcast_flood_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_vlan_mcast_flood_t mode;
		} vlan_mcast_flood_set;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_policer_t * policer_id;
		} vlan_policer_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_policer_t policer_id;
		} vlan_policer_set;
		struct {
			int unit;
			bcm_vlan_t vid;
			bcm_pbmp_t pbmp;
			bcm_pbmp_t ubmp;
		} vlan_port_add;
		struct {
			int unit;
			uint32 flags;
			bcm_vlan_port_t vlan_port;
			bcm_gport_t * gport;
		} vlan_port_create;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_action_set_t * action;
		} vlan_port_default_action_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_action_set_t * action;
		} vlan_port_default_action_set;
		struct {
			int unit;
			bcm_gport_t gport;
		} vlan_port_destroy;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_action_set_t * action;
		} vlan_port_egress_default_action_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_vlan_action_set_t * action;
		} vlan_port_egress_default_action_set;
		struct {
			int unit;
			bcm_vlan_t vid;
			bcm_pbmp_t * pbmp;
			bcm_pbmp_t * ubmp;
		} vlan_port_get;
		struct {
			int unit;
			bcm_port_t port;
			bcm_port_frametype_t frame;
			bcm_port_ethertype_t ether;
			bcm_vlan_action_set_t * action;
		} vlan_port_protocol_action_add;
		struct {
			int unit;
			bcm_vlan_t vid;
			bcm_pbmp_t pbmp;
		} vlan_port_remove;
		struct {
			int unit;
			bcm_vlan_t vlan;
			int enable;
		} vlan_stat_enable_set;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_cos_t cos;
			bcm_vlan_stat_t stat;
			uint64 * val;
		} vlan_stat_get;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_cos_t cos;
			bcm_vlan_stat_t stat;
			uint32 * val;
		} vlan_stat_get32;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_cos_t cos;
			bcm_vlan_stat_t stat;
			uint64 val;
		} vlan_stat_set;
		struct {
			int unit;
			bcm_vlan_t vlan;
			bcm_cos_t cos;
			bcm_vlan_stat_t stat;
			uint32 val;
		} vlan_stat_set32;
		struct {
			int unit;
			bcm_vlan_t vid;
			bcm_stg_t * stg_ptr;
		} vlan_stg_get;
		struct {
			int unit;
			bcm_vlan_t vid;
			bcm_stg_t stg;
		} vlan_stg_set;
		struct {
			int unit;
			bcm_vlan_t vid;
			bcm_port_t port;
			int * stp_state;
		} vlan_stp_get;
		struct {
			int unit;
			bcm_vlan_t vid;
			bcm_port_t port;
			int stp_state;
		} vlan_stp_set;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_action_set_t * action;
		} vlan_translate_action_add;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
		} vlan_translate_action_delete;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_translate_key_t key_type;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_action_set_t * action;
		} vlan_translate_action_get;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_t outer_vlan_low;
			bcm_vlan_t outer_vlan_high;
			bcm_vlan_t inner_vlan_low;
			bcm_vlan_t inner_vlan_high;
			bcm_vlan_action_set_t * action;
		} vlan_translate_action_range_add;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_t outer_vlan_low;
			bcm_vlan_t outer_vlan_high;
			bcm_vlan_t inner_vlan_low;
			bcm_vlan_t inner_vlan_high;
		} vlan_translate_action_range_delete;
		struct {
			int unit;
		} vlan_translate_action_range_delete_all;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_t outer_vlan_low;
			bcm_vlan_t outer_vlan_high;
			bcm_vlan_t inner_vlan_low;
			bcm_vlan_t inner_vlan_high;
			bcm_vlan_action_set_t * action;
		} vlan_translate_action_range_get;
		struct {
			int unit;
			bcm_vlan_translate_action_range_traverse_cb cb;
			void * user_data;
		} vlan_translate_action_range_traverse;
		struct {
			int unit;
			bcm_vlan_translate_action_traverse_cb cb;
			void * user_data;
		} vlan_translate_action_traverse;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid;
			bcm_vlan_t new_vid;
			int prio;
		} vlan_translate_add;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid;
		} vlan_translate_delete;
		struct {
			int unit;
		} vlan_translate_delete_all;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_action_set_t * action;
		} vlan_translate_egress_action_add;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
		} vlan_translate_egress_action_delete;
		struct {
			int unit;
			int port_class;
			bcm_vlan_t outer_vlan;
			bcm_vlan_t inner_vlan;
			bcm_vlan_action_set_t * action;
		} vlan_translate_egress_action_get;
		struct {
			int unit;
			bcm_vlan_translate_egress_action_traverse_cb cb;
			void * user_data;
		} vlan_translate_egress_action_traverse;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid;
			bcm_vlan_t new_vid;
			int prio;
		} vlan_translate_egress_add;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid;
		} vlan_translate_egress_delete;
		struct {
			int unit;
		} vlan_translate_egress_delete_all;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid;
			bcm_vlan_t * new_vid;
			int * prio;
		} vlan_translate_egress_get;
		struct {
			int unit;
			bcm_vlan_translate_egress_traverse_cb cb;
			void * user_data;
		} vlan_translate_egress_traverse;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid;
			bcm_vlan_t * new_vid;
			int * prio;
		} vlan_translate_get;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid_low;
			bcm_vlan_t old_vid_high;
			bcm_vlan_t new_vid;
			int int_prio;
		} vlan_translate_range_add;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid_low;
			bcm_vlan_t old_vid_high;
		} vlan_translate_range_delete;
		struct {
			int unit;
		} vlan_translate_range_delete_all;
		struct {
			int unit;
			int port;
			bcm_vlan_t old_vid_low;
			bcm_vlan_t old_vid_high;
			bcm_vlan_t * new_vid;
			int * int_prio;
		} vlan_translate_range_get;
		struct {
			int unit;
			bcm_vlan_translate_range_traverse_cb cb;
			void * user_data;
		} vlan_translate_range_traverse;
		struct {
			int unit;
			bcm_vlan_translate_traverse_cb cb;
			void * user_data;
		} vlan_translate_traverse;
		struct {
			int unit;
			uint32 vc_label;
			bcm_vlan_t vid;
			bcm_pbmp_t pbmp;
		} vpls_bitmap_add;
		struct {
			int unit;
			uint32 vc_label;
		} vpls_bitmap_delete;
		struct {
			int unit;
		} vpls_bitmap_delete_all;
		struct {
			int unit;
		} vpls_bitmap_detach;
		struct {
			int unit;
			uint32 vc_label;
			bcm_vlan_t * vid;
			bcm_pbmp_t * pbmp;
		} vpls_bitmap_get;
		struct {
			int unit;
		} vpls_bitmap_init;
		struct {
			int unit;
			bcm_vlan_t * vsi;
		} vswitch_create;
		struct {
			int unit;
			bcm_vlan_t vsi;
		} vswitch_create_with_id;
		struct {
			int unit;
			bcm_vlan_t vsi;
		} vswitch_destroy;
		struct {
			int unit;
		} vswitch_detach;
		struct {
			int unit;
		} vswitch_init;
		struct {
			int unit;
			bcm_vlan_t vsi;
			bcm_gport_t port;
		} vswitch_port_add;
		struct {
			int unit;
			bcm_vlan_t vsi;
			bcm_gport_t port;
		} vswitch_port_delete;
		struct {
			int unit;
			bcm_vlan_t vsi;
		} vswitch_port_delete_all;
		struct {
			int unit;
			bcm_gport_t port;
			bcm_vlan_t * vsi;
		} vswitch_port_get;
	} args;
} bcm_async_req_t;

typedef enum {
	BCM_ASYNC_ENTRY_NONE = 0,
	BCM_ASYNC_ENTRY_SHUTDOWN,
	BCM_ASYNC_ENTRY_ATTACH,
	BCM_ASYNC_ENTRY_ATTACH_CHECK,
	BCM_ASYNC_ENTRY_ATTACH_MAX,
	BCM_ASYNC_ENTRY_AUTH_DETACH,
	BCM_ASYNC_ENTRY_AUTH_EGRESS_GET,
	BCM_ASYNC_ENTRY_AUTH_EGRESS_SET,
	BCM_ASYNC_ENTRY_AUTH_INIT,
	BCM_ASYNC_ENTRY_AUTH_MAC_ADD,
	BCM_ASYNC_ENTRY_AUTH_MAC_DELETE,
	BCM_ASYNC_ENTRY_AUTH_MAC_DELETE_ALL,
	BCM_ASYNC_ENTRY_AUTH_MODE_GET,
	BCM_ASYNC_ENTRY_AUTH_MODE_SET,
	BCM_ASYNC_ENTRY_AUTH_UNAUTH_CALLBACK,
	BCM_ASYNC_ENTRY_CLEAR,
	BCM_ASYNC_ENTRY_COSQ_CONFIG_GET,
	BCM_ASYNC_ENTRY_COSQ_CONFIG_SET,
	BCM_ASYNC_ENTRY_COSQ_CONTROL_GET,
	BCM_ASYNC_ENTRY_COSQ_CONTROL_SET,
	BCM_ASYNC_ENTRY_COSQ_DETACH,
	BCM_ASYNC_ENTRY_COSQ_DISCARD_GET,
	BCM_ASYNC_ENTRY_COSQ_DISCARD_PORT_GET,
	BCM_ASYNC_ENTRY_COSQ_DISCARD_PORT_SET,
	BCM_ASYNC_ENTRY_COSQ_DISCARD_SET,
	BCM_ASYNC_ENTRY_COSQ_FABRIC_DISTRIBUTION_ADD,
	BCM_ASYNC_ENTRY_COSQ_FABRIC_DISTRIBUTION_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_ADD,
	BCM_ASYNC_ENTRY_COSQ_GPORT_ATTACH,
	BCM_ASYNC_ENTRY_COSQ_GPORT_ATTACH_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_BANDWIDTH_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_BANDWIDTH_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_DELETE,
	BCM_ASYNC_ENTRY_COSQ_GPORT_DETACH,
	BCM_ASYNC_ENTRY_COSQ_GPORT_DISCARD_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_DISCARD_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_ENABLE_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_ENABLE_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_MAPPING_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_MAPPING_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_NEXUS_ATTACH,
	BCM_ASYNC_ENTRY_COSQ_GPORT_NEXUS_DETACH,
	BCM_ASYNC_ENTRY_COSQ_GPORT_SCHED_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_SCHED_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_SIZE_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_SIZE_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_STAT_ENABLE_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_STAT_GET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_STAT_SET,
	BCM_ASYNC_ENTRY_COSQ_GPORT_TRAVERSE,
	BCM_ASYNC_ENTRY_COSQ_INIT,
	BCM_ASYNC_ENTRY_COSQ_MAPPING_GET,
	BCM_ASYNC_ENTRY_COSQ_MAPPING_SET,
	BCM_ASYNC_ENTRY_COSQ_PORT_BANDWIDTH_GET,
	BCM_ASYNC_ENTRY_COSQ_PORT_BANDWIDTH_SET,
	BCM_ASYNC_ENTRY_COSQ_PORT_MAPPING_GET,
	BCM_ASYNC_ENTRY_COSQ_PORT_MAPPING_SET,
	BCM_ASYNC_ENTRY_COSQ_PORT_SCHED_GET,
	BCM_ASYNC_ENTRY_COSQ_PORT_SCHED_SET,
	BCM_ASYNC_ENTRY_COSQ_SCHED_GET,
	BCM_ASYNC_ENTRY_COSQ_SCHED_SET,
	BCM_ASYNC_ENTRY_COSQ_SCHED_WEIGHT_MAX_GET,
	BCM_ASYNC_ENTRY_CUSTOM_PORT_GET,
	BCM_ASYNC_ENTRY_CUSTOM_PORT_SET,
	BCM_ASYNC_ENTRY_CUSTOM_REGISTER,
	BCM_ASYNC_ENTRY_CUSTOM_UNREGISTER,
	BCM_ASYNC_ENTRY_DETACH,
	BCM_ASYNC_ENTRY_DMUX_CONFIG_GET,
	BCM_ASYNC_ENTRY_DMUX_CONFIG_SET,
	BCM_ASYNC_ENTRY_DMUX_DEST_ADD,
	BCM_ASYNC_ENTRY_DMUX_DEST_DELETE,
	BCM_ASYNC_ENTRY_DMUX_DEST_DELETE_ALL,
	BCM_ASYNC_ENTRY_DMUX_DEST_GET,
	BCM_ASYNC_ENTRY_DMUX_DETACH,
	BCM_ASYNC_ENTRY_DMUX_INIT,
	BCM_ASYNC_ENTRY_DS_CLASSIFIER_CREATE,
	BCM_ASYNC_ENTRY_DS_CLASSIFIER_CREATE_ID,
	BCM_ASYNC_ENTRY_DS_CLASSIFIER_DELETE,
	BCM_ASYNC_ENTRY_DS_CLASSIFIER_GET,
	BCM_ASYNC_ENTRY_DS_CLASSIFIER_TRAVERSE,
	BCM_ASYNC_ENTRY_DS_CLASSIFIER_UPDATE,
	BCM_ASYNC_ENTRY_DS_COUNTER_GET,
	BCM_ASYNC_ENTRY_DS_DATAPATH_CREATE,
	BCM_ASYNC_ENTRY_DS_DATAPATH_CREATE_ID,
	BCM_ASYNC_ENTRY_DS_DATAPATH_DELETE,
	BCM_ASYNC_ENTRY_DS_DATAPATH_INSTALL,
	BCM_ASYNC_ENTRY_DS_DPID_CFID_BIND,
	BCM_ASYNC_ENTRY_DS_DPID_CFID_GET,
	BCM_ASYNC_ENTRY_DS_DPID_CFID_UNBIND,
	BCM_ASYNC_ENTRY_DS_INIT,
	BCM_ASYNC_ENTRY_DS_SCHEDULER_ADD,
	BCM_ASYNC_ENTRY_EAV_BANDWIDTH_GET,
	BCM_ASYNC_ENTRY_EAV_BANDWIDTH_SET,
	BCM_ASYNC_ENTRY_EAV_CONTROL_GET,
	BCM_ASYNC_ENTRY_EAV_CONTROL_SET,
	BCM_ASYNC_ENTRY_EAV_INIT,
	BCM_ASYNC_ENTRY_EAV_LINK_STATUS_GET,
	BCM_ASYNC_ENTRY_EAV_LINK_STATUS_SET,
	BCM_ASYNC_ENTRY_EAV_PCP_MAPPING_GET,
	BCM_ASYNC_ENTRY_EAV_PCP_MAPPING_SET,
	BCM_ASYNC_ENTRY_EAV_PORT_ENABLE_GET,
	BCM_ASYNC_ENTRY_EAV_PORT_ENABLE_SET,
	BCM_ASYNC_ENTRY_EAV_SRP_MAC_ETHERTYPE_GET,
	BCM_ASYNC_ENTRY_EAV_SRP_MAC_ETHERTYPE_SET,
	BCM_ASYNC_ENTRY_EAV_TIMESTAMP_GET,
	BCM_ASYNC_ENTRY_EAV_TIMESYNC_MAC_GET,
	BCM_ASYNC_ENTRY_EAV_TIMESYNC_MAC_SET,
	BCM_ASYNC_ENTRY_FABRIC_CONTROL_GET,
	BCM_ASYNC_ENTRY_FABRIC_CONTROL_REDUNDANCY_REGISTER,
	BCM_ASYNC_ENTRY_FABRIC_CONTROL_REDUNDANCY_UNREGISTER,
	BCM_ASYNC_ENTRY_FABRIC_CONTROL_SET,
	BCM_ASYNC_ENTRY_FABRIC_CROSSBAR_CONNECTION_GET,
	BCM_ASYNC_ENTRY_FABRIC_CROSSBAR_CONNECTION_SET,
	BCM_ASYNC_ENTRY_FABRIC_CROSSBAR_ENABLE_GET,
	BCM_ASYNC_ENTRY_FABRIC_CROSSBAR_ENABLE_SET,
	BCM_ASYNC_ENTRY_FABRIC_CROSSBAR_MAPPING_GET,
	BCM_ASYNC_ENTRY_FABRIC_CROSSBAR_MAPPING_SET,
	BCM_ASYNC_ENTRY_FABRIC_CROSSBAR_STATUS_GET,
	BCM_ASYNC_ENTRY_FABRIC_DISTRIBUTION_CREATE,
	BCM_ASYNC_ENTRY_FABRIC_DISTRIBUTION_DESTROY,
	BCM_ASYNC_ENTRY_FABRIC_DISTRIBUTION_GET,
	BCM_ASYNC_ENTRY_FABRIC_DISTRIBUTION_SET,
	BCM_ASYNC_ENTRY_FABRIC_INIT,
	BCM_ASYNC_ENTRY_FABRIC_PACKET_ADJUST_GET,
	BCM_ASYNC_ENTRY_FABRIC_PACKET_ADJUST_SET,
	BCM_ASYNC_ENTRY_FABRIC_PORT_FAILOVER_GET,
	BCM_ASYNC_ENTRY_FABRIC_PORT_FAILOVER_SET,
	BCM_ASYNC_ENTRY_FAILOVER_CREATE,
	BCM_ASYNC_ENTRY_FAILOVER_DESTROY,
	BCM_ASYNC_ENTRY_FAILOVER_GET,
	BCM_ASYNC_ENTRY_FAILOVER_SET,
	BCM_ASYNC_ENTRY_FFPCOUNTER_CREATE,
	BCM_ASYNC_ENTRY_FFPCOUNTER_DELETE,
	BCM_ASYNC_ENTRY_FFPCOUNTER_DELETE_ALL,
	BCM_ASYNC_ENTRY_FFPCOUNTER_GET,
	BCM_ASYNC_ENTRY_FFPCOUNTER_INIT,
	BCM_ASYNC_ENTRY_FFPCOUNTER_SET,
	BCM_ASYNC_ENTRY_FFPPACKETCOUNTER_GET,
	BCM_ASYNC_ENTRY_FFPPACKETCOUNTER_SET,
	BCM_ASYNC_ENTRY_FIELD_ACTION_ADD,
	BCM_ASYNC_ENTRY_FIELD_ACTION_DELETE,
	BCM_ASYNC_ENTRY_FIELD_ACTION_GET,
	BCM_ASYNC_ENTRY_FIELD_ACTION_PORTS_ADD,
	BCM_ASYNC_ENTRY_FIELD_ACTION_PORTS_GET,
	BCM_ASYNC_ENTRY_FIELD_ACTION_REMOVE,
	BCM_ASYNC_ENTRY_FIELD_ACTION_REMOVE_ALL,
	BCM_ASYNC_ENTRY_FIELD_CONTROL_GET,
	BCM_ASYNC_ENTRY_FIELD_CONTROL_SET,
	BCM_ASYNC_ENTRY_FIELD_COUNTER_CREATE,
	BCM_ASYNC_ENTRY_FIELD_COUNTER_DESTROY,
	BCM_ASYNC_ENTRY_FIELD_COUNTER_GET,
	BCM_ASYNC_ENTRY_FIELD_COUNTER_GET32,
	BCM_ASYNC_ENTRY_FIELD_COUNTER_SET,
	BCM_ASYNC_ENTRY_FIELD_COUNTER_SET32,
	BCM_ASYNC_ENTRY_FIELD_COUNTER_SHARE,
	BCM_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_CREATE,
	BCM_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_DESTROY,
	BCM_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_DESTROY_ALL,
	BCM_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_ETHERTYPE_ADD,
	BCM_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_ETHERTYPE_DELETE,
	BCM_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_IP_PROTOCOL_ADD,
	BCM_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_IP_PROTOCOL_DELETE,
	BCM_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_PACKET_FORMAT_ADD,
	BCM_ASYNC_ENTRY_FIELD_DATA_QUALIFIER_PACKET_FORMAT_DELETE,
	BCM_ASYNC_ENTRY_FIELD_DETACH,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_COPY,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_COPY_ID,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_CREATE,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_CREATE_ID,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_DESTROY,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_DESTROY_ALL,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_DUMP,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_INSTALL,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_POLICER_ATTACH,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_POLICER_DETACH,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_POLICER_DETACH_ALL,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_POLICER_GET,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_PRIO_GET,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_PRIO_SET,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_REINSTALL,
	BCM_ASYNC_ENTRY_FIELD_ENTRY_REMOVE,
	BCM_ASYNC_ENTRY_FIELD_GROUP_COMPRESS,
	BCM_ASYNC_ENTRY_FIELD_GROUP_CREATE,
	BCM_ASYNC_ENTRY_FIELD_GROUP_CREATE_ID,
	BCM_ASYNC_ENTRY_FIELD_GROUP_CREATE_MODE,
	BCM_ASYNC_ENTRY_FIELD_GROUP_CREATE_MODE_ID,
	BCM_ASYNC_ENTRY_FIELD_GROUP_DESTROY,
	BCM_ASYNC_ENTRY_FIELD_GROUP_DUMP,
	BCM_ASYNC_ENTRY_FIELD_GROUP_ENABLE_GET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_ENABLE_SET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_FLUSH,
	BCM_ASYNC_ENTRY_FIELD_GROUP_GET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_INSTALL,
	BCM_ASYNC_ENTRY_FIELD_GROUP_MODE_GET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_PORT_CREATE_MODE,
	BCM_ASYNC_ENTRY_FIELD_GROUP_PORT_CREATE_MODE_ID,
	BCM_ASYNC_ENTRY_FIELD_GROUP_PORTS_CREATE_MODE,
	BCM_ASYNC_ENTRY_FIELD_GROUP_PORTS_CREATE_MODE_ID,
	BCM_ASYNC_ENTRY_FIELD_GROUP_PRIORITY_GET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_PRIORITY_SET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_REMOVE,
	BCM_ASYNC_ENTRY_FIELD_GROUP_SATISFIES_QSET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_SET,
	BCM_ASYNC_ENTRY_FIELD_GROUP_STATUS_GET,
	BCM_ASYNC_ENTRY_FIELD_INIT,
	BCM_ASYNC_ENTRY_FIELD_METER_CREATE,
	BCM_ASYNC_ENTRY_FIELD_METER_DESTROY,
	BCM_ASYNC_ENTRY_FIELD_METER_GET,
	BCM_ASYNC_ENTRY_FIELD_METER_SET,
	BCM_ASYNC_ENTRY_FIELD_METER_SHARE,
	BCM_ASYNC_ENTRY_FIELD_QSET_ADD_UDF,
	BCM_ASYNC_ENTRY_FIELD_QSET_DATA_QUALIFIER_ADD,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_BIGICMPCHECK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSCP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DECAP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DOSATTACK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DROP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTCLASSFIELD,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTCLASSL2,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTCLASSL3,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP6,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTIP6HIGH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMAC,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTMODID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTPORTTGID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DSTTRUNK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EQUALL4PORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ETHERTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTENSIONHEADERSUBCODE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_EXTENSIONHEADERTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_FORWARDINGVLANVALID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_HIGIG,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_ICMPTYPECODE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IGMPTYPEMAXRESPTIME,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INPORTS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INGRESSSTPSTATE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERDSCP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERDSTIP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERDSTIP6,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERDSTIP6HIGH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIPFRAG,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERIPPROTOCOL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERSRCIP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERSRCIP6,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERSRCIP6HIGH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERTPID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERTTL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INNERVLAN,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSL2,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSL3,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_INTERFACECLASSPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IP6FLOWLABEL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IP6HOPLIMIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IP6NEXTHEADER,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IP6TRAFFICCLASS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPAUTH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPFLAGS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPFRAG,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPINFO,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPPROTOCOL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPPROTOCOLCOMMON,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPTYPE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_IPMCSTARGROUPHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2CACHEHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2DESTHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2FORMAT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2SRCHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2SRCSTATIC,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L2STATIONMOVE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3DESTHOSTHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3DESTROUTEHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3INTFGROUP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3ROUTABLE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L3SRCHOSTHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L4DSTPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L4PORTS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_L4SRCPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LLC,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOKUPCLASS0,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_LOOKUPSTATUS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MHOPCODE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MIRRORCOPY,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_MPLSTERMINATED,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTPORTS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERTPID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_OUTERVLAN,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PACKETFORMAT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PACKETRES,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_PORTCLASS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_RANGECHECK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SNAP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCCLASSFIELD,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCCLASSL2,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCCLASSL3,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP6,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIP6HIGH,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCIPEQUALDSTIP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCMAC,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCMACGROUP,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCMODID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCPORT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCPORTTGID,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_SRCTRUNK,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_STAGE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TCPCONTROL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TCPHEADERSIZE,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TCPSEQUENCEZERO,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TOS,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TTL,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_TUNNELTERMINATED,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_USERDEFINED,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VLANFORMAT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VLANTRANSLATIONHIT,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_VRF,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_CLEAR,
	BCM_ASYNC_ENTRY_FIELD_QUALIFY_DATA,
	BCM_ASYNC_ENTRY_FIELD_RANGE_CREATE,
	BCM_ASYNC_ENTRY_FIELD_RANGE_CREATE_ID,
	BCM_ASYNC_ENTRY_FIELD_RANGE_DESTROY,
	BCM_ASYNC_ENTRY_FIELD_RANGE_GET,
	BCM_ASYNC_ENTRY_FIELD_RANGE_GROUP_CREATE,
	BCM_ASYNC_ENTRY_FIELD_RANGE_GROUP_CREATE_ID,
	BCM_ASYNC_ENTRY_FIELD_RESYNC,
	BCM_ASYNC_ENTRY_FIELD_SHOW,
	BCM_ASYNC_ENTRY_FIELD_STATUS_GET,
	BCM_ASYNC_ENTRY_FIELD_UDF_CREATE,
	BCM_ASYNC_ENTRY_FIELD_UDF_CREATE_ID,
	BCM_ASYNC_ENTRY_FIELD_UDF_DESTROY,
	BCM_ASYNC_ENTRY_FIELD_UDF_ETHERTYPE_GET,
	BCM_ASYNC_ENTRY_FIELD_UDF_ETHERTYPE_SET,
	BCM_ASYNC_ENTRY_FIELD_UDF_GET,
	BCM_ASYNC_ENTRY_FIELD_UDF_IPPROTOCOL_GET,
	BCM_ASYNC_ENTRY_FIELD_UDF_IPPROTOCOL_SET,
	BCM_ASYNC_ENTRY_FIELD_UDF_SPEC_GET,
	BCM_ASYNC_ENTRY_FIELD_UDF_SPEC_SET,
	BCM_ASYNC_ENTRY_FILTER_ACTION_MATCH,
	BCM_ASYNC_ENTRY_FILTER_ACTION_NO_MATCH,
	BCM_ASYNC_ENTRY_FILTER_ACTION_OUT_PROFILE,
	BCM_ASYNC_ENTRY_FILTER_COPY,
	BCM_ASYNC_ENTRY_FILTER_COPY_ID,
	BCM_ASYNC_ENTRY_FILTER_CREATE,
	BCM_ASYNC_ENTRY_FILTER_CREATE_ID,
	BCM_ASYNC_ENTRY_FILTER_DESTROY,
	BCM_ASYNC_ENTRY_FILTER_DUMP,
	BCM_ASYNC_ENTRY_FILTER_INIT,
	BCM_ASYNC_ENTRY_FILTER_INSTALL,
	BCM_ASYNC_ENTRY_FILTER_QUALIFY_BROADCAST,
	BCM_ASYNC_ENTRY_FILTER_QUALIFY_DATA,
	BCM_ASYNC_ENTRY_FILTER_QUALIFY_DATA16,
	BCM_ASYNC_ENTRY_FILTER_QUALIFY_DATA32,
	BCM_ASYNC_ENTRY_FILTER_QUALIFY_DATA8,
	BCM_ASYNC_ENTRY_FILTER_QUALIFY_DATA_CVT,
	BCM_ASYNC_ENTRY_FILTER_QUALIFY_EGRESS,
	BCM_ASYNC_ENTRY_FILTER_QUALIFY_EGRESS_MODID,
	BCM_ASYNC_ENTRY_FILTER_QUALIFY_FORMAT,
	BCM_ASYNC_ENTRY_FILTER_QUALIFY_INGRESS,
	BCM_ASYNC_ENTRY_FILTER_QUALIFY_KNOWN_MCAST,
	BCM_ASYNC_ENTRY_FILTER_QUALIFY_KNOWN_UCAST,
	BCM_ASYNC_ENTRY_FILTER_QUALIFY_PRIORITY,
	BCM_ASYNC_ENTRY_FILTER_QUALIFY_STOP,
	BCM_ASYNC_ENTRY_FILTER_QUALIFY_UNKNOWN_MCAST,
	BCM_ASYNC_ENTRY_FILTER_QUALIFY_UNKNOWN_UCAST,
	BCM_ASYNC_ENTRY_FILTER_REINSTALL,
	BCM_ASYNC_ENTRY_FILTER_REMOVE,
	BCM_ASYNC_ENTRY_FILTER_REMOVE_ALL,
	BCM_ASYNC_ENTRY_FILTER_SHOW,
	BCM_ASYNC_ENTRY_FIND,
	BCM_ASYNC_ENTRY_HTLS_EGRESS_PORT_GET,
	BCM_ASYNC_ENTRY_HTLS_EGRESS_PORT_SET,
	BCM_ASYNC_ENTRY_HTLS_MODE_GET,
	BCM_ASYNC_ENTRY_HTLS_MODE_SET,
	BCM_ASYNC_ENTRY_HTLS_TUNNEL_LABEL_GET,
	BCM_ASYNC_ENTRY_HTLS_TUNNEL_LABEL_SET,
	BCM_ASYNC_ENTRY_HTLS_UPLINK_DA_GET,
	BCM_ASYNC_ENTRY_HTLS_UPLINK_DA_SET,
	BCM_ASYNC_ENTRY_HTLS_UPLINK_SA_GET,
	BCM_ASYNC_ENTRY_HTLS_UPLINK_SA_SET,
	BCM_ASYNC_ENTRY_HTLS_VCLABEL_GET,
	BCM_ASYNC_ENTRY_HTLS_VCLABEL_SET,
	BCM_ASYNC_ENTRY_I2C_IOCTL,
	BCM_ASYNC_ENTRY_I2C_OPEN,
	BCM_ASYNC_ENTRY_I2C_READ,
	BCM_ASYNC_ENTRY_I2C_WRITE,
	BCM_ASYNC_ENTRY_IGMP_SNOOPING_ENABLE_GET,
	BCM_ASYNC_ENTRY_IGMP_SNOOPING_ENABLE_SET,
	BCM_ASYNC_ENTRY_IGMP_SNOOPING_INIT,
	BCM_ASYNC_ENTRY_INFO_GET,
	BCM_ASYNC_ENTRY_INIT,
	BCM_ASYNC_ENTRY_INIT_CHECK,
	BCM_ASYNC_ENTRY_INIT_PHY_ID_MAP,
	BCM_ASYNC_ENTRY_INIT_SELECTIVE,
	BCM_ASYNC_ENTRY_IP6_MASK_CREATE,
	BCM_ASYNC_ENTRY_IP6_MASK_LENGTH,
	BCM_ASYNC_ENTRY_IP_MASK_LENGTH,
	BCM_ASYNC_ENTRY_IPFIX_CONFIG_GET,
	BCM_ASYNC_ENTRY_IPFIX_CONFIG_SET,
	BCM_ASYNC_ENTRY_IPFIX_REGISTER,
	BCM_ASYNC_ENTRY_IPFIX_UNREGISTER,
	BCM_ASYNC_ENTRY_IPMC_ADD,
	BCM_ASYNC_ENTRY_IPMC_ADD_L2_PORTS,
	BCM_ASYNC_ENTRY_IPMC_ADD_L3_PORTS,
	BCM_ASYNC_ENTRY_IPMC_AGE,
	BCM_ASYNC_ENTRY_IPMC_BITMAP_DEL,
	BCM_ASYNC_ENTRY_IPMC_BITMAP_GET,
	BCM_ASYNC_ENTRY_IPMC_BITMAP_MAX_GET,
	BCM_ASYNC_ENTRY_IPMC_BITMAP_SET,
	BCM_ASYNC_ENTRY_IPMC_COS_SET,
	BCM_ASYNC_ENTRY_IPMC_COUNTERS_GET,
	BCM_ASYNC_ENTRY_IPMC_DELETE,
	BCM_ASYNC_ENTRY_IPMC_DELETE_ALL,
	BCM_ASYNC_ENTRY_IPMC_DELETE_L2_PORTS,
	BCM_ASYNC_ENTRY_IPMC_DELETE_L3_PORT,
	BCM_ASYNC_ENTRY_IPMC_DETACH,
	BCM_ASYNC_ENTRY_IPMC_EGRESS_INTF_ADD,
	BCM_ASYNC_ENTRY_IPMC_EGRESS_INTF_DELETE,
	BCM_ASYNC_ENTRY_IPMC_EGRESS_INTF_DELETE_ALL,
	BCM_ASYNC_ENTRY_IPMC_EGRESS_INTF_GET,
	BCM_ASYNC_ENTRY_IPMC_EGRESS_INTF_SET,
	BCM_ASYNC_ENTRY_IPMC_EGRESS_PORT_GET,
	BCM_ASYNC_ENTRY_IPMC_EGRESS_PORT_INIT,
	BCM_ASYNC_ENTRY_IPMC_EGRESS_PORT_SET,
	BCM_ASYNC_ENTRY_IPMC_ENABLE,
	BCM_ASYNC_ENTRY_IPMC_ENTRY_ENABLE_SET,
	BCM_ASYNC_ENTRY_IPMC_FIND,
	BCM_ASYNC_ENTRY_IPMC_GET,
	BCM_ASYNC_ENTRY_IPMC_GET_BY_INDEX,
	BCM_ASYNC_ENTRY_IPMC_INIT,
	BCM_ASYNC_ENTRY_IPMC_PORT_MODID_SET,
	BCM_ASYNC_ENTRY_IPMC_PORT_TGID_SET,
	BCM_ASYNC_ENTRY_IPMC_REMOVE,
	BCM_ASYNC_ENTRY_IPMC_REMOVE_ALL,
	BCM_ASYNC_ENTRY_IPMC_REPL_ADD,
	BCM_ASYNC_ENTRY_IPMC_REPL_DELETE,
	BCM_ASYNC_ENTRY_IPMC_REPL_DELETE_ALL,
	BCM_ASYNC_ENTRY_IPMC_REPL_GET,
	BCM_ASYNC_ENTRY_IPMC_REPL_SET,
	BCM_ASYNC_ENTRY_IPMC_SOURCE_IP_SEARCH,
	BCM_ASYNC_ENTRY_IPMC_SOURCE_PORT_CHECK,
	BCM_ASYNC_ENTRY_IPMC_SPORT_MISMATCH_ACTION,
	BCM_ASYNC_ENTRY_IPMC_TRAVERSE,
	BCM_ASYNC_ENTRY_IPMC_TTL_THRESHOLD_SET,
	BCM_ASYNC_ENTRY_L2_ADDR_ADD,
	BCM_ASYNC_ENTRY_L2_ADDR_DELETE,
	BCM_ASYNC_ENTRY_L2_ADDR_DELETE_BY_MAC,
	BCM_ASYNC_ENTRY_L2_ADDR_DELETE_BY_MAC_PORT,
	BCM_ASYNC_ENTRY_L2_ADDR_DELETE_BY_PORT,
	BCM_ASYNC_ENTRY_L2_ADDR_DELETE_BY_TRUNK,
	BCM_ASYNC_ENTRY_L2_ADDR_DELETE_BY_VLAN,
	BCM_ASYNC_ENTRY_L2_ADDR_DELETE_BY_VLAN_PORT,
	BCM_ASYNC_ENTRY_L2_ADDR_DELETE_BY_VLAN_TRUNK,
	BCM_ASYNC_ENTRY_L2_ADDR_FREEZE,
	BCM_ASYNC_ENTRY_L2_ADDR_GET,
	BCM_ASYNC_ENTRY_L2_ADDR_REGISTER,
	BCM_ASYNC_ENTRY_L2_ADDR_THAW,
	BCM_ASYNC_ENTRY_L2_ADDR_UNREGISTER,
	BCM_ASYNC_ENTRY_L2_AGE_TIMER_GET,
	BCM_ASYNC_ENTRY_L2_AGE_TIMER_SET,
	BCM_ASYNC_ENTRY_L2_BPDU_COUNT,
	BCM_ASYNC_ENTRY_L2_BPDU_GET,
	BCM_ASYNC_ENTRY_L2_BPDU_SET,
	BCM_ASYNC_ENTRY_L2_CACHE_DELETE,
	BCM_ASYNC_ENTRY_L2_CACHE_DELETE_ALL,
	BCM_ASYNC_ENTRY_L2_CACHE_GET,
	BCM_ASYNC_ENTRY_L2_CACHE_INIT,
	BCM_ASYNC_ENTRY_L2_CACHE_SET,
	BCM_ASYNC_ENTRY_L2_CACHE_SIZE_GET,
	BCM_ASYNC_ENTRY_L2_CLEAR,
	BCM_ASYNC_ENTRY_L2_CONFLICT_GET,
	BCM_ASYNC_ENTRY_L2_DETACH,
	BCM_ASYNC_ENTRY_L2_EGRESS_CREATE,
	BCM_ASYNC_ENTRY_L2_EGRESS_DESTROY,
	BCM_ASYNC_ENTRY_L2_EGRESS_FIND,
	BCM_ASYNC_ENTRY_L2_EGRESS_GET,
	BCM_ASYNC_ENTRY_L2_EGRESS_TRAVERSE,
	BCM_ASYNC_ENTRY_L2_INIT,
	BCM_ASYNC_ENTRY_L2_KEY_DUMP,
	BCM_ASYNC_ENTRY_L2_LEARN_CLASS_GET,
	BCM_ASYNC_ENTRY_L2_LEARN_CLASS_SET,
	BCM_ASYNC_ENTRY_L2_LEARN_LIMIT_GET,
	BCM_ASYNC_ENTRY_L2_LEARN_LIMIT_SET,
	BCM_ASYNC_ENTRY_L2_LEARN_PORT_CLASS_GET,
	BCM_ASYNC_ENTRY_L2_LEARN_PORT_CLASS_SET,
	BCM_ASYNC_ENTRY_L2_PORT_NATIVE,
	BCM_ASYNC_ENTRY_L2_REPLACE,
	BCM_ASYNC_ENTRY_L2_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_L2_STAT_GET,
	BCM_ASYNC_ENTRY_L2_STAT_GET32,
	BCM_ASYNC_ENTRY_L2_STAT_SET,
	BCM_ASYNC_ENTRY_L2_STAT_SET32,
	BCM_ASYNC_ENTRY_L2_TRAVERSE,
	BCM_ASYNC_ENTRY_L2_TUNNEL_ADD,
	BCM_ASYNC_ENTRY_L2_TUNNEL_DELETE,
	BCM_ASYNC_ENTRY_L2_TUNNEL_DELETE_ALL,
	BCM_ASYNC_ENTRY_L3_AGE,
	BCM_ASYNC_ENTRY_L3_CLEANUP,
	BCM_ASYNC_ENTRY_L3_CONFLICT_GET,
	BCM_ASYNC_ENTRY_L3_DEFIP_ADD,
	BCM_ASYNC_ENTRY_L3_DEFIP_AGE,
	BCM_ASYNC_ENTRY_L3_DEFIP_DELETE,
	BCM_ASYNC_ENTRY_L3_DEFIP_DELETE_ALL,
	BCM_ASYNC_ENTRY_L3_DEFIP_DELETE_BY_INTERFACE,
	BCM_ASYNC_ENTRY_L3_DEFIP_FIND_INDEX,
	BCM_ASYNC_ENTRY_L3_DEFIP_GET,
	BCM_ASYNC_ENTRY_L3_DEFIP_MAX_ECMP_GET,
	BCM_ASYNC_ENTRY_L3_DEFIP_MAX_ECMP_SET,
	BCM_ASYNC_ENTRY_L3_EGRESS_CREATE,
	BCM_ASYNC_ENTRY_L3_EGRESS_DESTROY,
	BCM_ASYNC_ENTRY_L3_EGRESS_FIND,
	BCM_ASYNC_ENTRY_L3_EGRESS_GET,
	BCM_ASYNC_ENTRY_L3_EGRESS_MULTIPATH_ADD,
	BCM_ASYNC_ENTRY_L3_EGRESS_MULTIPATH_CREATE,
	BCM_ASYNC_ENTRY_L3_EGRESS_MULTIPATH_DELETE,
	BCM_ASYNC_ENTRY_L3_EGRESS_MULTIPATH_DESTROY,
	BCM_ASYNC_ENTRY_L3_EGRESS_MULTIPATH_FIND,
	BCM_ASYNC_ENTRY_L3_EGRESS_MULTIPATH_GET,
	BCM_ASYNC_ENTRY_L3_EGRESS_MULTIPATH_TRAVERSE,
	BCM_ASYNC_ENTRY_L3_EGRESS_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_L3_EGRESS_STAT_GET,
	BCM_ASYNC_ENTRY_L3_EGRESS_STAT_GET32,
	BCM_ASYNC_ENTRY_L3_EGRESS_STAT_SET,
	BCM_ASYNC_ENTRY_L3_EGRESS_STAT_SET32,
	BCM_ASYNC_ENTRY_L3_EGRESS_TRAVERSE,
	BCM_ASYNC_ENTRY_L3_ENABLE_SET,
	BCM_ASYNC_ENTRY_L3_HOST_ADD,
	BCM_ASYNC_ENTRY_L3_HOST_AGE,
	BCM_ASYNC_ENTRY_L3_HOST_CONFLICT_GET,
	BCM_ASYNC_ENTRY_L3_HOST_DELETE,
	BCM_ASYNC_ENTRY_L3_HOST_DELETE_ALL,
	BCM_ASYNC_ENTRY_L3_HOST_DELETE_BY_INTERFACE,
	BCM_ASYNC_ENTRY_L3_HOST_DELETE_BY_NETWORK,
	BCM_ASYNC_ENTRY_L3_HOST_FIND,
	BCM_ASYNC_ENTRY_L3_HOST_INVALIDATE_ENTRY,
	BCM_ASYNC_ENTRY_L3_HOST_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_L3_HOST_STAT_GET,
	BCM_ASYNC_ENTRY_L3_HOST_STAT_GET32,
	BCM_ASYNC_ENTRY_L3_HOST_STAT_SET,
	BCM_ASYNC_ENTRY_L3_HOST_STAT_SET32,
	BCM_ASYNC_ENTRY_L3_HOST_TRAVERSE,
	BCM_ASYNC_ENTRY_L3_HOST_VALIDATE_ENTRY,
	BCM_ASYNC_ENTRY_L3_INFO,
	BCM_ASYNC_ENTRY_L3_INIT,
	BCM_ASYNC_ENTRY_L3_INTERFACE_CREATE,
	BCM_ASYNC_ENTRY_L3_INTERFACE_DESTROY,
	BCM_ASYNC_ENTRY_L3_INTERFACE_FIND,
	BCM_ASYNC_ENTRY_L3_INTERFACE_FIND_BY_VLAN,
	BCM_ASYNC_ENTRY_L3_INTERFACE_ID_CREATE,
	BCM_ASYNC_ENTRY_L3_INTERFACE_ID_UPDATE,
	BCM_ASYNC_ENTRY_L3_INTERFACE_LOOKUP,
	BCM_ASYNC_ENTRY_L3_INTF_CREATE,
	BCM_ASYNC_ENTRY_L3_INTF_DELETE,
	BCM_ASYNC_ENTRY_L3_INTF_DELETE_ALL,
	BCM_ASYNC_ENTRY_L3_INTF_FIND,
	BCM_ASYNC_ENTRY_L3_INTF_FIND_VLAN,
	BCM_ASYNC_ENTRY_L3_INTF_GET,
	BCM_ASYNC_ENTRY_L3_INVALIDATE_ENTRY,
	BCM_ASYNC_ENTRY_L3_IP6_PREFIX_MAP_ADD,
	BCM_ASYNC_ENTRY_L3_IP6_PREFIX_MAP_DELETE,
	BCM_ASYNC_ENTRY_L3_IP6_PREFIX_MAP_DELETE_ALL,
	BCM_ASYNC_ENTRY_L3_IP6_PREFIX_MAP_GET,
	BCM_ASYNC_ENTRY_L3_IP_ADD,
	BCM_ASYNC_ENTRY_L3_IP_DELETE,
	BCM_ASYNC_ENTRY_L3_IP_DELETE_ALL,
	BCM_ASYNC_ENTRY_L3_IP_DELETE_BY_INTERFACE,
	BCM_ASYNC_ENTRY_L3_IP_DELETE_BY_PREFIX,
	BCM_ASYNC_ENTRY_L3_IP_FIND,
	BCM_ASYNC_ENTRY_L3_IP_FIND_INDEX,
	BCM_ASYNC_ENTRY_L3_IP_UPDATE_ENTRY_BY_KEY,
	BCM_ASYNC_ENTRY_L3_ROUTE_ADD,
	BCM_ASYNC_ENTRY_L3_ROUTE_AGE,
	BCM_ASYNC_ENTRY_L3_ROUTE_DELETE,
	BCM_ASYNC_ENTRY_L3_ROUTE_DELETE_ALL,
	BCM_ASYNC_ENTRY_L3_ROUTE_DELETE_BY_INTERFACE,
	BCM_ASYNC_ENTRY_L3_ROUTE_GET,
	BCM_ASYNC_ENTRY_L3_ROUTE_MAX_ECMP_GET,
	BCM_ASYNC_ENTRY_L3_ROUTE_MAX_ECMP_SET,
	BCM_ASYNC_ENTRY_L3_ROUTE_MULTIPATH_GET,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_GET,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_GET32,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_SET,
	BCM_ASYNC_ENTRY_L3_ROUTE_STAT_SET32,
	BCM_ASYNC_ENTRY_L3_ROUTE_TRAVERSE,
	BCM_ASYNC_ENTRY_L3_STATUS,
	BCM_ASYNC_ENTRY_L3_UNTAGGED_UPDATE,
	BCM_ASYNC_ENTRY_L3_VALIDATE_ENTRY,
	BCM_ASYNC_ENTRY_LINK_CHANGE,
	BCM_ASYNC_ENTRY_LINK_WAIT,
	BCM_ASYNC_ENTRY_LINKSCAN_DETACH,
	BCM_ASYNC_ENTRY_LINKSCAN_DUMP,
	BCM_ASYNC_ENTRY_LINKSCAN_ENABLE_GET,
	BCM_ASYNC_ENTRY_LINKSCAN_ENABLE_PORT_GET,
	BCM_ASYNC_ENTRY_LINKSCAN_ENABLE_SET,
	BCM_ASYNC_ENTRY_LINKSCAN_INIT,
	BCM_ASYNC_ENTRY_LINKSCAN_MODE_GET,
	BCM_ASYNC_ENTRY_LINKSCAN_MODE_SET,
	BCM_ASYNC_ENTRY_LINKSCAN_MODE_SET_PBM,
	BCM_ASYNC_ENTRY_LINKSCAN_PORT_REGISTER,
	BCM_ASYNC_ENTRY_LINKSCAN_PORT_UNREGISTER,
	BCM_ASYNC_ENTRY_LINKSCAN_REGISTER,
	BCM_ASYNC_ENTRY_LINKSCAN_UNREGISTER,
	BCM_ASYNC_ENTRY_LINKSCAN_UPDATE,
	BCM_ASYNC_ENTRY_MCAST_ADDR_ADD,
	BCM_ASYNC_ENTRY_MCAST_ADDR_ADD_W_L2MCINDEX,
	BCM_ASYNC_ENTRY_MCAST_ADDR_REMOVE,
	BCM_ASYNC_ENTRY_MCAST_ADDR_REMOVE_W_L2MCINDEX,
	BCM_ASYNC_ENTRY_MCAST_BITMAP_DEL,
	BCM_ASYNC_ENTRY_MCAST_BITMAP_GET,
	BCM_ASYNC_ENTRY_MCAST_BITMAP_MAX_GET,
	BCM_ASYNC_ENTRY_MCAST_BITMAP_SET,
	BCM_ASYNC_ENTRY_MCAST_INIT,
	BCM_ASYNC_ENTRY_MCAST_JOIN,
	BCM_ASYNC_ENTRY_MCAST_LEAVE,
	BCM_ASYNC_ENTRY_MCAST_PORT_ADD,
	BCM_ASYNC_ENTRY_MCAST_PORT_GET,
	BCM_ASYNC_ENTRY_MCAST_PORT_REMOVE,
	BCM_ASYNC_ENTRY_METER_CREATE,
	BCM_ASYNC_ENTRY_METER_DELETE,
	BCM_ASYNC_ENTRY_METER_DELETE_ALL,
	BCM_ASYNC_ENTRY_METER_GET,
	BCM_ASYNC_ENTRY_METER_INIT,
	BCM_ASYNC_ENTRY_METER_SET,
	BCM_ASYNC_ENTRY_MIM_PORT_ADD,
	BCM_ASYNC_ENTRY_MIM_PORT_DELETE,
	BCM_ASYNC_ENTRY_MIM_PORT_DELETE_ALL,
	BCM_ASYNC_ENTRY_MIM_PORT_GET,
	BCM_ASYNC_ENTRY_MIM_PORT_GET_ALL,
	BCM_ASYNC_ENTRY_MIM_VPN_CREATE,
	BCM_ASYNC_ENTRY_MIM_VPN_DESTROY,
	BCM_ASYNC_ENTRY_MIM_VPN_DESTROY_ALL,
	BCM_ASYNC_ENTRY_MIM_VPN_GET,
	BCM_ASYNC_ENTRY_MIM_VPN_TRAVERSE,
	BCM_ASYNC_ENTRY_MIRROR_DESTINATION_CREATE,
	BCM_ASYNC_ENTRY_MIRROR_DESTINATION_DESTROY,
	BCM_ASYNC_ENTRY_MIRROR_DESTINATION_GET,
	BCM_ASYNC_ENTRY_MIRROR_DESTINATION_TRAVERSE,
	BCM_ASYNC_ENTRY_MIRROR_EGRESS_GET,
	BCM_ASYNC_ENTRY_MIRROR_EGRESS_PATH_GET,
	BCM_ASYNC_ENTRY_MIRROR_EGRESS_PATH_SET,
	BCM_ASYNC_ENTRY_MIRROR_EGRESS_SET,
	BCM_ASYNC_ENTRY_MIRROR_INGRESS_GET,
	BCM_ASYNC_ENTRY_MIRROR_INGRESS_SET,
	BCM_ASYNC_ENTRY_MIRROR_INIT,
	BCM_ASYNC_ENTRY_MIRROR_MODE_GET,
	BCM_ASYNC_ENTRY_MIRROR_MODE_SET,
	BCM_ASYNC_ENTRY_MIRROR_PFMT_GET,
	BCM_ASYNC_ENTRY_MIRROR_PFMT_SET,
	BCM_ASYNC_ENTRY_MIRROR_PORT_DEST_ADD,
	BCM_ASYNC_ENTRY_MIRROR_PORT_DEST_DELETE,
	BCM_ASYNC_ENTRY_MIRROR_PORT_DEST_DELETE_ALL,
	BCM_ASYNC_ENTRY_MIRROR_PORT_DEST_GET,
	BCM_ASYNC_ENTRY_MIRROR_PORT_GET,
	BCM_ASYNC_ENTRY_MIRROR_PORT_SET,
	BCM_ASYNC_ENTRY_MIRROR_TO_GET,
	BCM_ASYNC_ENTRY_MIRROR_TO_PBMP_GET,
	BCM_ASYNC_ENTRY_MIRROR_TO_PBMP_SET,
	BCM_ASYNC_ENTRY_MIRROR_TO_SET,
	BCM_ASYNC_ENTRY_MIRROR_VLAN_GET,
	BCM_ASYNC_ENTRY_MIRROR_VLAN_SET,
	BCM_ASYNC_ENTRY_MPLS_CLEANUP,
	BCM_ASYNC_ENTRY_MPLS_EXP_MAP_CREATE,
	BCM_ASYNC_ENTRY_MPLS_EXP_MAP_DESTROY,
	BCM_ASYNC_ENTRY_MPLS_EXP_MAP_GET,
	BCM_ASYNC_ENTRY_MPLS_EXP_MAP_SET,
	BCM_ASYNC_ENTRY_MPLS_INFO,
	BCM_ASYNC_ENTRY_MPLS_INIT,
	BCM_ASYNC_ENTRY_MPLS_L3_INITIATOR_CLEAR,
	BCM_ASYNC_ENTRY_MPLS_L3_INITIATOR_CLEAR_ALL,
	BCM_ASYNC_ENTRY_MPLS_L3_INITIATOR_GET,
	BCM_ASYNC_ENTRY_MPLS_L3_INITIATOR_SET,
	BCM_ASYNC_ENTRY_MPLS_LABEL_STAT_GET,
	BCM_ASYNC_ENTRY_MPLS_LABEL_STAT_GET32,
	BCM_ASYNC_ENTRY_MPLS_PORT_ADD,
	BCM_ASYNC_ENTRY_MPLS_PORT_BLOCK_GET,
	BCM_ASYNC_ENTRY_MPLS_PORT_BLOCK_SET,
	BCM_ASYNC_ENTRY_MPLS_PORT_DELETE,
	BCM_ASYNC_ENTRY_MPLS_PORT_DELETE_ALL,
	BCM_ASYNC_ENTRY_MPLS_PORT_GET,
	BCM_ASYNC_ENTRY_MPLS_PORT_GET_ALL,
	BCM_ASYNC_ENTRY_MPLS_PORT_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_MPLS_PORT_STAT_GET,
	BCM_ASYNC_ENTRY_MPLS_PORT_STAT_GET32,
	BCM_ASYNC_ENTRY_MPLS_PORT_STAT_SET,
	BCM_ASYNC_ENTRY_MPLS_PORT_STAT_SET32,
	BCM_ASYNC_ENTRY_MPLS_SWITCH_ADD,
	BCM_ASYNC_ENTRY_MPLS_SWITCH_DELETE,
	BCM_ASYNC_ENTRY_MPLS_SWITCH_DELETE_ALL,
	BCM_ASYNC_ENTRY_MPLS_SWITCH_GET,
	BCM_ASYNC_ENTRY_MPLS_SWITCH_TRAVERSE,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_INITIATOR_CLEAR,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_INITIATOR_CLEAR_ALL,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_INITIATOR_GET,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_INITIATOR_SET,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_SWITCH_ADD,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_SWITCH_DELETE,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_SWITCH_DELETE_ALL,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_SWITCH_GET,
	BCM_ASYNC_ENTRY_MPLS_TUNNEL_SWITCH_TRAVERSE,
	BCM_ASYNC_ENTRY_MPLS_VPN_ADD,
	BCM_ASYNC_ENTRY_MPLS_VPN_CIRCUIT_ADD,
	BCM_ASYNC_ENTRY_MPLS_VPN_CIRCUIT_DELETE,
	BCM_ASYNC_ENTRY_MPLS_VPN_CIRCUIT_DELETE_ALL,
	BCM_ASYNC_ENTRY_MPLS_VPN_CIRCUIT_GET,
	BCM_ASYNC_ENTRY_MPLS_VPN_CREATE,
	BCM_ASYNC_ENTRY_MPLS_VPN_DELETE,
	BCM_ASYNC_ENTRY_MPLS_VPN_DELETE_ALL,
	BCM_ASYNC_ENTRY_MPLS_VPN_DESTROY,
	BCM_ASYNC_ENTRY_MPLS_VPN_GET,
	BCM_ASYNC_ENTRY_MPLS_VPN_ID_CREATE,
	BCM_ASYNC_ENTRY_MPLS_VPN_ID_DESTROY,
	BCM_ASYNC_ENTRY_MPLS_VPN_ID_DESTROY_ALL,
	BCM_ASYNC_ENTRY_MPLS_VPN_ID_GET,
	BCM_ASYNC_ENTRY_MULTICAST_CREATE,
	BCM_ASYNC_ENTRY_MULTICAST_DESTROY,
	BCM_ASYNC_ENTRY_MULTICAST_EGRESS_ADD,
	BCM_ASYNC_ENTRY_MULTICAST_EGRESS_DELETE,
	BCM_ASYNC_ENTRY_MULTICAST_EGRESS_DELETE_ALL,
	BCM_ASYNC_ENTRY_MULTICAST_EGRESS_GET,
	BCM_ASYNC_ENTRY_MULTICAST_EGRESS_SET,
	BCM_ASYNC_ENTRY_MULTICAST_L2_ENCAP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_L3_ENCAP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_MIM_ENCAP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_SUBPORT_ENCAP_GET,
	BCM_ASYNC_ENTRY_MULTICAST_VPLS_ENCAP_GET,
	BCM_ASYNC_ENTRY_OAM_CCM_ENDPOINT_ADD,
	BCM_ASYNC_ENTRY_OAM_CCM_ENDPOINT_DELETE,
	BCM_ASYNC_ENTRY_OAM_CCM_ENDPOINT_DELETE_ALL,
	BCM_ASYNC_ENTRY_OAM_CCM_ENDPOINT_GET,
	BCM_ASYNC_ENTRY_OAM_CCM_REGISTER,
	BCM_ASYNC_ENTRY_OAM_CCM_TRAVERSE,
	BCM_ASYNC_ENTRY_OAM_CCM_UNREGISTER,
	BCM_ASYNC_ENTRY_OAM_DETACH,
	BCM_ASYNC_ENTRY_OAM_INIT,
	BCM_ASYNC_ENTRY_PKT_ALLOC,
	BCM_ASYNC_ENTRY_PKT_BLK_ALLOC,
	BCM_ASYNC_ENTRY_PKT_BLK_FREE,
	BCM_ASYNC_ENTRY_PKT_BYTE_INDEX,
	BCM_ASYNC_ENTRY_PKT_CLEAR,
	BCM_ASYNC_ENTRY_PKT_FLAGS_INIT,
	BCM_ASYNC_ENTRY_PKT_FLAGS_LEN_SETUP,
	BCM_ASYNC_ENTRY_PKT_FREE,
	BCM_ASYNC_ENTRY_PKT_MEMCPY,
	BCM_ASYNC_ENTRY_PKT_RX_ALLOC,
	BCM_ASYNC_ENTRY_PKT_RX_FREE,
	BCM_ASYNC_ENTRY_POLICER_CREATE,
	BCM_ASYNC_ENTRY_POLICER_DESTROY,
	BCM_ASYNC_ENTRY_POLICER_DESTROY_ALL,
	BCM_ASYNC_ENTRY_POLICER_GET,
	BCM_ASYNC_ENTRY_POLICER_GROUP_CREATE,
	BCM_ASYNC_ENTRY_POLICER_INIT,
	BCM_ASYNC_ENTRY_POLICER_SET,
	BCM_ASYNC_ENTRY_POLICER_STAT_ENABLE_GET,
	BCM_ASYNC_ENTRY_POLICER_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_POLICER_STAT_GET,
	BCM_ASYNC_ENTRY_POLICER_STAT_GET32,
	BCM_ASYNC_ENTRY_POLICER_STAT_SET,
	BCM_ASYNC_ENTRY_POLICER_STAT_SET32,
	BCM_ASYNC_ENTRY_POLICER_TRAVERSE,
	BCM_ASYNC_ENTRY_PORT_ABILITY_ADVERT_GET,
	BCM_ASYNC_ENTRY_PORT_ABILITY_ADVERT_SET,
	BCM_ASYNC_ENTRY_PORT_ABILITY_GET,
	BCM_ASYNC_ENTRY_PORT_ABILITY_LOCAL_GET,
	BCM_ASYNC_ENTRY_PORT_ABILITY_REMOTE_GET,
	BCM_ASYNC_ENTRY_PORT_ADVERT_GET,
	BCM_ASYNC_ENTRY_PORT_ADVERT_REMOTE_GET,
	BCM_ASYNC_ENTRY_PORT_ADVERT_SET,
	BCM_ASYNC_ENTRY_PORT_AUTONEG_GET,
	BCM_ASYNC_ENTRY_PORT_AUTONEG_SET,
	BCM_ASYNC_ENTRY_PORT_BPDU_ENABLE_GET,
	BCM_ASYNC_ENTRY_PORT_BPDU_ENABLE_SET,
	BCM_ASYNC_ENTRY_PORT_CABLE_DIAG,
	BCM_ASYNC_ENTRY_PORT_CFI_COLOR_GET,
	BCM_ASYNC_ENTRY_PORT_CFI_COLOR_SET,
	BCM_ASYNC_ENTRY_PORT_CLASS_GET,
	BCM_ASYNC_ENTRY_PORT_CLASS_SET,
	BCM_ASYNC_ENTRY_PORT_CLEAR,
	BCM_ASYNC_ENTRY_PORT_CONFIG_GET,
	BCM_ASYNC_ENTRY_PORT_CONTROL_GET,
	BCM_ASYNC_ENTRY_PORT_CONTROL_SET,
	BCM_ASYNC_ENTRY_PORT_DETACH,
	BCM_ASYNC_ENTRY_PORT_DISCARD_GET,
	BCM_ASYNC_ENTRY_PORT_DISCARD_SET,
	BCM_ASYNC_ENTRY_PORT_DSCP_MAP_GET,
	BCM_ASYNC_ENTRY_PORT_DSCP_MAP_MODE_GET,
	BCM_ASYNC_ENTRY_PORT_DSCP_MAP_MODE_SET,
	BCM_ASYNC_ENTRY_PORT_DSCP_MAP_SET,
	BCM_ASYNC_ENTRY_PORT_DSCP_UNMAP_GET,
	BCM_ASYNC_ENTRY_PORT_DSCP_UNMAP_SET,
	BCM_ASYNC_ENTRY_PORT_DTAG_MODE_GET,
	BCM_ASYNC_ENTRY_PORT_DTAG_MODE_SET,
	BCM_ASYNC_ENTRY_PORT_DUPLEX_GET,
	BCM_ASYNC_ENTRY_PORT_DUPLEX_SET,
	BCM_ASYNC_ENTRY_PORT_EGRESS_GET,
	BCM_ASYNC_ENTRY_PORT_EGRESS_SET,
	BCM_ASYNC_ENTRY_PORT_ENABLE_GET,
	BCM_ASYNC_ENTRY_PORT_ENABLE_SET,
	BCM_ASYNC_ENTRY_PORT_ENCAP_GET,
	BCM_ASYNC_ENTRY_PORT_ENCAP_SET,
	BCM_ASYNC_ENTRY_PORT_FAULT_GET,
	BCM_ASYNC_ENTRY_PORT_FLOOD_BLOCK_GET,
	BCM_ASYNC_ENTRY_PORT_FLOOD_BLOCK_SET,
	BCM_ASYNC_ENTRY_PORT_FORCE_FORWARD_GET,
	BCM_ASYNC_ENTRY_PORT_FORCE_FORWARD_SET,
	BCM_ASYNC_ENTRY_PORT_FORCE_VLAN_GET,
	BCM_ASYNC_ENTRY_PORT_FORCE_VLAN_SET,
	BCM_ASYNC_ENTRY_PORT_FRAME_MAX_GET,
	BCM_ASYNC_ENTRY_PORT_FRAME_MAX_SET,
	BCM_ASYNC_ENTRY_PORT_GPORT_GET,
	BCM_ASYNC_ENTRY_PORT_IFG_GET,
	BCM_ASYNC_ENTRY_PORT_IFG_SET,
	BCM_ASYNC_ENTRY_PORT_IFILTER_GET,
	BCM_ASYNC_ENTRY_PORT_IFILTER_SET,
	BCM_ASYNC_ENTRY_PORT_INFO_GET,
	BCM_ASYNC_ENTRY_PORT_INFO_RESTORE,
	BCM_ASYNC_ENTRY_PORT_INFO_SAVE,
	BCM_ASYNC_ENTRY_PORT_INFO_SET,
	BCM_ASYNC_ENTRY_PORT_INIT,
	BCM_ASYNC_ENTRY_PORT_INNER_TPID_GET,
	BCM_ASYNC_ENTRY_PORT_INNER_TPID_SET,
	BCM_ASYNC_ENTRY_PORT_INTERFACE_GET,
	BCM_ASYNC_ENTRY_PORT_INTERFACE_SET,
	BCM_ASYNC_ENTRY_PORT_IPMC_MODIFY_GET,
	BCM_ASYNC_ENTRY_PORT_IPMC_MODIFY_SET,
	BCM_ASYNC_ENTRY_PORT_JAM_GET,
	BCM_ASYNC_ENTRY_PORT_JAM_SET,
	BCM_ASYNC_ENTRY_PORT_L3_ENABLE_GET,
	BCM_ASYNC_ENTRY_PORT_L3_ENABLE_SET,
	BCM_ASYNC_ENTRY_PORT_L3_MODIFY_GET,
	BCM_ASYNC_ENTRY_PORT_L3_MODIFY_SET,
	BCM_ASYNC_ENTRY_PORT_L3_MTU_GET,
	BCM_ASYNC_ENTRY_PORT_L3_MTU_SET,
	BCM_ASYNC_ENTRY_PORT_LEARN_GET,
	BCM_ASYNC_ENTRY_PORT_LEARN_MODIFY,
	BCM_ASYNC_ENTRY_PORT_LEARN_SET,
	BCM_ASYNC_ENTRY_PORT_LINK_STATUS_GET,
	BCM_ASYNC_ENTRY_PORT_LINKSCAN_GET,
	BCM_ASYNC_ENTRY_PORT_LINKSCAN_SET,
	BCM_ASYNC_ENTRY_PORT_LOOPBACK_GET,
	BCM_ASYNC_ENTRY_PORT_LOOPBACK_SET,
	BCM_ASYNC_ENTRY_PORT_MASTER_GET,
	BCM_ASYNC_ENTRY_PORT_MASTER_SET,
	BCM_ASYNC_ENTRY_PORT_MDIX_GET,
	BCM_ASYNC_ENTRY_PORT_MDIX_SET,
	BCM_ASYNC_ENTRY_PORT_MDIX_STATUS_GET,
	BCM_ASYNC_ENTRY_PORT_MEDIUM_CONFIG_GET,
	BCM_ASYNC_ENTRY_PORT_MEDIUM_CONFIG_SET,
	BCM_ASYNC_ENTRY_PORT_MEDIUM_GET,
	BCM_ASYNC_ENTRY_PORT_MEDIUM_STATUS_REGISTER,
	BCM_ASYNC_ENTRY_PORT_MEDIUM_STATUS_UNREGISTER,
	BCM_ASYNC_ENTRY_PORT_MODID_EGRESS_GET,
	BCM_ASYNC_ENTRY_PORT_MODID_EGRESS_SET,
	BCM_ASYNC_ENTRY_PORT_MODID_ENABLE_GET,
	BCM_ASYNC_ENTRY_PORT_MODID_ENABLE_SET,
	BCM_ASYNC_ENTRY_PORT_PAUSE_ADDR_GET,
	BCM_ASYNC_ENTRY_PORT_PAUSE_ADDR_SET,
	BCM_ASYNC_ENTRY_PORT_PAUSE_GET,
	BCM_ASYNC_ENTRY_PORT_PAUSE_SET,
	BCM_ASYNC_ENTRY_PORT_PAUSE_SYM_GET,
	BCM_ASYNC_ENTRY_PORT_PAUSE_SYM_SET,
	BCM_ASYNC_ENTRY_PORT_PFM_GET,
	BCM_ASYNC_ENTRY_PORT_PFM_SET,
	BCM_ASYNC_ENTRY_PORT_PHY_CONTROL_GET,
	BCM_ASYNC_ENTRY_PORT_PHY_CONTROL_SET,
	BCM_ASYNC_ENTRY_PORT_PHY_DRV_NAME_GET,
	BCM_ASYNC_ENTRY_PORT_PHY_GET,
	BCM_ASYNC_ENTRY_PORT_PHY_RESET,
	BCM_ASYNC_ENTRY_PORT_PHY_RESET_REGISTER,
	BCM_ASYNC_ENTRY_PORT_PHY_RESET_UNREGISTER,
	BCM_ASYNC_ENTRY_PORT_PHY_SET,
	BCM_ASYNC_ENTRY_PORT_PRIORITY_COLOR_GET,
	BCM_ASYNC_ENTRY_PORT_PRIORITY_COLOR_SET,
	BCM_ASYNC_ENTRY_PORT_PROBE,
	BCM_ASYNC_ENTRY_PORT_PROTOCOL_VLAN_ADD,
	BCM_ASYNC_ENTRY_PORT_PROTOCOL_VLAN_DELETE,
	BCM_ASYNC_ENTRY_PORT_PROTOCOL_VLAN_DELETE_ALL,
	BCM_ASYNC_ENTRY_PORT_QUEUED_COUNT_GET,
	BCM_ASYNC_ENTRY_PORT_RATE_EGRESS_GET,
	BCM_ASYNC_ENTRY_PORT_RATE_EGRESS_SET,
	BCM_ASYNC_ENTRY_PORT_RATE_EGRESS_TRAFFIC_GET,
	BCM_ASYNC_ENTRY_PORT_RATE_EGRESS_TRAFFIC_SET,
	BCM_ASYNC_ENTRY_PORT_RATE_INGRESS_GET,
	BCM_ASYNC_ENTRY_PORT_RATE_INGRESS_SET,
	BCM_ASYNC_ENTRY_PORT_RATE_PAUSE_GET,
	BCM_ASYNC_ENTRY_PORT_RATE_PAUSE_SET,
	BCM_ASYNC_ENTRY_PORT_SAMPLE_RATE_GET,
	BCM_ASYNC_ENTRY_PORT_SAMPLE_RATE_SET,
	BCM_ASYNC_ENTRY_PORT_SELECTIVE_GET,
	BCM_ASYNC_ENTRY_PORT_SELECTIVE_SET,
	BCM_ASYNC_ENTRY_PORT_SPEED_GET,
	BCM_ASYNC_ENTRY_PORT_SPEED_MAX,
	BCM_ASYNC_ENTRY_PORT_SPEED_SET,
	BCM_ASYNC_ENTRY_PORT_STP_GET,
	BCM_ASYNC_ENTRY_PORT_STP_SET,
	BCM_ASYNC_ENTRY_PORT_TGID_GET,
	BCM_ASYNC_ENTRY_PORT_TGID_SET,
	BCM_ASYNC_ENTRY_PORT_TPID_ADD,
	BCM_ASYNC_ENTRY_PORT_TPID_DELETE,
	BCM_ASYNC_ENTRY_PORT_TPID_DELETE_ALL,
	BCM_ASYNC_ENTRY_PORT_TPID_GET,
	BCM_ASYNC_ENTRY_PORT_TPID_SET,
	BCM_ASYNC_ENTRY_PORT_TRUNK_INDEX_GET,
	BCM_ASYNC_ENTRY_PORT_TRUNK_INDEX_SET,
	BCM_ASYNC_ENTRY_PORT_UNTAGGED_PRIORITY_GET,
	BCM_ASYNC_ENTRY_PORT_UNTAGGED_PRIORITY_SET,
	BCM_ASYNC_ENTRY_PORT_UNTAGGED_VLAN_GET,
	BCM_ASYNC_ENTRY_PORT_UNTAGGED_VLAN_SET,
	BCM_ASYNC_ENTRY_PORT_UPDATE,
	BCM_ASYNC_ENTRY_PORT_VLAN_DSCP_MAP_GET,
	BCM_ASYNC_ENTRY_PORT_VLAN_DSCP_MAP_SET,
	BCM_ASYNC_ENTRY_PORT_VLAN_INNER_TAG_GET,
	BCM_ASYNC_ENTRY_PORT_VLAN_INNER_TAG_SET,
	BCM_ASYNC_ENTRY_PORT_VLAN_MEMBER_GET,
	BCM_ASYNC_ENTRY_PORT_VLAN_MEMBER_SET,
	BCM_ASYNC_ENTRY_PORT_VLAN_PRI_MAP_GET,
	BCM_ASYNC_ENTRY_PORT_VLAN_PRI_MAP_SET,
	BCM_ASYNC_ENTRY_PORT_VLAN_PRIORITY_MAP_GET,
	BCM_ASYNC_ENTRY_PORT_VLAN_PRIORITY_MAP_SET,
	BCM_ASYNC_ENTRY_PORT_VLAN_PRIORITY_UNMAP_GET,
	BCM_ASYNC_ENTRY_PORT_VLAN_PRIORITY_UNMAP_SET,
	BCM_ASYNC_ENTRY_PROXY_CLIENT_SET,
	BCM_ASYNC_ENTRY_PROXY_SERVER_GET,
	BCM_ASYNC_ENTRY_PROXY_SERVER_SET,
	BCM_ASYNC_ENTRY_RATE_BANDWIDTH_GET,
	BCM_ASYNC_ENTRY_RATE_BANDWIDTH_SET,
	BCM_ASYNC_ENTRY_RATE_BCAST_GET,
	BCM_ASYNC_ENTRY_RATE_BCAST_SET,
	BCM_ASYNC_ENTRY_RATE_DLFBC_GET,
	BCM_ASYNC_ENTRY_RATE_DLFBC_SET,
	BCM_ASYNC_ENTRY_RATE_GET,
	BCM_ASYNC_ENTRY_RATE_MCAST_GET,
	BCM_ASYNC_ENTRY_RATE_MCAST_SET,
	BCM_ASYNC_ENTRY_RATE_SET,
	BCM_ASYNC_ENTRY_RATE_TYPE_GET,
	BCM_ASYNC_ENTRY_RATE_TYPE_SET,
	BCM_ASYNC_ENTRY_RX_ACTIVE,
	BCM_ASYNC_ENTRY_RX_ALLOC,
	BCM_ASYNC_ENTRY_RX_BURST_GET,
	BCM_ASYNC_ENTRY_RX_BURST_SET,
	BCM_ASYNC_ENTRY_RX_CFG_GET,
	BCM_ASYNC_ENTRY_RX_CFG_INIT,
	BCM_ASYNC_ENTRY_RX_CHANNELS_RUNNING,
	BCM_ASYNC_ENTRY_RX_CLEAR,
	BCM_ASYNC_ENTRY_RX_COS_BURST_GET,
	BCM_ASYNC_ENTRY_RX_COS_BURST_SET,
	BCM_ASYNC_ENTRY_RX_COS_MAX_LEN_GET,
	BCM_ASYNC_ENTRY_RX_COS_MAX_LEN_SET,
	BCM_ASYNC_ENTRY_RX_COS_RATE_GET,
	BCM_ASYNC_ENTRY_RX_COS_RATE_SET,
	BCM_ASYNC_ENTRY_RX_COSQ_MAPPING_DELETE,
	BCM_ASYNC_ENTRY_RX_COSQ_MAPPING_GET,
	BCM_ASYNC_ENTRY_RX_COSQ_MAPPING_REASONS_GET,
	BCM_ASYNC_ENTRY_RX_COSQ_MAPPING_SET,
	BCM_ASYNC_ENTRY_RX_COSQ_MAPPING_SIZE_GET,
	BCM_ASYNC_ENTRY_RX_CPU_RATE_GET,
	BCM_ASYNC_ENTRY_RX_CPU_RATE_SET,
	BCM_ASYNC_ENTRY_RX_FREE,
	BCM_ASYNC_ENTRY_RX_FREE_ENQUEUE,
	BCM_ASYNC_ENTRY_RX_INIT,
	BCM_ASYNC_ENTRY_RX_POOL_ALLOC,
	BCM_ASYNC_ENTRY_RX_POOL_CLEANUP,
	BCM_ASYNC_ENTRY_RX_POOL_FREE,
	BCM_ASYNC_ENTRY_RX_POOL_SETUP,
	BCM_ASYNC_ENTRY_RX_POOL_SETUP_DONE,
	BCM_ASYNC_ENTRY_RX_QUEUE_CHANNEL_GET,
	BCM_ASYNC_ENTRY_RX_QUEUE_CHANNEL_SET,
	BCM_ASYNC_ENTRY_RX_QUEUE_MAX_GET,
	BCM_ASYNC_ENTRY_RX_QUEUE_PACKET_COUNT_GET,
	BCM_ASYNC_ENTRY_RX_QUEUE_RATE_LIMIT_STATUS_GET,
	BCM_ASYNC_ENTRY_RX_QUEUE_REGISTER,
	BCM_ASYNC_ENTRY_RX_QUEUE_UNREGISTER,
	BCM_ASYNC_ENTRY_RX_RATE_GET,
	BCM_ASYNC_ENTRY_RX_RATE_SET,
	BCM_ASYNC_ENTRY_RX_REASONS_GET,
	BCM_ASYNC_ENTRY_RX_REASONS_POLICER_SET,
	BCM_ASYNC_ENTRY_RX_REGISTER,
	BCM_ASYNC_ENTRY_RX_REMOTE_PKT_ALLOC,
	BCM_ASYNC_ENTRY_RX_REMOTE_PKT_ENQUEUE,
	BCM_ASYNC_ENTRY_RX_REMOTE_PKT_FREE,
	BCM_ASYNC_ENTRY_RX_SCHED_REGISTER,
	BCM_ASYNC_ENTRY_RX_SCHED_UNREGISTER,
	BCM_ASYNC_ENTRY_RX_SHOW,
	BCM_ASYNC_ENTRY_RX_START,
	BCM_ASYNC_ENTRY_RX_STOP,
	BCM_ASYNC_ENTRY_RX_UNIT_NEXT_GET,
	BCM_ASYNC_ENTRY_RX_UNREGISTER,
	BCM_ASYNC_ENTRY_STAT_CLEAR,
	BCM_ASYNC_ENTRY_STAT_CUSTOM_ADD,
	BCM_ASYNC_ENTRY_STAT_CUSTOM_CHECK,
	BCM_ASYNC_ENTRY_STAT_CUSTOM_DELETE,
	BCM_ASYNC_ENTRY_STAT_CUSTOM_DELETE_ALL,
	BCM_ASYNC_ENTRY_STAT_CUSTOM_GET,
	BCM_ASYNC_ENTRY_STAT_CUSTOM_SET,
	BCM_ASYNC_ENTRY_STAT_GET,
	BCM_ASYNC_ENTRY_STAT_GET32,
	BCM_ASYNC_ENTRY_STAT_INIT,
	BCM_ASYNC_ENTRY_STAT_SYNC,
	BCM_ASYNC_ENTRY_STG_CLEAR,
	BCM_ASYNC_ENTRY_STG_COUNT_GET,
	BCM_ASYNC_ENTRY_STG_CREATE,
	BCM_ASYNC_ENTRY_STG_CREATE_ID,
	BCM_ASYNC_ENTRY_STG_DEFAULT_GET,
	BCM_ASYNC_ENTRY_STG_DEFAULT_SET,
	BCM_ASYNC_ENTRY_STG_DESTROY,
	BCM_ASYNC_ENTRY_STG_INIT,
	BCM_ASYNC_ENTRY_STG_LIST,
	BCM_ASYNC_ENTRY_STG_LIST_DESTROY,
	BCM_ASYNC_ENTRY_STG_STP_GET,
	BCM_ASYNC_ENTRY_STG_STP_SET,
	BCM_ASYNC_ENTRY_STG_VLAN_ADD,
	BCM_ASYNC_ENTRY_STG_VLAN_LIST,
	BCM_ASYNC_ENTRY_STG_VLAN_LIST_DESTROY,
	BCM_ASYNC_ENTRY_STG_VLAN_REMOVE,
	BCM_ASYNC_ENTRY_STG_VLAN_REMOVE_ALL,
	BCM_ASYNC_ENTRY_STK_FABRIC_MAP_GET,
	BCM_ASYNC_ENTRY_STK_FABRIC_MAP_SET,
	BCM_ASYNC_ENTRY_STK_FMOD_LMOD_MAPPING_GET,
	BCM_ASYNC_ENTRY_STK_FMOD_LMOD_MAPPING_SET,
	BCM_ASYNC_ENTRY_STK_FMOD_SMOD_MAPPING_GET,
	BCM_ASYNC_ENTRY_STK_FMOD_SMOD_MAPPING_SET,
	BCM_ASYNC_ENTRY_STK_INIT,
	BCM_ASYNC_ENTRY_STK_MODE_GET,
	BCM_ASYNC_ENTRY_STK_MODE_SET,
	BCM_ASYNC_ENTRY_STK_MODID_COUNT,
	BCM_ASYNC_ENTRY_STK_MODID_GET,
	BCM_ASYNC_ENTRY_STK_MODID_SET,
	BCM_ASYNC_ENTRY_STK_MODMAP_ENABLE_GET,
	BCM_ASYNC_ENTRY_STK_MODMAP_ENABLE_SET,
	BCM_ASYNC_ENTRY_STK_MODMAP_MAP,
	BCM_ASYNC_ENTRY_STK_MODMAP_REGISTER,
	BCM_ASYNC_ENTRY_STK_MODMAP_UNREGISTER,
	BCM_ASYNC_ENTRY_STK_MODPORT_ADD,
	BCM_ASYNC_ENTRY_STK_MODPORT_CLEAR,
	BCM_ASYNC_ENTRY_STK_MODPORT_CLEAR_ALL,
	BCM_ASYNC_ENTRY_STK_MODPORT_DELETE,
	BCM_ASYNC_ENTRY_STK_MODPORT_GET,
	BCM_ASYNC_ENTRY_STK_MODPORT_SET,
	BCM_ASYNC_ENTRY_STK_MODULE_ENABLE,
	BCM_ASYNC_ENTRY_STK_MODULE_PROTOCOL_GET,
	BCM_ASYNC_ENTRY_STK_MODULE_PROTOCOL_SET,
	BCM_ASYNC_ENTRY_STK_MY_MODID_GET,
	BCM_ASYNC_ENTRY_STK_MY_MODID_SET,
	BCM_ASYNC_ENTRY_STK_PBMP_GET,
	BCM_ASYNC_ENTRY_STK_PORT_GET,
	BCM_ASYNC_ENTRY_STK_PORT_MODMAP_GROUP_GET,
	BCM_ASYNC_ENTRY_STK_PORT_MODMAP_GROUP_MAX_GET,
	BCM_ASYNC_ENTRY_STK_PORT_MODMAP_GROUP_SET,
	BCM_ASYNC_ENTRY_STK_PORT_SET,
	BCM_ASYNC_ENTRY_STK_SL_SIMPLEX_COUNT_GET,
	BCM_ASYNC_ENTRY_STK_SL_SIMPLEX_COUNT_SET,
	BCM_ASYNC_ENTRY_STK_UCBITMAP_DEL,
	BCM_ASYNC_ENTRY_STK_UCBITMAP_GET,
	BCM_ASYNC_ENTRY_STK_UCBITMAP_SET,
	BCM_ASYNC_ENTRY_STK_UPDATE_CALLBACK_REGISTER,
	BCM_ASYNC_ENTRY_STK_UPDATE_CALLBACK_UNREGISTER,
	BCM_ASYNC_ENTRY_SUBPORT_CLEANUP,
	BCM_ASYNC_ENTRY_SUBPORT_GROUP_CREATE,
	BCM_ASYNC_ENTRY_SUBPORT_GROUP_DESTROY,
	BCM_ASYNC_ENTRY_SUBPORT_GROUP_GET,
	BCM_ASYNC_ENTRY_SUBPORT_INIT,
	BCM_ASYNC_ENTRY_SUBPORT_PORT_ADD,
	BCM_ASYNC_ENTRY_SUBPORT_PORT_DELETE,
	BCM_ASYNC_ENTRY_SUBPORT_PORT_GET,
	BCM_ASYNC_ENTRY_SUBPORT_PORT_TRAVERSE,
	BCM_ASYNC_ENTRY_SWITCH_CONTROL_GET,
	BCM_ASYNC_ENTRY_SWITCH_CONTROL_PORT_GET,
	BCM_ASYNC_ENTRY_SWITCH_CONTROL_PORT_SET,
	BCM_ASYNC_ENTRY_SWITCH_CONTROL_SET,
	BCM_ASYNC_ENTRY_TOPO_PORT_GET,
	BCM_ASYNC_ENTRY_TRUNK_BITMAP_EXPAND,
	BCM_ASYNC_ENTRY_TRUNK_CHIP_INFO_GET,
	BCM_ASYNC_ENTRY_TRUNK_CREATE,
	BCM_ASYNC_ENTRY_TRUNK_CREATE_ID,
	BCM_ASYNC_ENTRY_TRUNK_DESTROY,
	BCM_ASYNC_ENTRY_TRUNK_DETACH,
	BCM_ASYNC_ENTRY_TRUNK_EGRESS_GET,
	BCM_ASYNC_ENTRY_TRUNK_EGRESS_SET,
	BCM_ASYNC_ENTRY_TRUNK_FIND,
	BCM_ASYNC_ENTRY_TRUNK_GET,
	BCM_ASYNC_ENTRY_TRUNK_INIT,
	BCM_ASYNC_ENTRY_TRUNK_MCAST_JOIN,
	BCM_ASYNC_ENTRY_TRUNK_OVERRIDE_IPMC_GET,
	BCM_ASYNC_ENTRY_TRUNK_OVERRIDE_IPMC_SET,
	BCM_ASYNC_ENTRY_TRUNK_OVERRIDE_MCAST_GET,
	BCM_ASYNC_ENTRY_TRUNK_OVERRIDE_MCAST_SET,
	BCM_ASYNC_ENTRY_TRUNK_OVERRIDE_UCAST_GET,
	BCM_ASYNC_ENTRY_TRUNK_OVERRIDE_UCAST_SET,
	BCM_ASYNC_ENTRY_TRUNK_OVERRIDE_VLAN_GET,
	BCM_ASYNC_ENTRY_TRUNK_OVERRIDE_VLAN_SET,
	BCM_ASYNC_ENTRY_TRUNK_POOL_GET,
	BCM_ASYNC_ENTRY_TRUNK_POOL_SET,
	BCM_ASYNC_ENTRY_TRUNK_PSC_GET,
	BCM_ASYNC_ENTRY_TRUNK_PSC_SET,
	BCM_ASYNC_ENTRY_TRUNK_SET,
	BCM_ASYNC_ENTRY_TUNNEL_CONFIG_GET,
	BCM_ASYNC_ENTRY_TUNNEL_CONFIG_SET,
	BCM_ASYNC_ENTRY_TUNNEL_DSCP_MAP_CREATE,
	BCM_ASYNC_ENTRY_TUNNEL_DSCP_MAP_DESTROY,
	BCM_ASYNC_ENTRY_TUNNEL_DSCP_MAP_GET,
	BCM_ASYNC_ENTRY_TUNNEL_DSCP_MAP_PORT_GET,
	BCM_ASYNC_ENTRY_TUNNEL_DSCP_MAP_PORT_SET,
	BCM_ASYNC_ENTRY_TUNNEL_DSCP_MAP_SET,
	BCM_ASYNC_ENTRY_TUNNEL_INITIATOR_CLEAR,
	BCM_ASYNC_ENTRY_TUNNEL_INITIATOR_GET,
	BCM_ASYNC_ENTRY_TUNNEL_INITIATOR_SET,
	BCM_ASYNC_ENTRY_TUNNEL_TERMINATOR_ADD,
	BCM_ASYNC_ENTRY_TUNNEL_TERMINATOR_DELETE,
	BCM_ASYNC_ENTRY_TUNNEL_TERMINATOR_GET,
	BCM_ASYNC_ENTRY_TUNNEL_TERMINATOR_UPDATE,
	BCM_ASYNC_ENTRY_TX,
	BCM_ASYNC_ENTRY_TX_ARRAY,
	BCM_ASYNC_ENTRY_TX_CPU_TUNNEL,
	BCM_ASYNC_ENTRY_TX_CPU_TUNNEL_GET,
	BCM_ASYNC_ENTRY_TX_CPU_TUNNEL_SET,
	BCM_ASYNC_ENTRY_TX_DV_DUMP,
	BCM_ASYNC_ENTRY_TX_INIT,
	BCM_ASYNC_ENTRY_TX_LIST,
	BCM_ASYNC_ENTRY_TX_PKT_L2_MAP,
	BCM_ASYNC_ENTRY_TX_PKT_SETUP,
	BCM_ASYNC_ENTRY_TX_SHOW,
	BCM_ASYNC_ENTRY_VLAN_CONTROL_GET,
	BCM_ASYNC_ENTRY_VLAN_CONTROL_PORT_GET,
	BCM_ASYNC_ENTRY_VLAN_CONTROL_PORT_SET,
	BCM_ASYNC_ENTRY_VLAN_CONTROL_SET,
	BCM_ASYNC_ENTRY_VLAN_CONTROL_VLAN_GET,
	BCM_ASYNC_ENTRY_VLAN_CONTROL_VLAN_SET,
	BCM_ASYNC_ENTRY_VLAN_CREATE,
	BCM_ASYNC_ENTRY_VLAN_CROSS_CONNECT_ADD,
	BCM_ASYNC_ENTRY_VLAN_CROSS_CONNECT_DELETE,
	BCM_ASYNC_ENTRY_VLAN_CROSS_CONNECT_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_CROSS_CONNECT_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_DEFAULT_GET,
	BCM_ASYNC_ENTRY_VLAN_DEFAULT_SET,
	BCM_ASYNC_ENTRY_VLAN_DESTROY,
	BCM_ASYNC_ENTRY_VLAN_DESTROY_ALL,
	BCM_ASYNC_ENTRY_VLAN_DTAG_ADD,
	BCM_ASYNC_ENTRY_VLAN_DTAG_DELETE,
	BCM_ASYNC_ENTRY_VLAN_DTAG_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_DTAG_GET,
	BCM_ASYNC_ENTRY_VLAN_DTAG_RANGE_ADD,
	BCM_ASYNC_ENTRY_VLAN_DTAG_RANGE_DELETE,
	BCM_ASYNC_ENTRY_VLAN_DTAG_RANGE_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_DTAG_RANGE_GET,
	BCM_ASYNC_ENTRY_VLAN_DTAG_RANGE_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_DTAG_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_INIT,
	BCM_ASYNC_ENTRY_VLAN_IP4_ADD,
	BCM_ASYNC_ENTRY_VLAN_IP4_DELETE,
	BCM_ASYNC_ENTRY_VLAN_IP4_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_IP_ACTION_ADD,
	BCM_ASYNC_ENTRY_VLAN_IP_ADD,
	BCM_ASYNC_ENTRY_VLAN_IP_DELETE,
	BCM_ASYNC_ENTRY_VLAN_IP_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_LIST,
	BCM_ASYNC_ENTRY_VLAN_LIST_BY_PBMP,
	BCM_ASYNC_ENTRY_VLAN_LIST_DESTROY,
	BCM_ASYNC_ENTRY_VLAN_MAC_ACTION_ADD,
	BCM_ASYNC_ENTRY_VLAN_MAC_ADD,
	BCM_ASYNC_ENTRY_VLAN_MAC_DELETE,
	BCM_ASYNC_ENTRY_VLAN_MAC_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_MCAST_FLOOD_GET,
	BCM_ASYNC_ENTRY_VLAN_MCAST_FLOOD_SET,
	BCM_ASYNC_ENTRY_VLAN_POLICER_GET,
	BCM_ASYNC_ENTRY_VLAN_POLICER_SET,
	BCM_ASYNC_ENTRY_VLAN_PORT_ADD,
	BCM_ASYNC_ENTRY_VLAN_PORT_CREATE,
	BCM_ASYNC_ENTRY_VLAN_PORT_DEFAULT_ACTION_GET,
	BCM_ASYNC_ENTRY_VLAN_PORT_DEFAULT_ACTION_SET,
	BCM_ASYNC_ENTRY_VLAN_PORT_DESTROY,
	BCM_ASYNC_ENTRY_VLAN_PORT_EGRESS_DEFAULT_ACTION_GET,
	BCM_ASYNC_ENTRY_VLAN_PORT_EGRESS_DEFAULT_ACTION_SET,
	BCM_ASYNC_ENTRY_VLAN_PORT_GET,
	BCM_ASYNC_ENTRY_VLAN_PORT_PROTOCOL_ACTION_ADD,
	BCM_ASYNC_ENTRY_VLAN_PORT_REMOVE,
	BCM_ASYNC_ENTRY_VLAN_STAT_ENABLE_SET,
	BCM_ASYNC_ENTRY_VLAN_STAT_GET,
	BCM_ASYNC_ENTRY_VLAN_STAT_GET32,
	BCM_ASYNC_ENTRY_VLAN_STAT_SET,
	BCM_ASYNC_ENTRY_VLAN_STAT_SET32,
	BCM_ASYNC_ENTRY_VLAN_STG_GET,
	BCM_ASYNC_ENTRY_VLAN_STG_SET,
	BCM_ASYNC_ENTRY_VLAN_STP_GET,
	BCM_ASYNC_ENTRY_VLAN_STP_SET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_ADD,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_DELETE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_RANGE_ADD,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_RANGE_DELETE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_RANGE_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_RANGE_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_RANGE_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ACTION_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_ADD,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_DELETE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_ACTION_ADD,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_ACTION_DELETE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_ACTION_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_ACTION_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_ADD,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_DELETE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_EGRESS_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_RANGE_ADD,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_RANGE_DELETE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_RANGE_DELETE_ALL,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_RANGE_GET,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_RANGE_TRAVERSE,
	BCM_ASYNC_ENTRY_VLAN_TRANSLATE_TRAVERSE,
	BCM_ASYNC_ENTRY_VPLS_BITMAP_ADD,
	BCM_ASYNC_ENTRY_VPLS_BITMAP_DELETE,
	BCM_ASYNC_ENTRY_VPLS_BITMAP_DELETE_ALL,
	BCM_ASYNC_ENTRY_VPLS_BITMAP_DETACH,
	BCM_ASYNC_ENTRY_VPLS_BITMAP_GET,
	BCM_ASYNC_ENTRY_VPLS_BITMAP_INIT,
	BCM_ASYNC_ENTRY_VSWITCH_CREATE,
	BCM_ASYNC_ENTRY_VSWITCH_CREATE_WITH_ID,
	BCM_ASYNC_ENTRY_VSWITCH_DESTROY,
	BCM_ASYNC_ENTRY_VSWITCH_DETACH,
	BCM_ASYNC_ENTRY_VSWITCH_INIT,
	BCM_ASYNC_ENTRY_VSWITCH_PORT_ADD,
	BCM_ASYNC_ENTRY_VSWITCH_PORT_DELETE,
	BCM_ASYNC_ENTRY_VSWITCH_PORT_DELETE_ALL,
	BCM_ASYNC_ENTRY_VSWITCH_PORT_GET,
	BCM_ASYNC_ENTRY_COUNT
} bcm_async_entry_t;

#endif	/* BCM_ASYNC_SUPPORT */
#endif	/* !_BCM_INT_ASYNC_REQ_H */
