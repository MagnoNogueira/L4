/*
 * $Id: port.h,v 1.103.2.12.6.1 Broadcom SDK $
 * 
 * $Copyright: Copyright 2008 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR U.S. $1,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __BCM_PORT_H__
#define __BCM_PORT_H__

#include <shared/portmode.h>
#include <shared/port.h>
#include <shared/phyconfig.h>
#include <shared/phyreg.h>
#include <bcm/types.h>
#include <shared/port_ability.h>

/* Port Configuration structure. */
typedef struct bcm_port_config_s {
    bcm_pbmp_t fe;          /* Mask of FE ports. */
    bcm_pbmp_t ge;          /* Mask of GE ports. */
    bcm_pbmp_t xe;          /* Mask of 10gig ports. */
    bcm_pbmp_t e;           /* Mask of eth ports. */
    bcm_pbmp_t hg;          /* Mask of Higig ports. */
    bcm_pbmp_t sci;         /* Mask of SCI ports. */
    bcm_pbmp_t sfi;         /* Mask of SFI ports. */
    bcm_pbmp_t spi;         /* Mask of SPI ports. */
    bcm_pbmp_t spi_subport; /* Mask of SPI subports. */
    bcm_pbmp_t port;        /* Mask of all front panel ports. */
    bcm_pbmp_t cpu;         /* Mask of CPU ports. */
    bcm_pbmp_t all;         /* Mask of all ports. */
    bcm_pbmp_t stack_int;   /* Deprecated - unused. */
    bcm_pbmp_t stack_ext;   /* Mask of Stack ports. */
} bcm_port_config_t;

/* Port ability */
typedef _shr_port_ability_t bcm_port_ability_t;

#define BCM_PORT_ABILITY_10MB               _SHR_PA_SPEED_10MB 
#define BCM_PORT_ABILITY_100MB              _SHR_PA_SPEED_100MB 
#define BCM_PORT_ABILITY_1000MB             _SHR_PA_SPEED_1000MB 
#define BCM_PORT_ABILITY_2500MB             _SHR_PA_SPEED_2500MB 
#define BCM_PORT_ABILITY_3000MB             _SHR_PA_SPEED_3000MB 
#define BCM_PORT_ABILITY_5000MB             _SHR_PA_SPEED_5000MB 
#define BCM_PORT_ABILITY_6000MB             _SHR_PA_SPEED_6000MB 
#define BCM_PORT_ABILITY_10GB               _SHR_PA_SPEED_10GB 
#define BCM_PORT_ABILITY_12GB               _SHR_PA_SPEED_12GB 
#define BCM_PORT_ABILITY_12P5GB             _SHR_PA_SPEED_12P5GB 
#define BCM_PORT_ABILITY_13GB               _SHR_PA_SPEED_13GB 
#define BCM_PORT_ABILITY_15GB               _SHR_PA_SPEED_15GB 
#define BCM_PORT_ABILITY_16GB               _SHR_PA_SPEED_16GB 
#define BCM_PORT_ABILITY_20GB               _SHR_PA_SPEED_20GB 
#define BCM_PORT_ABILITY_21GB               _SHR_PA_SPEED_21GB 
#define BCM_PORT_ABILITY_25GB               _SHR_PA_SPEED_25GB 
#define BCM_PORT_ABILITY_INTERFACE_TBI      _SHR_PA_INTF_TBI 
#define BCM_PORT_ABILITY_INTERFACE_MII      _SHR_PA_INTF_MII 
#define BCM_PORT_ABILITY_INTERFACE_GMII     _SHR_PA_INTF_GMII 
#define BCM_PORT_ABILITY_INTERFACE_SGMII    _SHR_PA_INTF_SGMII 
#define BCM_PORT_ABILITY_INTERFACE_XGMII    _SHR_PA_INTF_XGMII 
#define BCM_PORT_ABILITY_INTERFACE_QSGMII   _SHR_PA_INTF_QSGMII 
#define BCM_PORT_ABILITY_LB_NONE            _SHR_PA_LB_NONE 
#define BCM_PORT_ABILITY_LB_MAC             _SHR_PA_LB_MAC 
#define BCM_PORT_ABILITY_LB_PHY             _SHR_PA_LB_PHY 
#define BCM_PORT_ABILITY_LB_LINE            _SHR_PA_LB_LINE 
#define BCM_PORT_ABILITY_AUTONEG            _SHR_PA_AUTONEG 
#define BCM_PORT_ABILITY_COMBO              _SHR_PA_COMBO 
#define BCM_PORT_ABILITY_PAUSE_TX           _SHR_PA_PAUSE_TX 
#define BCM_PORT_ABILITY_PAUSE_RX           _SHR_PA_PAUSE_RX 
#define BCM_PORT_ABILITY_PAUSE              _SHR_PA_PAUSE /* Both TX and RX. */
#define BCM_PORT_ABILITY_PAUSE_ASYMM        _SHR_PA_PAUSE_ASYMM /* The following is used
                                                          only by
                                                          bcm_port_ability_get,
                                                          and indicates that a
                                                          port can support
                                                          having PAUSE_TX be
                                                          different than
                                                          PAUSE_RX. */

/* 
 * Port ability mask.
 * 
 * The following flags are used to indicate which set of capabilities are
 * provided by a PHY or MAC when retrieving the ability of a port,
 * setting or getting the local advertisement, getting the remote
 * advertisement, or setting the MAC encapsulation and/or CRC modes.
 */
typedef _shr_port_mode_t bcm_port_abil_t;

#define BCM_PORT_ABIL_10MB_HD       _SHR_PM_10MB_HD 
#define BCM_PORT_ABIL_10MB_FD       _SHR_PM_10MB_FD 
#define BCM_PORT_ABIL_100MB_HD      _SHR_PM_100MB_HD 
#define BCM_PORT_ABIL_100MB_FD      _SHR_PM_100MB_FD 
#define BCM_PORT_ABIL_1000MB_HD     _SHR_PM_1000MB_HD 
#define BCM_PORT_ABIL_1000MB_FD     _SHR_PM_1000MB_FD 
#define BCM_PORT_ABIL_2500MB_HD     _SHR_PM_2500MB_HD 
#define BCM_PORT_ABIL_2500MB_FD     _SHR_PM_2500MB_FD 
#define BCM_PORT_ABIL_3000MB_HD     _SHR_PM_3000MB_HD 
#define BCM_PORT_ABIL_3000MB_FD     _SHR_PM_3000MB_FD 
#define BCM_PORT_ABIL_10GB_HD       _SHR_PM_10GB_HD 
#define BCM_PORT_ABIL_10GB_FD       _SHR_PM_10GB_FD 
#define BCM_PORT_ABIL_12GB_HD       _SHR_PM_12GB_HD 
#define BCM_PORT_ABIL_12GB_FD       _SHR_PM_12GB_FD 
#define BCM_PORT_ABIL_13GB_HD       _SHR_PM_13GB_HD 
#define BCM_PORT_ABIL_13GB_FD       _SHR_PM_13GB_FD 
#define BCM_PORT_ABIL_16GB_HD       _SHR_PM_16GB_HD 
#define BCM_PORT_ABIL_16GB_FD       _SHR_PM_16GB_FD 
#define BCM_PORT_ABIL_TBI           _SHR_PM_TBI 
#define BCM_PORT_ABIL_MII           _SHR_PM_MII 
#define BCM_PORT_ABIL_GMII          _SHR_PM_GMII 
#define BCM_PORT_ABIL_SGMII         _SHR_PM_SGMII 
#define BCM_PORT_ABIL_XGMII         _SHR_PM_XGMII 
#define BCM_PORT_ABIL_LB_MAC        _SHR_PM_LB_MAC 
#define BCM_PORT_ABIL_LB_PHY        _SHR_PM_LB_PHY 
#define BCM_PORT_ABIL_LB_NONE       _SHR_PM_LB_NONE 
#define BCM_PORT_ABIL_AN            _SHR_PM_AN 
#define BCM_PORT_ABIL_COMBO         _SHR_PM_COMBO 
#define BCM_PORT_ABIL_PAUSE_TX      _SHR_PM_PAUSE_TX 
#define BCM_PORT_ABIL_PAUSE_RX      _SHR_PM_PAUSE_RX 
#define BCM_PORT_ABIL_PAUSE         _SHR_PM_PAUSE /* Both TX and RX. */
#define BCM_PORT_ABIL_10B           BCM_PORT_ABIL_TBI /* Deprecated */
#define BCM_PORT_ABIL_PAUSE_ASYMM   _SHR_PM_PAUSE_ASYMM /* The following is used only by
                                                  bcm_port_ability_get, and
                                                  indicates that a port can
                                                  support having PAUSE_TX be
                                                  different than PAUSE_RX. */
#define BCM_PORT_ABIL_10MB          _SHR_PM_10MB 
#define BCM_PORT_ABIL_100MB         _SHR_PM_100MB 
#define BCM_PORT_ABIL_1000MB        _SHR_PM_1000MB 
#define BCM_PORT_ABIL_2500MB        _SHR_PM_2500MB 
#define BCM_PORT_ABIL_3000MB        _SHR_PM_3000MB 
#define BCM_PORT_ABIL_10GB          _SHR_PM_10GB 
#define BCM_PORT_ABIL_12GB          _SHR_PM_12GB 
#define BCM_PORT_ABIL_13GB          _SHR_PM_13GB 
#define BCM_PORT_ABIL_16GB          _SHR_PM_16GB 
#define BCM_PORT_ABIL_HD            _SHR_PM_HD 
#define BCM_PORT_ABIL_FD            _SHR_PM_FD 
#define BCM_PORT_ABIL_SPD_ANY       _SHR_PM_SPEED_ALL 

#define BCM_PORT_ABIL_SPD_MAX(abil)  \
    _SHR_PM_SPEED_MAX(abil) 

#define BCM_PORT_ABILITY_SPEED_MAX(abil)  _SHR_PA_SPEED_MAX(abil) 

/* Initialize the port subsystem. */
extern int bcm_port_init(
    int unit);

/* 
 * Initialize the port subsystem without affecting the current state of
 * stack ports.
 */
extern int bcm_port_clear(
    int unit);

/* Probe the port to determine the proper MAC and PHY drivers. */
extern int bcm_port_probe(
    int unit, 
    bcm_pbmp_t pbmp, 
    bcm_pbmp_t *okay_pbmp);

/* Detach ports from the BCM API. */
extern int bcm_port_detach(
    int unit, 
    bcm_pbmp_t pbmp, 
    bcm_pbmp_t *detached);

/* 
 * Retrieved the port configuration for the specified device or for all
 * ports known to bcmx.
 */
extern int bcm_port_config_get(
    int unit, 
    bcm_port_config_t *config);

/* Enable or disable a port. */
extern int bcm_port_enable_set(
    int unit, 
    bcm_port_t port, 
    int enable);

/* Enable or disable a port. */
extern int bcm_port_enable_get(
    int unit, 
    bcm_port_t port, 
    int *enable);

/* Set or retrieve autonegotiation settings for a port. */
extern int bcm_port_advert_set(
    int unit, 
    bcm_port_t port, 
    bcm_port_abil_t ability_mask);

/* Set or retrieve autonegotiation settings for a port. */
extern int bcm_port_ability_advert_set(
    int unit, 
    bcm_port_t port, 
    bcm_port_ability_t *ability_mask);

/* Set or retrieve autonegotiation settings for a port. */
extern int bcm_port_advert_get(
    int unit, 
    bcm_port_t port, 
    bcm_port_abil_t *ability_mask);

/* Set or retrieve autonegotiation settings for a port. */
extern int bcm_port_ability_advert_get(
    int unit, 
    bcm_port_t port, 
    bcm_port_ability_t *ability_mask);

/* Set or retrieve autonegotiation settings for a port. */
extern int bcm_port_advert_remote_get(
    int unit, 
    bcm_port_t port, 
    bcm_port_abil_t *ability_mask);

/* Set or retrieve autonegotiation settings for a port. */
extern int bcm_port_ability_remote_get(
    int unit, 
    bcm_port_t port, 
    bcm_port_ability_t *ability_mask);

/* 
 * Retrieve the valid operating modes of a port including speed and
 * duplex.
 */
extern int bcm_port_ability_get(
    int unit, 
    bcm_port_t port, 
    bcm_port_abil_t *local_ability_mask);

/* 
 * Retrieve the valid operating modes of a port including speed and
 * duplex.
 */
extern int bcm_port_ability_local_get(
    int unit, 
    bcm_port_t port, 
    bcm_port_ability_t *local_ability_mask);

/* Backward compatibility. */
#define bcm_port_remote_advert_get  bcm_port_advert_remote_get 

/* Get or set the default vlan for packets that ingress untagged. */
extern int bcm_port_untagged_vlan_set(
    int unit, 
    bcm_port_t port, 
    bcm_vlan_t vid);

/* Get or set the default vlan for packets that ingress untagged. */
extern int bcm_port_untagged_vlan_get(
    int unit, 
    bcm_port_t port, 
    bcm_vlan_t *vid_ptr);

/* Get or set the default priority for packets that ingress untagged. */
extern int bcm_port_untagged_priority_set(
    int unit, 
    bcm_port_t port, 
    int priority);

/* Get or set the default priority for packets that ingress untagged. */
extern int bcm_port_untagged_priority_get(
    int unit, 
    bcm_port_t port, 
    int *priority);

#define BCM_PORT_DSCP_MAP_NONE  0          /* Disable DSCP mapping */
#define BCM_PORT_DSCP_MAP_ZERO  1          /* Map only if incoming DSCP = 0. */
#define BCM_PORT_DSCP_MAP_ALL   2          /* Map all. */

/* Control mapping of Differentiated Services Code Points (DSCP). */
extern int bcm_port_dscp_map_mode_set(
    int unit, 
    bcm_port_t port, 
    int mode);

/* Control mapping of Differentiated Services Code Points (DSCP). */
extern int bcm_port_dscp_map_mode_get(
    int unit, 
    bcm_port_t port, 
    int *mode);

/* Control mapping of Differentiated Services Code Points (DSCP). */
extern int bcm_port_dscp_map_set(
    int unit, 
    bcm_port_t port, 
    int srccp, 
    int mapcp, 
    int prio);

/* Control mapping of Differentiated Services Code Points (DSCP). */
extern int bcm_port_dscp_map_get(
    int unit, 
    bcm_port_t port, 
    int srccp, 
    int *mapcp, 
    int *prio);

/* Get or set the current linkscan mode for the specified port. */
extern int bcm_port_linkscan_set(
    int unit, 
    bcm_port_t port, 
    int linkscan);

/* Get or set the current linkscan mode for the specified port. */
extern int bcm_port_linkscan_get(
    int unit, 
    bcm_port_t port, 
    int *linkscan);

/* 
 * Configure or retrieve the current autonegotiation settings for a port,
 * or restart autonegotiation if already enabled.
 */
extern int bcm_port_autoneg_set(
    int unit, 
    bcm_port_t port, 
    int autoneg);

/* 
 * Configure or retrieve the current autonegotiation settings for a port,
 * or restart autonegotiation if already enabled.
 */
extern int bcm_port_autoneg_get(
    int unit, 
    bcm_port_t port, 
    int *autoneg);

/* Get or set the current operating speed of a port. */
extern int bcm_port_speed_max(
    int unit, 
    bcm_port_t port, 
    int *speed);

/* Get or set the current operating speed of a port. */
extern int bcm_port_speed_set(
    int unit, 
    bcm_port_t port, 
    int speed);

/* Get or set the current operating speed of a port. */
extern int bcm_port_speed_get(
    int unit, 
    bcm_port_t port, 
    int *speed);

/* bcm_port_ms_t */
typedef _shr_port_ms_t bcm_port_ms_t;

#define BCM_PORT_MS_SLAVE       _SHR_PORT_MS_SLAVE 
#define BCM_PORT_MS_MASTER      _SHR_PORT_MS_MASTER 
#define BCM_PORT_MS_AUTO        _SHR_PORT_MS_AUTO 
#define BCM_PORT_MS_NONE        _SHR_PORT_MS_NONE 
#define BCM_PORT_MS_COUNT       _SHR_PORT_MS_COUNT 

/* Set or get the Master mode on the PHY attached to the specified port. */
extern int bcm_port_master_set(
    int unit, 
    bcm_port_t port, 
    int ms);

/* Set or get the Master mode on the PHY attached to the specified port. */
extern int bcm_port_master_get(
    int unit, 
    bcm_port_t port, 
    int *ms);

/* bcm_port_if_t */
typedef _shr_port_if_t bcm_port_if_t;

#define BCM_PORT_IF_NOCXN       _SHR_PORT_IF_NOCXN 
#define BCM_PORT_IF_NULL        _SHR_PORT_IF_NULL 
#define BCM_PORT_IF_MII         _SHR_PORT_IF_MII 
#define BCM_PORT_IF_GMII        _SHR_PORT_IF_GMII 
#define BCM_PORT_IF_SGMII       _SHR_PORT_IF_SGMII 
#define BCM_PORT_IF_TBI         _SHR_PORT_IF_TBI 
#define BCM_PORT_IF_XGMII       _SHR_PORT_IF_XGMII 
#define BCM_PORT_IF_RGMII       _SHR_PORT_IF_RGMII 
#define BCM_PORT_IF_COUNT       _SHR_PORT_IF_COUNT 

#define BCM_PORT_IF_10B         BCM_PORT_IF_TBI /* Deprecated */

/* 
 * Configure the physical interface between the MAC and the PHY for the
 * specified port.
 */
extern int bcm_port_interface_set(
    int unit, 
    bcm_port_t port, 
    bcm_port_if_t intf);

/* 
 * Configure the physical interface between the MAC and the PHY for the
 * specified port.
 */
extern int bcm_port_interface_get(
    int unit, 
    bcm_port_t port, 
    bcm_port_if_t *intf);

/* bcm_port_duplex_t */
typedef _shr_port_duplex_t bcm_port_duplex_t;

#define BCM_PORT_DUPLEX_HALF    _SHR_PORT_DUPLEX_HALF 
#define BCM_PORT_DUPLEX_FULL    _SHR_PORT_DUPLEX_FULL 
#define BCM_PORT_DUPLEX_COUNT   _SHR_PORT_DUPLEX_COUNT 

/* Port pause modes (mainly used by the BCMX layer). */
typedef enum bcm_port_pause_e {
    BCM_PORT_PAUSE_NONE, 
    BCM_PORT_PAUSE_ASYM_RX, 
    BCM_PORT_PAUSE_ASYM_TX, 
    BCM_PORT_PAUSE_SYM 
} bcm_port_pause_t;

/* Get or set the current duplex mode of a port. */
extern int bcm_port_duplex_set(
    int unit, 
    bcm_port_t port, 
    int duplex);

/* Get or set the current duplex mode of a port. */
extern int bcm_port_duplex_get(
    int unit, 
    bcm_port_t port, 
    int *duplex);

/* 
 * Enable or disable transmission of pause frames and honoring received
 * pause frames on a port.
 */
extern int bcm_port_pause_set(
    int unit, 
    bcm_port_t port, 
    int pause_tx, 
    int pause_rx);

/* 
 * Enable or disable transmission of pause frames and honoring received
 * pause frames on a port.
 */
extern int bcm_port_pause_get(
    int unit, 
    bcm_port_t port, 
    int *pause_tx, 
    int *pause_rx);

/* 
 * Get or set the source MAC address transmitted in MAC control pause
 * frames.
 */
extern int bcm_port_pause_addr_set(
    int unit, 
    bcm_port_t port, 
    bcm_mac_t mac);

/* 
 * Get or set the source MAC address transmitted in MAC control pause
 * frames.
 */
extern int bcm_port_pause_addr_get(
    int unit, 
    bcm_port_t port, 
    bcm_mac_t mac);

/* Configure or retrieve asymmetric pause setting for a port. */
extern int bcm_port_pause_sym_set(
    int unit, 
    bcm_port_t port, 
    int pause);

/* Configure or retrieve asymmetric pause setting for a port. */
extern int bcm_port_pause_sym_get(
    int unit, 
    bcm_port_t port, 
    int *pause);

/* Backward compatibility. */
#define bcm_port_sym_pause_set  bcm_port_pause_sym_set 
#define bcm_port_sym_pause_get  bcm_port_pause_sym_get 

/* Process a link change event and perform required device configuration. */
extern int bcm_port_update(
    int unit, 
    bcm_port_t port, 
    int link);

/* Set or retrieve the current maximum packet size permitted on a port. */
extern int bcm_port_frame_max_set(
    int unit, 
    bcm_port_t port, 
    int size);

/* Set or retrieve the current maximum packet size permitted on a port. */
extern int bcm_port_frame_max_get(
    int unit, 
    bcm_port_t port, 
    int *size);

/* 
 * Set or retrieve the current maximum L3 packet size permitted on a
 * port.
 */
extern int bcm_port_l3_mtu_set(
    int unit, 
    bcm_port_t port, 
    int size);

/* 
 * Set or retrieve the current maximum L3 packet size permitted on a
 * port.
 */
extern int bcm_port_l3_mtu_get(
    int unit, 
    bcm_port_t port, 
    int *size);

/* Get or set half duplex flow control (jam) for a port. */
extern int bcm_port_jam_set(
    int unit, 
    bcm_port_t port, 
    int enable);

/* Get or set half duplex flow control (jam) for a port. */
extern int bcm_port_jam_get(
    int unit, 
    bcm_port_t port, 
    int *enable);

/* Get or set the interframe gap settings for the specified port. */
extern int bcm_port_ifg_set(
    int unit, 
    bcm_port_t port, 
    int speed, 
    bcm_port_duplex_t duplex, 
    int bit_times);

/* Get or set the interframe gap settings for the specified port. */
extern int bcm_port_ifg_get(
    int unit, 
    bcm_port_t port, 
    int speed, 
    bcm_port_duplex_t duplex, 
    int *bit_times);

/* Values for flags parameter of bcm_port_force_vlan_set/get. */
#define BCM_PORT_FORCE_VLAN_ENABLE  0x01       /* Enable force VLAN on this
                                                  port. */
#define BCM_PORT_FORCE_VLAN_UNTAG   0x02       /* Egress untagged when force
                                                  VLAN is enabled on this port. */

/* Set/Get force vlan attribute of a port. */
extern int bcm_port_force_vlan_set(
    int unit, 
    bcm_port_t port, 
    bcm_vlan_t vlan, 
    int pkt_prio, 
    uint32 flags);

/* Set/Get force vlan attribute of a port. */
extern int bcm_port_force_vlan_get(
    int unit, 
    bcm_port_t port, 
    bcm_vlan_t *vlan, 
    int *pkt_prio, 
    uint32 *flags);

/* Flags for direct PHY register access. */
#define BCM_PORT_PHY_INTERNAL   _SHR_PORT_PHY_INTERNAL 
#define BCM_PORT_PHY_NOMAP      _SHR_PORT_PHY_NOMAP 
#define BCM_PORT_PHY_CLAUSE45   _SHR_PORT_PHY_CLAUSE45 

#define BCM_PORT_PHY_CLAUSE45_ADDR(_devad, _regad)  \
    _SHR_PORT_PHY_CLAUSE45_ADDR(_devad, _regad) 

#define BCM_PORT_PHY_CLAUSE45_DEVAD(_reg_addr)  \
    _SHR_PORT_PHY_CLAUSE45_DEVAD(_reg_addr) 

#define BCM_PORT_PHY_CLAUSE45_REGAD(_reg_addr)  \
    _SHR_PORT_PHY_CLAUSE45_REGAD(_reg_addr) 

/* Flags for indirect PHY register access. */
#define BCM_PORT_PHY_REG_1000X  _SHR_PORT_PHY_REG_1000X 

#define BCM_PORT_PHY_REG_INDIRECT_ADDR(_flags, _reg_type, _reg_selector)  \
    _SHR_PORT_PHY_REG_INDIRECT_ADDR(_flags, _reg_type, _reg_selector) 

#define BCM_PORT_PHY_REG_FLAGS(_reg_addr)  _SHR_PORT_PHY_REG_FLAGS(_reg_addr) 

#define BCM_PORT_PHY_REG_BANK(_reg_addr)  _SHR_PORT_PHY_REG_BANK(_reg_addr) 

#define BCM_PORT_PHY_REG_ADDR(_reg_addr)  _SHR_PORT_PHY_REG_ADDR(_reg_addr) 

/* Read or write phy registers associated with a port. */
extern int bcm_port_phy_set(
    int unit, 
    bcm_port_t port, 
    uint32 flags, 
    uint32 phy_reg_addr, 
    uint32 phy_data);

/* Read or write phy registers associated with a port. */
extern int bcm_port_phy_get(
    int unit, 
    bcm_port_t port, 
    uint32 flags, 
    uint32 phy_reg_addr, 
    uint32 *phy_data);

/* PHY reset callback function prototype. */
typedef _shr_port_phy_reset_cb_t bcm_port_phy_reset_cb_t;

/* Register or unregister a callout to post process PHY resets. */
extern int bcm_port_phy_reset_register(
    int unit, 
    bcm_port_t port, 
    bcm_port_phy_reset_cb_t callback, 
    void *user_data);

/* Register or unregister a callout to post process PHY resets. */
extern int bcm_port_phy_reset_unregister(
    int unit, 
    bcm_port_t port, 
    bcm_port_phy_reset_cb_t callback, 
    void *user_data);

/* Perform low level PHY reset. */
extern int bcm_port_phy_reset(
    int unit, 
    bcm_port_t port);

/* MDI crossover control. */
typedef _shr_port_mdix_t bcm_port_mdix_t;

/* MDI crossover control values. */
#define BCM_PORT_MDIX_AUTO          _SHR_PORT_MDIX_AUTO 
#define BCM_PORT_MDIX_FORCE_AUTO    _SHR_PORT_MDIX_FORCE_AUTO 
#define BCM_PORT_MDIX_NORMAL        _SHR_PORT_MDIX_NORMAL 
#define BCM_PORT_MDIX_XOVER         _SHR_PORT_MDIX_XOVER 
#define BCM_PORT_MDIX_COUNT         _SHR_PORT_MDIX_COUNT 

/* MDI crossover status. */
typedef _shr_port_mdix_status_t bcm_port_mdix_status_t;

/* MDI crossover status values. */
#define BCM_PORT_MDIX_STATUS_NORMAL _SHR_PORT_MDIX_STATUS_NORMAL 
#define BCM_PORT_MDIX_STATUS_XOVER  _SHR_PORT_MDIX_STATUS_XOVER 
#define BCM_PORT_MDIX_STATUS_COUNT  _SHR_PORT_MDIX_STATUS_COUNT 

/* Get or set the Auto MDIX mode for a port. */
extern int bcm_port_mdix_set(
    int unit, 
    bcm_port_t port, 
    bcm_port_mdix_t mode);

/* Get or set the Auto MDIX mode for a port. */
extern int bcm_port_mdix_get(
    int unit, 
    bcm_port_t port, 
    bcm_port_mdix_t *mode);

/* Get or set the Auto MDIX mode for a port. */
extern int bcm_port_mdix_status_get(
    int unit, 
    bcm_port_t port, 
    bcm_port_mdix_status_t *status);

/* Combo port control/status. */
typedef _shr_port_medium_t bcm_port_medium_t;

/* Combo port control/status values. */
#define BCM_PORT_MEDIUM_NONE    _SHR_PORT_MEDIUM_NONE 
#define BCM_PORT_MEDIUM_COPPER  _SHR_PORT_MEDIUM_COPPER 
#define BCM_PORT_MEDIUM_FIBER   _SHR_PORT_MEDIUM_FIBER 
#define BCM_PORT_MEDIUM_COUNT   _SHR_PORT_MEDIUM_COUNT 

/* Call back function prototype for media status changes. */
typedef _shr_port_medium_status_cb_t bcm_port_medium_status_cb_t;

/* bcm_phy_config_t */
typedef _shr_phy_config_t bcm_phy_config_t;

/* Get or set medium preferences for combination ports. */
extern int bcm_port_medium_config_set(
    int unit, 
    bcm_port_t port, 
    bcm_port_medium_t medium, 
    bcm_phy_config_t *config);

/* Get or set medium preferences for combination ports. */
extern int bcm_port_medium_config_get(
    int unit, 
    bcm_port_t port, 
    bcm_port_medium_t medium, 
    bcm_phy_config_t *config);

/* Get or set medium preferences for combination ports. */
extern int bcm_port_medium_get(
    int unit, 
    bcm_port_t port, 
    bcm_port_medium_t *medium);

/* Register or unregister a call back function on media status changes. */
extern int bcm_port_medium_status_register(
    int unit, 
    bcm_port_t port, 
    bcm_port_medium_status_cb_t callback, 
    void *user_data);

/* Register or unregister a call back function on media status changes. */
extern int bcm_port_medium_status_unregister(
    int unit, 
    bcm_port_t port, 
    bcm_port_medium_status_cb_t callback, 
    void *user_data);

/* Port loopback modes. */
typedef enum bcm_port_loopback_e {
    BCM_PORT_LOOPBACK_NONE, 
    BCM_PORT_LOOPBACK_MAC, 
    BCM_PORT_LOOPBACK_PHY, 
    BCM_PORT_LOOPBACK_REMOTE, 
    BCM_PORT_LOOPBACK_COUNT 
} bcm_port_loopback_t;

/* Set the current loopback mode of a port. */
extern int bcm_port_loopback_set(
    int unit, 
    bcm_port_t port, 
    int loopback);

/* Retrieve the current loopback mode of a port. */
extern int bcm_port_loopback_get(
    int unit, 
    bcm_port_t port, 
    int *loopback);

/* 
 * Set the spanning tree state for a port (single instance spanning tree
 * only).
 */
extern int bcm_port_stp_set(
    int unit, 
    bcm_port_t port, 
    int state);

/* 
 * Get the spanning tree state for a port (single instance spanning tree
 * only).
 */
extern int bcm_port_stp_get(
    int unit, 
    bcm_port_t port, 
    int *state);

/* bcm_port_discard_e */
typedef enum bcm_port_discard_e {
    BCM_PORT_DISCARD_NONE, 
    BCM_PORT_DISCARD_ALL, 
    BCM_PORT_DISCARD_UNTAG, 
    BCM_PORT_DISCARD_TAG, 
    BCM_PORT_DISCARD_COUNT 
} bcm_port_discard_t;

/* 
 * Configure port discard mode for packets ingressing tagged and
 * untagged.
 */
extern int bcm_port_discard_set(
    int unit, 
    bcm_port_t port, 
    int mode);

/* Get the port discard mode for packets ingressing tagged and untagged. */
extern int bcm_port_discard_get(
    int unit, 
    bcm_port_t port, 
    int *mode);

/* 
 * Flags for learn mode
 * 
 * This call takes flags to turn on and off mutually-independent actions
 * that should be taken when a packet is received with an unknown source
 * address, or source lookup failure (SLF).
 * 
 * The set call returns BCM_E_UNAVAIL for flag combinations that are not
 * supported by the hardware.
 */
#define BCM_PORT_LEARN_ARL      0x01       /* Learn SLF address. */
#define BCM_PORT_LEARN_CPU      0x02       /* Copy SLF packet to CPU. */
#define BCM_PORT_LEARN_FWD      0x04       /* Forward SLF packet */
#define BCM_PORT_LEARN_PENDING  0x08       /* Mark learned SLF as pending */
#define BCM_PORT_LEARN_ON       0x01       /* Deprecated name */
#define BCM_PORT_LEARN_SWITCH   0x04       /* Deprecated name */

/* Control the hardware and software learning support on a port. */
extern int bcm_port_learn_set(
    int unit, 
    bcm_port_t port, 
    uint32 flags);

/* Get the hardware and software learning support on a port. */
extern int bcm_port_learn_get(
    int unit, 
    bcm_port_t port, 
    uint32 *flags);

/* Control the hardware and software learning support on a port. */
extern int bcm_port_learn_modify(
    int unit, 
    bcm_port_t port, 
    uint32 add, 
    uint32 remove);

/* Retrieve the current link up or down status of a port. */
extern int bcm_port_link_status_get(
    int unit, 
    bcm_port_t port, 
    int *up);

/* 
 * Modes for VLAN input filtering.
 * 
 * Superceded APIs: use bcm_port_vlan_member_[get|set] instead.
 */
#define BCM_PORT_IFILTER_OFF    0          
#define BCM_PORT_IFILTER_ON     1          

/* 
 * Set current behavior of tagged packets arriving on a port not a member
 * of the specified VLAN.
 */
extern int bcm_port_ifilter_set(
    int unit, 
    bcm_port_t port, 
    int mode);

/* 
 * Retrieve current behavior of tagged packets arriving on a port not a
 * member of the specified VLAN.
 */
extern int bcm_port_ifilter_get(
    int unit, 
    bcm_port_t port, 
    int *mode);

/* Modes for VLAN ingress/egress filtering. */
#define BCM_PORT_VLAN_MEMBER_INGRESS    0x00000001 
#define BCM_PORT_VLAN_MEMBER_EGRESS     0x00000002 

/* 
 * Set current behavior of tagged packets arriving/leaving on a port not
 * a member of the specified VLAN.
 */
extern int bcm_port_vlan_member_set(
    int unit, 
    bcm_port_t port, 
    uint32 flags);

/* 
 * Retrieve current behavior of tagged packets arriving/leaving on a port
 * not a member of the specified VLAN.
 */
extern int bcm_port_vlan_member_get(
    int unit, 
    bcm_port_t port, 
    uint32 *flags);

/* Enable or disable BPDU processing on a port. */
extern int bcm_port_bpdu_enable_set(
    int unit, 
    bcm_port_t port, 
    int enable);

/* Enable or disable BPDU processing on a port. */
extern int bcm_port_bpdu_enable_get(
    int unit, 
    bcm_port_t port, 
    int *enable);

/* Enable or disable l3 switching on an ingress port. */
extern int bcm_port_l3_enable_set(
    int unit, 
    bcm_port_t port, 
    int enable);

/* Enable or disable l3 switching on an ingress port. */
extern int bcm_port_l3_enable_get(
    int unit, 
    bcm_port_t port, 
    int *enable);

/* bcm_port_tgid_set */
extern int bcm_port_tgid_set(
    int unit, 
    bcm_port_t port, 
    int tgid, 
    int psc);

/* bcm_port_tgid_get */
extern int bcm_port_tgid_get(
    int unit, 
    bcm_port_t port, 
    int *tgid, 
    int *psc);

/* bcm_port_mcast_flood_t */
typedef _shr_port_mcast_flood_t bcm_port_mcast_flood_t;

#define BCM_PORT_MCAST_FLOOD_ALL        _SHR_PORT_MCAST_FLOOD_ALL 
#define BCM_PORT_MCAST_FLOOD_UNKNOWN    _SHR_PORT_MCAST_FLOOD_UNKNOWN 
#define BCM_PORT_MCAST_FLOOD_NONE       _SHR_PORT_MCAST_FLOOD_NONE 
#define BCM_PORT_MCAST_FLOOD_COUNT      _SHR_PORT_MCAST_FLOOD_COUNT 

/* Backward compatibility. */
#define BCM_PORT_PFM_MODEA      BCM_PORT_MCAST_FLOOD_ALL 
#define BCM_PORT_PFM_MODEB      BCM_PORT_MCAST_FLOOD_UNKNOWN 
#define BCM_PORT_PFM_MODEC      BCM_PORT_MCAST_FLOOD_NONE 

/* Set or retrieve the current unknown multicast behavior. */
extern int bcm_port_pfm_set(
    int unit, 
    bcm_port_t port, 
    int mode);

/* Set or retrieve the current unknown multicast behavior. */
extern int bcm_port_pfm_get(
    int unit, 
    bcm_port_t port, 
    int *mode);

/* 
 * Port Encapsulation modes
 * 
 * Members of the XGS family of switches support multiple frame
 * (link-level) encapsulation modes (HIGIG, BCM5632, Ethernet).
 */
typedef _shr_port_encap_t bcm_port_encap_t;

#define BCM_PORT_ENCAP_IEEE     _SHR_PORT_ENCAP_IEEE 
#define BCM_PORT_ENCAP_HIGIG    _SHR_PORT_ENCAP_HIGIG 
#define BCM_PORT_ENCAP_B5632    _SHR_PORT_ENCAP_B5632 
#define BCM_PORT_ENCAP_HIGIG2   _SHR_PORT_ENCAP_HIGIG2 
#define BCM_PORT_ENCAP_COUNT    _SHR_PORT_ENCAP_COUNT 

/* Set or get the link level encapsulation mode. */
extern int bcm_port_encap_set(
    int unit, 
    bcm_port_t port, 
    int mode);

/* Set or get the link level encapsulation mode. */
extern int bcm_port_encap_get(
    int unit, 
    bcm_port_t port, 
    int *mode);

/* 
 * Get the current count of cells or packets queued on a port for
 * transmission.
 */
extern int bcm_port_queued_count_get(
    int unit, 
    bcm_port_t port, 
    uint32 *count);

/* bcm_port_frametype_t */
typedef int bcm_port_frametype_t;

/* Protocol based VLAN support. */
#define BCM_PORT_FRAMETYPE_ETHER2   0x1        
#define BCM_PORT_FRAMETYPE_8023     0x2        
#define BCM_PORT_FRAMETYPE_SNAP     BCM_PORT_FRAMETYPE_8023 
#define BCM_PORT_FRAMETYPE_LLC      0x4        

/* bcm_port_ethertype_t */
typedef bcm_ethertype_t bcm_port_ethertype_t;

/* Backplane multiplexing type */
typedef enum bcm_port_control_ability_e {
    BCM_PORT_ABILITY_SFI = 1, 
    BCM_PORT_ABILITY_DUAL_SFI, 
    BCM_PORT_ABILITY_SCI, 
    BCM_PORT_ABILITY_SFI_SCI 
} bcm_port_control_ability_t;

/* PRBS Polynomial type */
typedef enum bcm_port_prbs_e {
    BCM_PORT_PRBS_POLYNOMIAL_X7_X6_1, 
    BCM_PORT_PRBS_POLYNOMIAL_X15_X14_1, 
    BCM_PORT_PRBS_POLYNOMIAL_X23_X18_1, 
    BCM_PORT_PRBS_POLYNOMIAL_X31_X28_1 
} bcm_port_prbs_t;

/* Backward compatibility. */
#define bcm_port_untagged_protocol_vlan_add \
    bcm_port_protocol_vlan_add 
#define bcm_port_untagged_protocol_vlan_delete \
    bcm_port_protocol_vlan_delete 
#define bcm_port_untagged_protocol_vlan_delete_all \
    bcm_port_protocol_vlan_delete_all 

/* Add or delete a protocol based vlan. */
extern int bcm_port_protocol_vlan_add(
    int unit, 
    bcm_port_t port, 
    bcm_port_frametype_t frame, 
    bcm_port_ethertype_t ether, 
    bcm_vlan_t vid);

/* Add or delete a protocol based vlan. */
extern int bcm_port_protocol_vlan_delete(
    int unit, 
    bcm_port_t port, 
    bcm_port_frametype_t frame, 
    bcm_port_ethertype_t ether);

/* Add or delete a protocol based vlan. */
extern int bcm_port_protocol_vlan_delete_all(
    int unit, 
    bcm_port_t port);

/* 
 * Configure a port to block or allow packets from a given ingress port
 * for egressing.
 */
extern int bcm_port_egress_set(
    int unit, 
    bcm_port_t port, 
    int modid, 
    bcm_pbmp_t pbmp);

/* 
 * Configure a port to block or allow packets from a given ingress port
 * for egressing.
 */
extern int bcm_port_egress_get(
    int unit, 
    bcm_port_t port, 
    int modid, 
    bcm_pbmp_t *pbmp);

/* 
 * Configure which egress ports an ingress port is permitted to forward
 * packets to.
 */
extern int bcm_port_modid_enable_set(
    int unit, 
    bcm_port_t port, 
    int modid, 
    int enable);

/* 
 * Configure which egress ports an ingress port is permitted to forward
 * packets to.
 */
extern int bcm_port_modid_enable_get(
    int unit, 
    bcm_port_t port, 
    int modid, 
    int *enable);

/* 
 * Configure which egress ports an ingress port is permitted to forward
 * packets to.
 */
extern int bcm_port_modid_egress_set(
    int unit, 
    bcm_port_t port, 
    bcm_module_t modid, 
    bcm_pbmp_t pbmp);

/* 
 * Configure which egress ports an ingress port is permitted to forward
 * packets to.
 */
extern int bcm_port_modid_egress_get(
    int unit, 
    bcm_port_t port, 
    bcm_module_t modid, 
    bcm_pbmp_t *pbmp);

/* Flood blocking modes. */
#define BCM_PORT_FLOOD_BLOCK_BCAST          0x1        
#define BCM_PORT_FLOOD_BLOCK_UNKNOWN_UCAST  0x2        
#define BCM_PORT_FLOOD_BLOCK_UNKNOWN_MCAST  0x4        
#define BCM_PORT_FLOOD_BLOCK_ALL            0x8        

/* Selectively block flooding traffic. */
extern int bcm_port_flood_block_set(
    int unit, 
    bcm_port_t ingress_port, 
    bcm_port_t egress_port, 
    uint32 flags);

/* Selectively block flooding traffic. */
extern int bcm_port_flood_block_get(
    int unit, 
    bcm_port_t ingress_port, 
    bcm_port_t egress_port, 
    uint32 *flags);

/* Configure egress shaping counter */
extern int bcm_egress_packet_ifg_set(int unit, uint32 value);

/* Configure a port for egress rate shaping. */
extern int bcm_port_rate_egress_set(
    int unit, 
    bcm_port_t port, 
    uint32 kbits_sec, 
    uint32 kbits_burst);

/* Get a port's egress rate shaping parameters. */
extern int bcm_port_rate_egress_get(
    int unit, 
    bcm_port_t port, 
    uint32 *kbits_sec, 
    uint32 *kbits_burst);

/* Configure a port fifos for egress rate shaping. */
extern int bcm_port_rate_egress_traffic_set(
    int unit, 
    bcm_port_t port, 
    uint32 traffic_types, 
    uint32 kbits_sec, 
    uint32 kbits_burst);

/* Get an egress port's fifo shaping parameters. */
extern int bcm_port_rate_egress_traffic_get(
    int unit, 
    bcm_port_t port, 
    uint32 *traffic_types, 
    uint32 *kbits_sec, 
    uint32 *kbits_burst);

/* Configure a port for ingress rate policing. */
extern int bcm_port_rate_ingress_set(
    int unit, 
    bcm_port_t port, 
    uint32 kbits_sec, 
    uint32 kbits_burst);

/* Configure a port for ingress rate policing. */
extern int bcm_port_rate_ingress_get(
    int unit, 
    bcm_port_t port, 
    uint32 *kbits_sec, 
    uint32 *kbits_burst);

/* 
 * Configure a port's ingress rate limiting pause frame control
 * parameters.
 */
extern int bcm_port_rate_pause_set(
    int unit, 
    bcm_port_t port, 
    uint32 kbits_pause, 
    uint32 kbits_resume);

/* 
 * Configure a port's ingress rate limiting pause frame control
 * parameters.
 */
extern int bcm_port_rate_pause_get(
    int unit, 
    bcm_port_t port, 
    uint32 *kbits_pause, 
    uint32 *kbits_resume);

/* Control the sampling of packets ingressing or egressing a port. */
extern int bcm_port_sample_rate_set(
    int unit, 
    bcm_port_t port, 
    int ingress_rate, 
    int egress_rate);

/* Control the sampling of packets ingressing or egressing a port. */
extern int bcm_port_sample_rate_get(
    int unit, 
    bcm_port_t port, 
    int *ingress_rate, 
    int *egress_rate);

/* Double tagging modes. */
#define BCM_PORT_DTAG_MODE_NONE             0          /* No double tagging. */
#define BCM_PORT_DTAG_MODE_INTERNAL         1          /* Service Provider port. */
#define BCM_PORT_DTAG_MODE_EXTERNAL         2          /* Customer port. */
#define BCM_PORT_DTAG_REMOVE_EXTERNAL_TAG   4          /* Remove customer tag. */
#define BCM_PORT_DTAG_ADD_EXTERNAL_TAG      8          /* Add customer tag. */

/* Set or retrieve the current double tagging mode for a port. */
extern int bcm_port_dtag_mode_set(
    int unit, 
    bcm_port_t port, 
    int mode);

/* Set or retrieve the current double tagging mode for a port. */
extern int bcm_port_dtag_mode_get(
    int unit, 
    bcm_port_t port, 
    int *mode);

/* Set the default tag protocol ID (TPID) for the specified port. */
extern int bcm_port_tpid_set(
    int unit, 
    bcm_port_t port, 
    uint16 tpid);

/* Set the default tag protocol ID (TPID) for the specified port. */
extern int bcm_port_tpid_get(
    int unit, 
    bcm_port_t port, 
    uint16 *tpid);

/* Add an allowed outer tag protocol ID (TPID) for the specified port. */
extern int bcm_port_tpid_add(
    int unit, 
    bcm_port_t port, 
    uint16 tpid, 
    int color_select);

/* Delete allowed outer tag protocol ID (TPID) for the specified port. */
extern int bcm_port_tpid_delete(
    int unit, 
    bcm_port_t port, 
    uint16 tpid);

/* Delete allowed outer tag protocol ID (TPID) for the specified port. */
extern int bcm_port_tpid_delete_all(
    int unit, 
    bcm_port_t port);

/* Set the default tag protocol ID (TPID) for the specified port. */
extern int bcm_port_inner_tpid_set(
    int unit, 
    bcm_port_t port, 
    uint16 tpid);

/* Set the default tag protocol ID (TPID) for the specified port. */
extern int bcm_port_inner_tpid_get(
    int unit, 
    bcm_port_t port, 
    uint16 *tpid);

/* bcm_port_cable_state_t */
typedef _shr_port_cable_state_t bcm_port_cable_state_t;

#define BCM_PORT_CABLE_STATE_OK         _SHR_PORT_CABLE_STATE_OK 
#define BCM_PORT_CABLE_STATE_OPEN       _SHR_PORT_CABLE_STATE_OPEN 
#define BCM_PORT_CABLE_STATE_SHORT      _SHR_PORT_CABLE_STATE_SHORT 
#define BCM_PORT_CABLE_STATE_OPENSHORT  _SHR_PORT_CABLE_STATE_OPENSHORT 
#define BCM_PORT_CABLE_STATE_CROSSTALK  _SHR_PORT_CABLE_STATE_CROSSTALK 
#define BCM_PORT_CABLE_STATE_UNKNOWN    _SHR_PORT_CABLE_STATE_UNKNOWN 
#define BCM_PORT_CABLE_STATE_COUNT      _SHR_PORT_CABLE_STATE_COUNT 

/* bcm_port_cable_diag_t */
typedef _shr_port_cable_diag_t bcm_port_cable_diag_t;

/* Perform cable diagnostics on the specified port. */
extern int bcm_port_cable_diag(
    int unit, 
    bcm_port_t port, 
    bcm_port_cable_diag_t *status);

#define BCM_PORT_L3_MODIFY_NO_SRCMAC    0x0001     
#define BCM_PORT_L3_MODIFY_NO_DSTMAC    0x0002     
#define BCM_PORT_L3_MODIFY_NO_TTL       0x0004     
#define BCM_PORT_L3_MODIFY_NO_VLAN      0x0008     

/* Get or set the L3 unicast packet modification operations of a port. */
extern int bcm_port_l3_modify_set(
    int unit, 
    bcm_port_t port, 
    uint32 flags);

/* Get or set the L3 unicast packet modification operations of a port. */
extern int bcm_port_l3_modify_get(
    int unit, 
    bcm_port_t port, 
    uint32 *flags);

#define BCM_PORT_IPMC_MODIFY_NO_SRCMAC  0x0001     
#define BCM_PORT_IPMC_MODIFY_NO_TTL     0x0004     

/* Get or set the L3 multicast packet modification operations of a port. */
extern int bcm_port_ipmc_modify_set(
    int unit, 
    bcm_port_t port, 
    uint32 flags);

/* Get or set the L3 multicast packet modification operations of a port. */
extern int bcm_port_ipmc_modify_get(
    int unit, 
    bcm_port_t port, 
    uint32 *flags);

/* 
 * Port information valid fields
 * 
 * Each field in the bcm_port_info_t structure has a corresponding mask
 * bit to control whether to get or set that value during the execution
 * of the bcm_port_selective_get/_set functions. The OR of all requested
 * ATTR masks should be stored in the action_mask field and the OR of all
 * requested ATTR2 masks should be stored in the action_mask2 field of
 * the bcm_port_info_t before calling the functions.
 */
#define BCM_PORT_ATTR_ENABLE_MASK           0x00000001 
#define BCM_PORT_ATTR_LINKSTAT_MASK         0x00000002 /* Get only. */
#define BCM_PORT_ATTR_AUTONEG_MASK          0x00000004 
#define BCM_PORT_ATTR_SPEED_MASK            0x00000008 
#define BCM_PORT_ATTR_DUPLEX_MASK           0x00000010 
#define BCM_PORT_ATTR_LINKSCAN_MASK         0x00000020 
#define BCM_PORT_ATTR_LEARN_MASK            0x00000040 
#define BCM_PORT_ATTR_DISCARD_MASK          0x00000080 
#define BCM_PORT_ATTR_VLANFILTER_MASK       0x00000100 
#define BCM_PORT_ATTR_UNTAG_PRI_MASK        0x00000200 
#define BCM_PORT_ATTR_UNTAG_VLAN_MASK       0x00000400 
#define BCM_PORT_ATTR_STP_STATE_MASK        0x00000800 
#define BCM_PORT_ATTR_PFM_MASK              0x00001000 
#define BCM_PORT_ATTR_LOOPBACK_MASK         0x00002000 
#define BCM_PORT_ATTR_PHY_MASTER_MASK       0x00004000 
#define BCM_PORT_ATTR_INTERFACE_MASK        0x00008000 
#define BCM_PORT_ATTR_PAUSE_TX_MASK         0x00010000 
#define BCM_PORT_ATTR_PAUSE_RX_MASK         0x00020000 
#define BCM_PORT_ATTR_PAUSE_MAC_MASK        0x00040000 
#define BCM_PORT_ATTR_LOCAL_ADVERT_MASK     0x00080000 
#define BCM_PORT_ATTR_REMOTE_ADVERT_MASK    0x00100000 /* Get only. */
#define BCM_PORT_ATTR_ENCAP_MASK            0x00200000 
#define BCM_PORT_ATTR_RATE_MCAST_MASK       0x00400000 
#define BCM_PORT_ATTR_RATE_BCAST_MASK       0x00800000 
#define BCM_PORT_ATTR_RATE_DLFBC_MASK       0x01000000 
#define BCM_PORT_ATTR_SPEED_MAX_MASK        0x02000000 /* Get only. */
#define BCM_PORT_ATTR_ABILITY_MASK          0x04000000 /* Get only. */
#define BCM_PORT_ATTR_FRAME_MAX_MASK        0x08000000 
#define BCM_PORT_ATTR_MDIX_MASK             0x10000000 
#define BCM_PORT_ATTR_MDIX_STATUS_MASK      0x20000000 
#define BCM_PORT_ATTR_MEDIUM_MASK           0x40000000 
#define BCM_PORT_ATTR_FAULT_MASK            0x80000000 /* Get only. */
#define BCM_PORT_ATTR2_PORT_ABILITY         0x00000001 

/* Backward compatibility. */
#define BCM_PORT_ATTR_SPEED_MAX BCM_PORT_ATTR_SPEED_MAX_MASK 
#define BCM_PORT_ATTR_ABILITY   BCM_PORT_ATTR_ABILITY_MASK 

#define BCM_PORT_ATTR_ALL_MASK      0xffffffff 
#define BCM_PORT_ATTR_PAUSE_MASK    \
    (BCM_PORT_ATTR_PAUSE_TX_MASK    | \
     BCM_PORT_ATTR_PAUSE_RX_MASK) 
#define BCM_PORT_ATTR_RATE_MASK     \
    (BCM_PORT_ATTR_RATE_MCAST_MASK  | \
     BCM_PORT_ATTR_RATE_BCAST_MASK  | \
     BCM_PORT_ATTR_RATE_DLFBC_MASK) 

/* Attributes that can be controlled on BCM5670/75. */
#define BCM_PORT_HERC_ATTRS     \
    (BCM_PORT_ATTR_ENABLE_MASK      | \
     BCM_PORT_ATTR_LINKSTAT_MASK    | \
     BCM_PORT_ATTR_SPEED_MASK       | \
     BCM_PORT_ATTR_DUPLEX_MASK      | \
     BCM_PORT_ATTR_LINKSCAN_MASK    | \
     BCM_PORT_ATTR_INTERFACE_MASK   | \
     BCM_PORT_ATTR_LOOPBACK_MASK    | \
     BCM_PORT_ATTR_PAUSE_TX_MASK    | \
     BCM_PORT_ATTR_PAUSE_RX_MASK    | \
     BCM_PORT_ATTR_PAUSE_MAC_MASK   | \
     BCM_PORT_ATTR_FRAME_MAX_MASK   | \
     BCM_PORT_ATTR_ENCAP_MASK) 

/* Attributes specific to XGS devices. */
#define BCM_PORT_XGS_ATTRS      (BCM_PORT_ATTR_ENCAP_MASK) 

/* Auto-negotiated values. */
#define BCM_PORT_AN_ATTRS       \
    (BCM_PORT_ATTR_SPEED_MASK       | \
     BCM_PORT_ATTR_DUPLEX_MASK      | \
     BCM_PORT_ATTR_PAUSE_MASK) 

/* bcm_port_info_s */
typedef struct bcm_port_info_s {
    uint32 action_mask;                 /* BCM_PORT_ATTR_xxx. */
    uint32 action_mask2;                /* BCM_PORT_ATTR2_xxx. */
    int enable; 
    int linkstatus; 
    int autoneg; 
    int speed; 
    int duplex; 
    int linkscan; 
    uint32 learn; 
    int discard; 
    uint32 vlanfilter; 
    int untagged_priority; 
    bcm_vlan_t untagged_vlan; 
    int stp_state; 
    int pfm; 
    int loopback; 
    int phy_master; 
    bcm_port_if_t interface; 
    int pause_tx; 
    int pause_rx; 
    int encap_mode; 
    bcm_mac_t pause_mac; 
    bcm_port_abil_t local_advert; 
    bcm_port_ability_t local_ability; 
    int remote_advert_valid; 
    bcm_port_abil_t remote_advert; 
    bcm_port_ability_t remote_ability; 
    int mcast_limit; 
    int mcast_limit_enable; 
    int bcast_limit; 
    int bcast_limit_enable; 
    int dlfbc_limit; 
    int dlfbc_limit_enable; 
    int speed_max; 
    bcm_port_abil_t ability; 
    bcm_port_ability_t port_ability; 
    int frame_max; 
    bcm_port_mdix_t mdix; 
    bcm_port_mdix_status_t mdix_status; 
    bcm_port_medium_t medium; 
    uint32 fault; 
} bcm_port_info_t;

/* Get or set multiple port characteristics. */
extern int bcm_port_info_get(
    int unit, 
    bcm_port_t port, 
    bcm_port_info_t *info);

/* Get or set multiple port characteristics. */
extern int bcm_port_info_set(
    int unit, 
    bcm_port_t port, 
    bcm_port_info_t *info);

/* Get or set multiple port characteristics. */
extern int bcm_port_selective_get(
    int unit, 
    bcm_port_t port, 
    bcm_port_info_t *info);

/* Get or set multiple port characteristics. */
extern int bcm_port_selective_set(
    int unit, 
    bcm_port_t port, 
    bcm_port_info_t *info);

/* Get or set multiple port characteristics. */
extern int bcm_port_info_restore(
    int unit, 
    bcm_port_t port, 
    bcm_port_info_t *info);

/* Get or set multiple port characteristics. */
extern int bcm_port_info_save(
    int unit, 
    bcm_port_t port, 
    bcm_port_info_t *info);

/* Gets the physical driver name. */
extern int bcm_port_phy_drv_name_get(
    int unit, 
    bcm_port_t port, 
    char *name, 
    int len);

/* Port link fault signalling. */
#define BCM_PORT_FAULT_LOCAL    0x0001     
#define BCM_PORT_FAULT_REMOTE   0x0002     

/* 
 * Port Rate Egress Traffic identifiers for QE Fifo Selectors into
 * Shapers.
 */
#define BCM_PORT_RATE_TRAFFIC_UC_EF         0x0001     
#define BCM_PORT_RATE_TRAFFIC_UC_NON_EF     0x0002     
#define BCM_PORT_RATE_TRAFFIC_NON_UC_EF     0x0100     
#define BCM_PORT_RATE_TRAFFIC_NON_UC_NON_EF 0x0200     

/* Get link fault type. */
extern int bcm_port_fault_get(
    int unit, 
    bcm_port_t port, 
    uint32 *flags);

/* 
 * Set or get port index of a trunk for ingress port that is used to
 * select the egress port in the trunk.
 */
extern int bcm_port_trunk_index_set(
    int unit, 
    bcm_port_t port, 
    int port_index);

/* 
 * Set or get port index of a trunk for ingress port that is used to
 * select the egress port in the trunk.
 */
extern int bcm_port_trunk_index_get(
    int unit, 
    bcm_port_t port, 
    int *port_index);

/* Set or retrieve color assignment for a given port and priority. */
extern int bcm_port_priority_color_set(
    int unit, 
    bcm_port_t port, 
    int prio, 
    bcm_color_t color);

/* Set or retrieve color assignment for a given port and priority. */
extern int bcm_port_priority_color_get(
    int unit, 
    bcm_port_t port, 
    int prio, 
    bcm_color_t *color);

/* Set or retrieve color assignment for a given port and CFI. */
extern int bcm_port_cfi_color_set(
    int unit, 
    bcm_port_t port, 
    int cfi, 
    bcm_color_t color);

/* Set or retrieve color assignment for a given port and CFI. */
extern int bcm_port_cfi_color_get(
    int unit, 
    bcm_port_t port, 
    int cfi, 
    bcm_color_t *color);

/* 
 * Map the incoming packet priority and CFI to internal priority and
 * color.
 */
extern int bcm_port_vlan_priority_map_set(
    int unit, 
    bcm_port_t port, 
    int pkt_pri, 
    int cfi, 
    int internal_pri, 
    bcm_color_t color);

/* 
 * Map the incoming packet priority and CFI to internal priority and
 * color.
 */
extern int bcm_port_vlan_priority_map_get(
    int unit, 
    bcm_port_t port, 
    int pkt_pri, 
    int cfi, 
    int *internal_pri, 
    bcm_color_t *color);

/* 
 * Map the internal priority and color to outgoing packet priority and
 * CFI.
 */
extern int bcm_port_vlan_priority_unmap_set(
    int unit, 
    bcm_port_t port, 
    int internal_pri, 
    bcm_color_t color, 
    int pkt_pri, 
    int cfi);

/* 
 * Map the internal priority and color to outgoing packet priority and
 * CFI.
 */
extern int bcm_port_vlan_priority_unmap_get(
    int unit, 
    bcm_port_t port, 
    int internal_pri, 
    bcm_color_t color, 
    int *pkt_pri, 
    int *cfi);

/* 
 * Map the incoming packet priority and CFI to internal priority and
 * color on a per-port per-vlan basis.
 */
extern int bcm_port_vlan_pri_map_set(
    int unit, 
    bcm_port_t port, 
    bcm_vlan_t vlan, 
    int pkt_pri, 
    int cfi, 
    int internal_pri, 
    bcm_color_t color);

/* 
 * Get the mapping of incoming packet priority and CFI to internal
 * priority and color.
 */
extern int bcm_port_vlan_pri_map_get(
    int unit, 
    bcm_port_t port, 
    bcm_vlan_t vlan, 
    int pkt_pri, 
    int cfi, 
    int *internal_pri, 
    bcm_color_t *color);

/* Map the incoming IP packet DSCP to internal priority and color. */
extern int bcm_port_vlan_dscp_map_set(
    int unit, 
    bcm_port_t port, 
    bcm_vlan_t vlan, 
    int dscp, 
    int internal_pri, 
    bcm_color_t color);

/* 
 * Get the mapping of incoming IP packet DSCP to internal priority and
 * color.
 */
extern int bcm_port_vlan_dscp_map_get(
    int unit, 
    bcm_port_t port, 
    bcm_vlan_t vlan, 
    int dscp, 
    int *internal_pri, 
    bcm_color_t *color);

/* Map the internal priority and color to outgoing packet dscp. */
extern int bcm_port_dscp_unmap_set(
    int unit, 
    bcm_port_t port, 
    int internal_pri, 
    bcm_color_t color, 
    int pkt_dscp);

/* 
 * Get the mapping of internal priority and color to outgoing packet
 * dscp.
 */
extern int bcm_port_dscp_unmap_get(
    int unit, 
    bcm_port_t port, 
    int internal_pri, 
    bcm_color_t color, 
    int *pkt_dscp);

/* Set the inner tag value to be added to the outgoing packet. */
extern int bcm_port_vlan_inner_tag_set(
    int unit, 
    bcm_port_t port, 
    uint16 inner_tag);

/* Set the inner tag value to be added to the outgoing packet. */
extern int bcm_port_vlan_inner_tag_get(
    int unit, 
    bcm_port_t port, 
    uint16 *inner_tag);

/* Set or get egress override port. */
extern int bcm_port_force_forward_set(
    int unit, 
    bcm_port_t port, 
    bcm_port_t egr_port, 
    int enable);

/* Set or get egress override port. */
extern int bcm_port_force_forward_get(
    int unit, 
    bcm_port_t port, 
    bcm_port_t *egr_port, 
    int *enabled);

/* bcm_port_class_e */
typedef enum bcm_port_class_e {
    bcmPortClassFieldLookup, 
    bcmPortClassFieldIngress, 
    bcmPortClassFieldEgress, 
    bcmPortClassVlanTranslateEgress 
} bcm_port_class_t;

/* 
 * Set or get port classification ID to aggregate a group of ports for
 * further processing such as Vlan translation and field processing.
 */
extern int bcm_port_class_set(
    int unit, 
    bcm_port_t port, 
    bcm_port_class_t pclass, 
    uint32 class_id);

/* 
 * Set or get port classification ID to aggregate a group of ports for
 * further processing such as Vlan translation and field processing.
 */
extern int bcm_port_class_get(
    int unit, 
    bcm_port_t port, 
    bcm_port_class_t pclass, 
    uint32 *class_id);

/* Features that can be controlled on a per-port basis. */
typedef enum bcm_port_control_e {
    bcmPortControlBridge,               /* Enable local port bridging. */
    bcmPortControlTrunkHashSet,         /* Select one of the two sets of hash
                                           bits selection configuration for
                                           trunking. */
    bcmPortControlFabricTrunkHashSet,   /* Select one of the two sets of hash
                                           bits selection configuration for
                                           fabric trunking. */
    bcmPortControlECMPHashSet,          /* Select one of the two sets of hash
                                           bits selection configuration for
                                           ECMP. */
    bcmPortControlLoadBalanceHashSet,   /* Select one of the two sets of hash
                                           bits selection configuration for LBID
                                           to be populated in HiGig2 header. */
    bcmPortControlErrorSymbolDetect,    /* Enable or disable XAUI |E| monitoring
                                           feature  for port's XAUI lanes. */
    bcmPortControlErrorSymbolCount,     /* Get the number of XAUI |E| symbol
                                           occured since last read. Setting any
                                           value to the count will set it to
                                           zero. */
    bcmPortControlIP4,                  /* Enable IPv4 Routing on port. */
    bcmPortControlIP6,                  /* Enable IPv6 Routing on port. */
    bcmPortControlIP4Mcast,             /* Enable IPv4 Multicast on port. */
    bcmPortControlIP6Mcast,             /* Enable IPv6 Multicast on port. */
    bcmPortControlIP4McastL2,           /* Enable L2 switching on IPv4 IPMC
                                           packets based on (SG,*G) instead of
                                           (DMAC,VLAN). */
    bcmPortControlIP6McastL2,           /* Enable L2 switching on IPv6 IPMC
                                           packets based on (SG,*G) instead of
                                           (DMAC,VLAN). */
    bcmPortControlMpls,                 /* Enable MPLS on the port ingress. */
    bcmPortControlPassControlFrames,    /* Enable controls frames on port. */
    bcmPortControlFilterLookup,         /* Enable port lookup Field Processor. */
    bcmPortControlFilterIngress,        /* Enable ingress Field Processor on
                                           port. */
    bcmPortControlFilterEgress,         /* Enable egress Field Processor on
                                           port. */
    bcmPortControlFrameSpacingStretch,  /* One byte of inter packet gap is added
                                           for specified number of packet data
                                           bytes. If the value is 10, one byte
                                           of IPG is added for each 10 byte of
                                           packet data. */
    bcmPortControlPreservePacketPriority, /* Preserve packet original IEEE 802.1p
                                           priority. */
    bcmPortControlLearnClassEnable,     /* Enable class based station movement
                                           checks. */
    bcmPortControlMplsIngressPortCheck, /* Enable Mpls ILM ingress port checks. */
    bcmPortControlMplsMultiLabelSwitching, /* Enable Mpls multi label switching */
    bcmPortControlTrustIncomingVlan,    /* Trust incoming packet's Vlan tag */
    bcmPortControlDoNotCheckVlan,       /* Enable/disable spanning tree and Vlan
                                           membership checks. */
    bcmPortControlIEEE8021ASEnableIngress, /* Enable/disable ingress processing of
                                           IEEE 802.1AS protocol packets. */
    bcmPortControlIEEE8021ASEnableEgress, /* Enable/disable egress processing of
                                           IEEE 802.1AS protocol packets. */
    bcmPortControlPrbsMode,             /* PRBS location - 0=>Phy PRBS 1=>MAC/SI
                                           Port */
    bcmPortControlPrbsPolynomial,       /* Assigns PRBS polynomial,
                                           BCM_PORT_PRBS_POLYNOMIAL_ */
    bcmPortControlPrbsTxInvertData,     /* Configure inversion of Tx data */
    bcmPortControlPrbsForceTxError,     /* Configure insertion of Tx errors */
    bcmPortControlPrbsTxEnable,         /* Enable Tx PRBS */
    bcmPortControlPrbsRxEnable,         /* Enable Rx PRBS */
    bcmPortControlPrbsRxStatus,         /* PRBS Rx status */
    bcmPortControlSerdesDriverStrength, /* Assigns Driver Strength */
    bcmPortControlSerdesDriverEqualization, /* Assigns Driver Equalization */
    bcmPortControlSerdesDriverStrengthFarEnd, /* Informs software of far end transmit
                                           driver strength setting for tuning */
    bcmPortControlSerdesDriverRxTune,   /* Start hardware receive equalization
                                           tuning */
    bcmPortControlSerdesDriverFarEndTuneStatus, /* Get results of tune operation which
                                           include suggested far end strength
                                           update */
    bcmPortControlAbility,              /* Assigns Port ability,
                                           BCM_PORT_ABILITY_ */
    bcmPortControlMacInMac,             /* Enable/Disable MiM frame processing */
    bcmPortControlOamLoopback,          /* Enable/Disable 802.3 Clause 57 Oam
                                           Loopback */
    bcmPortControlPacketFlowMode,       /* Enable/Disable requeue for hybrid
                                           mode */
    bcmPortControlEgressVlanPriUsesPktPri, /* If set, outgoing packets derive their
                                           priority from the incoming priority */
    bcmPortControlTrain,                /* Start/stop training sequence */
    bcmPortControlRxEnable,             /* Rx enable/disable */
    bcmPortControlTxEnable,             /* Tx enable/disable */
    bcmPortControlRxLink,               /* Retreives Rx Status */
    bcmPortControlTxLink                /* Retreives Tx Status */
} bcm_port_control_t;

/* Get or set various features at the port level. */
extern int bcm_port_control_set(
    int unit, 
    bcm_port_t port, 
    bcm_port_control_t type, 
    int value);

/* Get or set various features at the port level. */
extern int bcm_port_control_get(
    int unit, 
    bcm_port_t port, 
    bcm_port_control_t type, 
    int *value);

/* bcm_port_info_t_init */
extern void bcm_port_info_t_init(
    bcm_port_info_t *info);

/* bcm_port_ability_t_init */
extern void bcm_port_ability_t_init(
    bcm_port_ability_t *ability);

/* bcm_phy_config_t_init */
extern void bcm_phy_config_t_init(
    bcm_phy_config_t *config);

/* Initialize a Port Configuration structure. */
extern void bcm_port_config_t_init(
    bcm_port_config_t *pconfig);

/* bcm_port_phy_control_t */
typedef _shr_port_phy_control_t bcm_port_phy_control_t;

/* Controls for changing PHY settings. */
#define BCM_PORT_PHY_CONTROL_WAN            _SHR_PORT_PHY_CONTROL_WAN  
#define BCM_PORT_PHY_CONTROL_PREEMPHASIS    _SHR_PORT_PHY_CONTROL_PREEMPHASIS 
#define BCM_PORT_PHY_CONTROL_DRIVER_CURRENT _SHR_PORT_PHY_CONTROL_DRIVER_CURRENT 
#define BCM_PORT_PHY_CONTROL_PRE_DRIVER_CURRENT _SHR_PORT_PHY_CONTROL_PRE_DRIVER_CURRENT 

/* Set/Get PHY specific configurations. */
extern int bcm_port_phy_control_set(
    int unit, 
    bcm_port_t port, 
    bcm_port_phy_control_t type, 
    uint32 value);

/* Set/Get PHY specific configurations. */
extern int bcm_port_phy_control_get(
    int unit, 
    bcm_port_t port, 
    bcm_port_phy_control_t type, 
    uint32 *value);

/* Get the GPORT ID for the specified physical port. */
extern int bcm_port_gport_get(
    int unit, 
    bcm_port_t port, 
    bcm_gport_t *gport);

/* added by charles, accton expantion for phy control call*/
extern int bcm_port_phy_ioctl(int unit,int port,unsigned int cmd,void * io_req);

/* Backward compatibility. */
typedef _shr_port_stp_t bcm_port_stp_t;

/* Backward compatibility. */
#define BCM_PORT_STP_DISABLE    _SHR_PORT_STP_DISABLE 
#define BCM_PORT_STP_BLOCK      _SHR_PORT_STP_BLOCK 
#define BCM_PORT_STP_LISTEN     _SHR_PORT_STP_LISTEN 
#define BCM_PORT_STP_LEARN      _SHR_PORT_STP_LEARN 
#define BCM_PORT_STP_FORWARD    _SHR_PORT_STP_FORWARD 
#define BCM_PORT_STP_COUNT      _SHR_PORT_STP_COUNT 

/* Backward compatibility. */
#define bcm_port_vlan_set(u, p, vid)  \
    bcm_port_untagged_vlan_set(u, p, vid) 

/* Backward compatibility. */
#define bcm_port_vlan_get(u, p, vdata)  \
    bcm_port_untagged_vlan_get((u), (p), &((vdata)->vlan_tag)), \
    bcm_vlan_port_get((u), (vdata)->vlan_tag, \
                      &((vdata)->port_bitmap), &((vdata)->ut_port_bitmap)) 

#endif /* __BCM_PORT_H__ */
