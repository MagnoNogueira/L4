/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 * $Id: async.h,v 1.245.2.24 Broadcom SDK $
 * $Copyright: Copyright 2008 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR U.S. $1,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 *
 * File:	async.h
 * Purpose:	Asynchronous BCM API routines
 * Generator:	mkdispatch 1.28
 * Generated:	Wed Feb 27 14:42:50 2008
 */

#ifndef	_BCM_ASYNC_H
#define	_BCM_ASYNC_H

#include <bcm/types.h>
#include <bcm/auth.h>
#include <bcm/bcmi2c.h>
#include <bcm/cosq.h>
#include <bcm/custom.h>
#include <bcm/diffserv.h>
#include <bcm/dmux.h>
#include <bcm/eav.h>
#include <bcm/error.h>
#include <bcm/fabric.h>
#include <bcm/failover.h>
#include <bcm/field.h>
#include <bcm/filter.h>
#include <bcm/htls.h>
#include <bcm/igmp.h>
#include <bcm/init.h>
#include <bcm/ipfix.h>
#include <bcm/ipmc.h>
#include <bcm/l2.h>
#include <bcm/l3.h>
#include <bcm/link.h>
#include <bcm/mcast.h>
#include <bcm/meter.h>
#include <bcm/mim.h>
#include <bcm/mirror.h>
#include <bcm/module.h>
#include <bcm/mpls.h>
#include <bcm/multicast.h>
#include <bcm/oam.h>
#include <bcm/pkt.h>
#include <bcm/policer.h>
#include <bcm/port.h>
#include <bcm/proxy.h>
#include <bcm/rate.h>
#include <bcm/rx.h>
#include <bcm/stack.h>
#include <bcm/stat.h>
#include <bcm/stg.h>
#include <bcm/subport.h>
#include <bcm/switch.h>
#include <bcm/topo.h>
#include <bcm/trunk.h>
#include <bcm/tunnel.h>
#include <bcm/tx.h>
#include <bcm/vlan.h>
#include <bcm/vswitch.h>

#ifdef	BCM_ASYNC_SUPPORT

typedef void (*bcm_async_cb_t)(void *cookie, int retval);

void	_bcm_shutdown_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_attach_async(int unit, char * type, char * subtype, int remunit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_attach_check_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_attach_max_async(int * max_units, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_egress_get_async(int unit, int port, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_egress_set_async(int unit, int port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_mac_add_async(int unit, int port, bcm_mac_t mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_mac_delete_async(int unit, int port, bcm_mac_t mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_mac_delete_all_async(int unit, int port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_mode_get_async(int unit, int port, uint32 * modep, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_mode_set_async(int unit, int port, uint32 mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_auth_unauth_callback_async(int unit, bcm_auth_cb_t func, void * cookie, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_clear_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_config_get_async(int unit, int * numq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_config_set_async(int unit, int numq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_control_get_async(int unit, bcm_gport_t port, bcm_cos_queue_t cosq, bcm_cosq_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_control_set_async(int unit, bcm_gport_t port, bcm_cos_queue_t cosq, bcm_cosq_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_discard_get_async(int unit, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_discard_port_get_async(int unit, bcm_port_t port, bcm_cos_queue_t cosq, uint32 color, int * drop_start, int * drop_slope, int * average_time, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_discard_port_set_async(int unit, bcm_port_t port, bcm_cos_queue_t cosq, uint32 color, int drop_start, int drop_slope, int average_time, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_discard_set_async(int unit, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_fabric_distribution_add_async(int unit, bcm_fabric_distribution_t ds_id, int num_cos_levels, uint32 flags, bcm_gport_t * req_gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_fabric_distribution_get_async(int unit, bcm_fabric_distribution_t ds_id, int * num_cos_levels, bcm_gport_t * req_gport, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_add_async(int unit, bcm_gport_t port, int numq, uint32 flags, bcm_gport_t * gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_attach_async(int unit, bcm_gport_t sched_port, bcm_gport_t input_port, bcm_cos_queue_t cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_attach_get_async(int unit, bcm_gport_t sched_port, bcm_gport_t * input_port, bcm_cos_queue_t * cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_bandwidth_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, uint32 * kbits_sec_min, uint32 * kbits_sec_max, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_bandwidth_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, uint32 kbits_sec_min, uint32 kbits_sec_max, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_delete_async(int unit, bcm_gport_t gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_detach_async(int unit, bcm_gport_t sched_port, bcm_gport_t input_port, bcm_cos_queue_t cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_discard_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_gport_discard_t * discard, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_discard_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_gport_discard_t * discard, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_enable_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_enable_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_get_async(int unit, bcm_gport_t gport, bcm_gport_t * physical_port, int * num_cos_levels, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_mapping_get_async(int unit, bcm_gport_t gport, bcm_cos_t priority, bcm_cos_queue_t * cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_mapping_set_async(int unit, bcm_gport_t gport, bcm_cos_t priority, bcm_cos_queue_t cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_nexus_attach_async(int unit, bcm_gport_t master_port, bcm_cos_queue_t master_port_cosq, bcm_gport_t nexus_port, bcm_cos_queue_t nexus_port_cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_nexus_detach_async(int unit, bcm_gport_t master_port, bcm_cos_queue_t master_port_cosq, bcm_gport_t nexus_port, bcm_cos_queue_t nexus_port_cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_sched_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, int * mode, int * weight, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_sched_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, int mode, int weight, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_size_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, uint32 * bytes_min, uint32 * bytes_max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_size_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, uint32 bytes_min, uint32 bytes_max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_stat_enable_get_async(int unit, bcm_gport_t gport, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_stat_enable_set_async(int unit, bcm_gport_t gport, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_stat_get_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_gport_stats_t stat, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_stat_set_async(int unit, bcm_gport_t gport, bcm_cos_queue_t cosq, bcm_cosq_gport_stats_t stat, uint64 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_gport_traverse_async(int unit, bcm_cosq_gport_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_mapping_get_async(int unit, bcm_cos_t priority, bcm_cos_queue_t * cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_mapping_set_async(int unit, bcm_cos_t priority, bcm_cos_queue_t cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_port_bandwidth_get_async(int unit, bcm_port_t port, bcm_cos_queue_t cosq, uint32 * kbits_sec_min, uint32 * kbits_sec_max, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_port_bandwidth_set_async(int unit, bcm_port_t port, bcm_cos_queue_t cosq, uint32 kbits_sec_min, uint32 kbits_sec_max, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_port_mapping_get_async(int unit, bcm_port_t port, bcm_cos_t priority, bcm_cos_queue_t * cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_port_mapping_set_async(int unit, bcm_port_t port, bcm_cos_t priority, bcm_cos_queue_t cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_port_sched_get_async(int unit, bcm_pbmp_t pbm, int * mode, int weights[BCM_COS_COUNT], int * delay, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_port_sched_set_async(int unit, bcm_pbmp_t pbm, int mode, const int weights[BCM_COS_COUNT], int delay, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_sched_get_async(int unit, int * mode, int weights[BCM_COS_COUNT], int * delay, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_sched_set_async(int unit, int mode, const int weights[BCM_COS_COUNT], int delay, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_cosq_sched_weight_max_get_async(int unit, int mode, int * weight_max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_custom_port_get_async(int unit, bcm_port_t port, int type, uint32 args[BCM_CUSTOM_ARGS_MAX], bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_custom_port_set_async(int unit, bcm_port_t port, int type, uint32 args[BCM_CUSTOM_ARGS_MAX], bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_custom_register_async(int unit, bcm_custom_cb_t func, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_custom_unregister_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_dmux_config_get_async(int unit, bcm_port_t port, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_dmux_config_set_async(int unit, bcm_port_t port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_dmux_dest_add_async(int unit, bcm_port_t port, int dest_mod, bcm_port_t dest_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_dmux_dest_delete_async(int unit, bcm_port_t port, int dest_mod, bcm_port_t dest_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_dmux_dest_delete_all_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_dmux_dest_get_async(int unit, bcm_port_t port, int dest_mod, bcm_pbmp_t * dest_pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_dmux_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_dmux_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ds_classifier_create_async(int unit, int dpid, bcm_ds_clfr_t * clfr, bcm_ds_inprofile_actn_t * inp_actn, bcm_ds_outprofile_actn_t * outp_actn, bcm_ds_nomatch_actn_t * nm_actn, int * cfid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ds_classifier_create_id_async(int unit, int dpid, bcm_ds_clfr_t * clfr, bcm_ds_inprofile_actn_t * inp_actn, bcm_ds_outprofile_actn_t * outp_actn, bcm_ds_nomatch_actn_t * nm_actn, int cfid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ds_classifier_delete_async(int unit, int dpid, int cfid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ds_classifier_get_async(int unit, int dpid, int cfid, bcm_ds_clfr_t * clfr, bcm_ds_inprofile_actn_t * inp_actn, bcm_ds_outprofile_actn_t * outp_actn, bcm_ds_nomatch_actn_t * nm_actn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ds_classifier_traverse_async(int unit, int dpid, bcm_ds_classifier_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ds_classifier_update_async(int unit, int dpid, int cfid, uint32 flags, bcm_ds_inprofile_actn_t * inp_actn, bcm_ds_outprofile_actn_t * outp_actn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ds_counter_get_async(int unit, int dpid, int cfid, bcm_ds_counters_t * counter, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ds_datapath_create_async(int unit, uint32 flags, bcm_pbmp_t ports, int * dpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ds_datapath_create_id_async(int unit, uint32 flags, bcm_pbmp_t ports, int dpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ds_datapath_delete_async(int unit, int dpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ds_datapath_install_async(int unit, int dpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ds_dpid_cfid_bind_async(int unit, void * mibid, int dpid, int cfid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ds_dpid_cfid_get_async(int unit, void * mibid, int dpid, int * cfid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ds_dpid_cfid_unbind_async(int unit, void * mibid, int dpid, int cfid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ds_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ds_scheduler_add_async(int unit, int dpid, bcm_ds_scheduler_t * scheduler, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_bandwidth_get_async(int unit, bcm_port_t port, bcm_eav_stream_class_t type, uint32 * bytes_sec, uint32 * bytes_burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_bandwidth_set_async(int unit, bcm_port_t port, bcm_eav_stream_class_t type, uint32 bytes_sec, uint32 bytes_burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_control_get_async(int unit, bcm_eav_control_t type, uint32 * arg, uint32 * arg2, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_control_set_async(int unit, bcm_eav_control_t type, uint32 arg, uint32 arg2, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_link_status_get_async(int unit, bcm_port_t port, int * link, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_link_status_set_async(int unit, bcm_port_t port, int link, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_pcp_mapping_get_async(int unit, bcm_eav_stream_class_t type, int * pcp, int * remapped_pcp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_pcp_mapping_set_async(int unit, bcm_eav_stream_class_t type, int pcp, int remapped_pcp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_port_enable_get_async(int unit, bcm_port_t port, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_port_enable_set_async(int unit, bcm_port_t port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_srp_mac_ethertype_get_async(int unit, bcm_mac_t mac, bcm_port_ethertype_t * ethertype, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_srp_mac_ethertype_set_async(int unit, bcm_mac_t mac, bcm_port_ethertype_t ethertype, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_timestamp_get_async(int unit, bcm_port_t port, uint32 * timestamp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_timesync_mac_get_async(int unit, bcm_mac_t eav_mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_eav_timesync_mac_set_async(int unit, bcm_mac_t eav_mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_control_get_async(int unit, bcm_fabric_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_control_redundancy_register_async(int unit, bcm_fabric_control_redundancy_handler_t f, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_control_redundancy_unregister_async(int unit, bcm_fabric_control_redundancy_handler_t f, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_control_set_async(int unit, bcm_fabric_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_crossbar_connection_get_async(int unit, int xbar, int src_modid, bcm_port_t src_xbport, int dst_modid, bcm_port_t * dst_xbport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_crossbar_connection_set_async(int unit, int xbar, int src_modid, bcm_port_t src_xbport, int dst_modid, bcm_port_t dst_xbport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_crossbar_enable_get_async(int unit, uint64 * xbars, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_crossbar_enable_set_async(int unit, uint64 xbars, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_crossbar_mapping_get_async(int unit, int modid, int switch_fabric_arbiter_id, int xbar, bcm_port_t * port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_crossbar_mapping_set_async(int unit, int modid, int switch_fabric_arbiter_id, int xbar, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_crossbar_status_get_async(int unit, uint64 * xbars, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_distribution_create_async(int unit, uint32 flags, bcm_fabric_distribution_t * ds_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_distribution_destroy_async(int unit, bcm_fabric_distribution_t ds_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_distribution_get_async(int unit, bcm_fabric_distribution_t ds_id, int max_count, int * dist_modids, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_distribution_set_async(int unit, bcm_fabric_distribution_t ds_id, int modid_count, int * dist_modids, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_packet_adjust_get_async(int unit, int pkt_adjust_selector, int * pkt_adjust_len, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_packet_adjust_set_async(int unit, int pkt_adjust_selector, int pkt_adjust_len, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_port_failover_get_async(int unit, bcm_gport_t port, bcm_failover_t * failover_id, bcm_gport_t * failover_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_fabric_port_failover_set_async(int unit, bcm_gport_t port, bcm_failover_t failover_id, bcm_gport_t failover_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_failover_create_async(int unit, uint32 flags, bcm_failover_t * failover_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_failover_destroy_async(int unit, bcm_failover_t failover_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_failover_get_async(int unit, bcm_failover_t failover_id, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_failover_set_async(int unit, bcm_failover_t failover_id, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ffpcounter_create_async(int unit, int port, int * ffpcounterid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ffpcounter_delete_async(int unit, int port, int ffpcounterid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ffpcounter_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ffpcounter_get_async(int unit, int port, int ffpcounterid, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ffpcounter_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ffpcounter_set_async(int unit, int port, int ffpcounterid, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ffppacketcounter_get_async(int unit, int port, int mid, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ffppacketcounter_set_async(int unit, int port, int mid, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_add_async(int unit, bcm_field_entry_t entry, bcm_field_action_t action, uint32 param0, uint32 param1, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_delete_async(int unit, bcm_field_entry_t entry, bcm_field_action_t action, uint32 param0, uint32 param1, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_get_async(int unit, bcm_field_entry_t entry, bcm_field_action_t action, uint32 * param0, uint32 * param1, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_ports_add_async(int unit, bcm_field_entry_t entry, bcm_field_action_t action, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_ports_get_async(int unit, bcm_field_entry_t entry, bcm_field_action_t action, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_remove_async(int unit, bcm_field_entry_t entry, bcm_field_action_t action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_action_remove_all_async(int unit, bcm_field_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_control_get_async(int unit, bcm_field_control_t control, uint32 * state, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_control_set_async(int unit, bcm_field_control_t control, uint32 state, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_counter_create_async(int unit, bcm_field_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_counter_destroy_async(int unit, bcm_field_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_counter_get_async(int unit, bcm_field_entry_t entry, int counter_num, uint64 * valp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_counter_get32_async(int unit, bcm_field_entry_t entry, int counter_num, uint32 * valp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_counter_set_async(int unit, bcm_field_entry_t entry, int counter_num, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_counter_set32_async(int unit, bcm_field_entry_t entry, int counter_num, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_counter_share_async(int unit, bcm_field_entry_t src_entry, bcm_field_entry_t dst_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_data_qualifier_create_async(int unit, bcm_field_data_qualifier_t * data_qualifier, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_data_qualifier_destroy_async(int unit, int qual_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_data_qualifier_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_data_qualifier_ethertype_add_async(int unit, int qual_id, bcm_field_data_ethertype_t * etype, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_data_qualifier_ethertype_delete_async(int unit, int qual_id, bcm_field_data_ethertype_t * etype, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_data_qualifier_ip_protocol_add_async(int unit, int qual_id, bcm_field_data_ip_protocol_t * ip_protocol, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_data_qualifier_ip_protocol_delete_async(int unit, int qual_id, bcm_field_data_ip_protocol_t * ip_protocol, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_data_qualifier_packet_format_add_async(int unit, int qual_id, bcm_field_data_packet_format_t * packet_format, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_data_qualifier_packet_format_delete_async(int unit, int qual_id, bcm_field_data_packet_format_t * packet_format, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_copy_async(int unit, bcm_field_entry_t src_entry, bcm_field_entry_t * dst_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_copy_id_async(int unit, bcm_field_entry_t src_entry, bcm_field_entry_t dst_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_create_async(int unit, bcm_field_group_t group, bcm_field_entry_t * entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_create_id_async(int unit, bcm_field_group_t group, bcm_field_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_destroy_async(int unit, bcm_field_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	BROADCOM_DEBUG
void	bcm_field_entry_dump_async(int unit, bcm_field_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BROADCOM_DEBUG */
void	bcm_field_entry_install_async(int unit, bcm_field_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_policer_attach_async(int unit, bcm_field_entry_t entry_id, int level, bcm_policer_t policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_policer_detach_async(int unit, bcm_field_entry_t entry_id, int level, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_policer_detach_all_async(int unit, bcm_field_entry_t entry_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_policer_get_async(int unit, bcm_field_entry_t entry_id, int level, bcm_policer_t * policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_prio_get_async(int unit, bcm_field_entry_t entry, int * prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_prio_set_async(int unit, bcm_field_entry_t entry, int prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_reinstall_async(int unit, bcm_field_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_entry_remove_async(int unit, bcm_field_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_compress_async(int unit, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_create_async(int unit, bcm_field_qset_t qset, int pri, bcm_field_group_t * group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_create_id_async(int unit, bcm_field_qset_t qset, int pri, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_create_mode_async(int unit, bcm_field_qset_t qset, int pri, bcm_field_group_mode_t mode, bcm_field_group_t * group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_create_mode_id_async(int unit, bcm_field_qset_t qset, int pri, bcm_field_group_mode_t mode, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_destroy_async(int unit, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	BROADCOM_DEBUG
void	bcm_field_group_dump_async(int unit, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BROADCOM_DEBUG */
void	bcm_field_group_enable_get_async(int unit, bcm_field_group_t group, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_enable_set_async(int unit, bcm_field_group_t group, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_flush_async(int unit, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_get_async(int unit, bcm_field_group_t group, bcm_field_qset_t * qset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_install_async(int unit, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_mode_get_async(int unit, bcm_field_group_t group, bcm_field_group_mode_t * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_port_create_mode_async(int unit, bcm_port_t port, bcm_field_qset_t qset, int pri, bcm_field_group_mode_t mode, bcm_field_group_t * group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_port_create_mode_id_async(int unit, bcm_port_t port, bcm_field_qset_t qset, int pri, bcm_field_group_mode_t mode, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_ports_create_mode_async(int unit, bcm_pbmp_t pbmp, bcm_field_qset_t qset, int pri, bcm_field_group_mode_t mode, bcm_field_group_t * group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_ports_create_mode_id_async(int unit, bcm_pbmp_t pbmp, bcm_field_qset_t qset, int pri, bcm_field_group_mode_t mode, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_priority_get_async(int unit, bcm_field_group_t group, int * priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_priority_set_async(int unit, bcm_field_group_t group, int priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_remove_async(int unit, bcm_field_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_satisfies_qset_async(int unit, bcm_field_group_t group, bcm_field_qset_t qset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_set_async(int unit, bcm_field_group_t group, bcm_field_qset_t qset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_group_status_get_async(int unit, bcm_field_group_t group, bcm_field_group_status_t * status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_meter_create_async(int unit, bcm_field_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_meter_destroy_async(int unit, bcm_field_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_meter_get_async(int unit, bcm_field_entry_t entry, int meter_num, uint32 * kbits_sec, uint32 * kbits_burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_meter_set_async(int unit, bcm_field_entry_t entry, int meter_num, uint32 kbits_sec, uint32 kbits_burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_meter_share_async(int unit, bcm_field_entry_t src_entry, bcm_field_entry_t dst_entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qset_add_udf_async(int unit, bcm_field_qset_t * qset, bcm_field_udf_t udf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qset_data_qualifier_add_async(int unit, bcm_field_qset_t * qset, int qual_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_BigIcmpCheck_async(int unit, bcm_field_entry_t entry, uint32 flag, uint32 size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DSCP_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Decap_async(int unit, bcm_field_entry_t entry, bcm_field_decap_t decap, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DosAttack_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Drop_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstClassField_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstClassL2_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstClassL3_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIp_async(int unit, bcm_field_entry_t entry, bcm_ip_t data, bcm_ip_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIp6_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstIp6High_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstMac_async(int unit, bcm_field_entry_t entry, bcm_mac_t data, bcm_mac_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstModid_async(int unit, bcm_field_entry_t entry, bcm_module_t data, bcm_module_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstPort_async(int unit, bcm_field_entry_t entry, bcm_module_t data_modid, bcm_module_t mask_modid, bcm_port_t data_port, bcm_port_t mask_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstPortTgid_async(int unit, bcm_field_entry_t entry, bcm_port_t data, bcm_port_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_DstTrunk_async(int unit, bcm_field_entry_t entry, bcm_trunk_t data, bcm_trunk_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EqualL4Port_async(int unit, bcm_field_entry_t entry, uint32 flag, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_EtherType_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExtensionHeaderSubCode_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ExtensionHeaderType_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_ForwardingVlanValid_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_HiGig_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IcmpTypeCode_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IgmpTypeMaxRespTime_async(int unit, bcm_field_entry_t entry, uint16 data, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InPort_async(int unit, bcm_field_entry_t entry, bcm_port_t data, bcm_port_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InPorts_async(int unit, bcm_field_entry_t entry, bcm_pbmp_t data, bcm_pbmp_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IngressStpState_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerDSCP_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerDstIp_async(int unit, bcm_field_entry_t entry, bcm_ip_t data, bcm_ip_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerDstIp6_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerDstIp6High_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIpFrag_async(int unit, bcm_field_entry_t entry, bcm_field_IpFrag_t frag_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerIpProtocol_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerSrcIp_async(int unit, bcm_field_entry_t entry, bcm_ip_t data, bcm_ip_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerSrcIp6_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerSrcIp6High_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerTpid_async(int unit, bcm_field_entry_t entry, uint16 tpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerTtl_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InnerVlan_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassL2_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassL3_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_InterfaceClassPort_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ip6FlowLabel_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ip6HopLimit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ip6NextHeader_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ip6TrafficClass_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpAuth_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpFlags_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpFrag_async(int unit, bcm_field_entry_t entry, bcm_field_IpFrag_t frag_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpInfo_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpProtocol_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpProtocolCommon_async(int unit, bcm_field_entry_t entry, bcm_field_IpProtocolCommon_t protocol, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpType_async(int unit, bcm_field_entry_t entry, bcm_field_IpType_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_IpmcStarGroupHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2CacheHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2DestHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2Format_async(int unit, bcm_field_entry_t entry, bcm_field_L2Format_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2SrcHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2SrcStatic_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L2StationMove_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3DestHostHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3DestRouteHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3IntfGroup_async(int unit, bcm_field_entry_t entry, bcm_if_group_t data, bcm_if_group_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3Routable_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L3SrcHostHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L4DstPort_async(int unit, bcm_field_entry_t entry, bcm_l4_port_t data, bcm_l4_port_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L4Ports_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_L4SrcPort_async(int unit, bcm_field_entry_t entry, bcm_l4_port_t data, bcm_l4_port_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Llc_async(int unit, bcm_field_entry_t entry, bcm_field_llc_header_t data, bcm_field_llc_header_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LookupClass0_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_LookupStatus_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MHOpcode_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MirrorCopy_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_MplsTerminated_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OutPort_async(int unit, bcm_field_entry_t entry, bcm_port_t data, bcm_port_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OutPorts_async(int unit, bcm_field_entry_t entry, bcm_pbmp_t data, bcm_pbmp_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterTpid_async(int unit, bcm_field_entry_t entry, uint16 tpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_OuterVlan_async(int unit, bcm_field_entry_t entry, bcm_vlan_t data, bcm_vlan_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PacketFormat_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PacketRes_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_PortClass_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_RangeCheck_async(int unit, bcm_field_entry_t entry, bcm_field_range_t range, int invert, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Snap_async(int unit, bcm_field_entry_t entry, bcm_field_snap_header_t data, bcm_field_snap_header_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcClassField_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcClassL2_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcClassL3_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIp_async(int unit, bcm_field_entry_t entry, bcm_ip_t data, bcm_ip_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIp6_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIp6High_async(int unit, bcm_field_entry_t entry, bcm_ip6_t data, bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcIpEqualDstIp_async(int unit, bcm_field_entry_t entry, uint32 flag, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcMac_async(int unit, bcm_field_entry_t entry, bcm_mac_t data, bcm_mac_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcMacGroup_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcModid_async(int unit, bcm_field_entry_t entry, bcm_module_t data, bcm_module_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcPort_async(int unit, bcm_field_entry_t entry, bcm_module_t data_modid, bcm_module_t mask_modid, bcm_port_t data_port, bcm_port_t mask_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcPortTgid_async(int unit, bcm_field_entry_t entry, bcm_port_t data, bcm_port_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_SrcTrunk_async(int unit, bcm_field_entry_t entry, bcm_trunk_t data, bcm_trunk_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Stage_async(int unit, bcm_field_entry_t entry, bcm_field_stage_t stage, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TcpControl_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TcpHeaderSize_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TcpSequenceZero_async(int unit, bcm_field_entry_t entry, uint32 flag, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Tos_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Ttl_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_TunnelTerminated_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_UserDefined_async(int unit, bcm_field_entry_t entry, bcm_field_udf_t udf_id, uint8 data[BCM_FIELD_USER_FIELD_SIZE], uint8 mask[BCM_FIELD_USER_FIELD_SIZE], bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VlanFormat_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_VlanTranslationHit_async(int unit, bcm_field_entry_t entry, uint8 data, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_Vrf_async(int unit, bcm_field_entry_t entry, uint32 data, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_clear_async(int unit, bcm_field_entry_t entry, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_qualify_data_async(int unit, bcm_field_entry_t eid, int qual_id, uint8 * data, uint8 * mask, uint16 length, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_range_create_async(int unit, bcm_field_range_t * range, uint32 flags, bcm_l4_port_t min, bcm_l4_port_t max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_range_create_id_async(int unit, bcm_field_range_t range, uint32 flags, bcm_l4_port_t min, bcm_l4_port_t max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_range_destroy_async(int unit, bcm_field_range_t range, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_range_get_async(int unit, bcm_field_range_t range, uint32 * flags, bcm_l4_port_t * min, bcm_l4_port_t * max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_range_group_create_async(int unit, bcm_field_range_t * range, uint32 flags, bcm_l4_port_t min, bcm_l4_port_t max, bcm_if_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_range_group_create_id_async(int unit, bcm_field_range_t range, uint32 flags, bcm_l4_port_t min, bcm_l4_port_t max, bcm_if_group_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_resync_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	BROADCOM_DEBUG
void	bcm_field_show_async(int unit, const char * pfx, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BROADCOM_DEBUG */
void	bcm_field_status_get_async(int unit, bcm_field_status_t * status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_udf_create_async(int unit, bcm_field_udf_spec_t * udf_spec, bcm_field_udf_t * udf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_udf_create_id_async(int unit, bcm_field_udf_spec_t * udf_spec, bcm_field_udf_t udf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_udf_destroy_async(int unit, bcm_field_udf_t udf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_udf_ethertype_get_async(int unit, int index, bcm_port_frametype_t * frametype, bcm_port_ethertype_t * ethertype, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_udf_ethertype_set_async(int unit, int index, bcm_port_frametype_t frametype, bcm_port_ethertype_t ethertype, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_udf_get_async(int unit, bcm_field_udf_spec_t * udf_spec, bcm_field_udf_t udf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_udf_ipprotocol_get_async(int unit, int index, uint32 * flags, uint8 * proto, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_udf_ipprotocol_set_async(int unit, int index, uint32 flags, uint8 proto, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_udf_spec_get_async(int unit, bcm_field_udf_spec_t * udf_spec, uint32 * flags, uint32 * offset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_field_udf_spec_set_async(int unit, bcm_field_udf_spec_t * udf_spec, uint32 flags, uint32 offset, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_filter_action_match_async(int unit, bcm_filterid_t f, bcm_filter_action_t action, uint32 param, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_filter_action_no_match_async(int unit, bcm_filterid_t f, bcm_filter_action_t action, uint32 param, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_filter_action_out_profile_async(int unit, bcm_filterid_t f, bcm_filter_action_t action, uint32 param, int meter_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_filter_copy_async(int unit, bcm_filterid_t f_src, bcm_filterid_t * f_return, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_filter_copy_id_async(int unit, bcm_filterid_t f_src, bcm_filterid_t f_dest, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_filter_create_async(int unit, bcm_filterid_t * f_return, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_filter_create_id_async(int unit, bcm_filterid_t f, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_filter_destroy_async(int unit, bcm_filterid_t f, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	BROADCOM_DEBUG
void	bcm_filter_dump_async(int unit, bcm_filterid_t f, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BROADCOM_DEBUG */
void	bcm_filter_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_filter_install_async(int unit, bcm_filterid_t f, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_filter_qualify_broadcast_async(int unit, bcm_filterid_t f, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_filter_qualify_data_async(int unit, bcm_filterid_t f, int offset, int len, const uint8 * data, const uint8 * mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_filter_qualify_data16_async(int unit, bcm_filterid_t f, int offset, uint16 val, uint16 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_filter_qualify_data32_async(int unit, bcm_filterid_t f, int offset, uint32 val, uint32 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_filter_qualify_data8_async(int unit, bcm_filterid_t f, int offset, uint8 val, uint8 mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_filter_qualify_data_cvt_async(int unit, bcm_filterid_t f, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_filter_qualify_egress_async(int unit, bcm_filterid_t f, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_filter_qualify_egress_modid_async(int unit, bcm_filterid_t f, int module_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_filter_qualify_format_async(int unit, bcm_filterid_t f, bcm_filter_format_t format, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_filter_qualify_ingress_async(int unit, bcm_filterid_t f, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_filter_qualify_known_mcast_async(int unit, bcm_filterid_t f, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_filter_qualify_known_ucast_async(int unit, bcm_filterid_t f, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_filter_qualify_priority_async(int unit, bcm_filterid_t f, int prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_filter_qualify_stop_async(int unit, bcm_filterid_t f, int partial_match, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_filter_qualify_unknown_mcast_async(int unit, bcm_filterid_t f, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_filter_qualify_unknown_ucast_async(int unit, bcm_filterid_t f, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_filter_reinstall_async(int unit, bcm_filterid_t f, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_filter_remove_async(int unit, bcm_filterid_t f, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_filter_remove_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	BROADCOM_DEBUG
void	bcm_filter_show_async(int unit, const char * pfx, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BROADCOM_DEBUG */
void	bcm_find_async(char * type, char * subtype, int remunit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_htls_egress_port_get_async(int unit, bcm_port_t port, int * ttl, uint16 * mmc_type, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_htls_egress_port_set_async(int unit, bcm_port_t port, int ttl, uint16 mmc_type, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_htls_mode_get_async(int unit, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_htls_mode_set_async(int unit, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_htls_tunnel_label_get_async(int unit, bcm_port_t port, uint32 * tunnel_label, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_htls_tunnel_label_set_async(int unit, bcm_port_t port, uint32 tunnel_label, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_htls_uplink_da_get_async(int unit, bcm_port_t port, bcm_mac_t dest_mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_htls_uplink_da_set_async(int unit, bcm_port_t port, bcm_mac_t dest_mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_htls_uplink_sa_get_async(int unit, bcm_port_t port, bcm_mac_t src_mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_htls_uplink_sa_set_async(int unit, bcm_port_t port, bcm_mac_t src_mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_htls_vclabel_get_async(int unit, bcm_port_t port, uint32 * vc_label, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_htls_vclabel_set_async(int unit, bcm_port_t port, uint32 vc_label, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_I2C
void	bcm_i2c_ioctl_async(int unit, int fd, int opcode, void * data, int len, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_i2c_open_async(int unit, char * devname, uint32 flags, int speed, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_i2c_read_async(int unit, int fd, uint32 addr, uint8 * data, uint32 * nbytes, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_i2c_write_async(int unit, int fd, uint32 addr, uint8 * data, uint32 nbytes, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_I2C */
void	bcm_igmp_snooping_enable_get_async(int unit, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_igmp_snooping_enable_set_async(int unit, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_igmp_snooping_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_info_get_async(int unit, bcm_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_init_check_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_init_phy_id_map_async(int unit, int map[], bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_init_selective_async(int unit, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcm_ip6_mask_create_async(bcm_ip6_t ip6, int len, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ip6_mask_length_async(bcm_ip6_t mask, bcm_async_cb_t async_callback, void *async_cookie);
/* bcm_ip_mask_create has a non int return type */
void	bcm_ip_mask_length_async(bcm_ip_t ip, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcm_ipfix_config_get_async(int unit, bcm_ipfix_stage_t stage, bcm_port_t port, bcm_ipfix_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_config_set_async(int unit, bcm_ipfix_stage_t stage, bcm_port_t port, bcm_ipfix_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_register_async(int unit, bcm_ipfix_callback_t callback, void * userdata, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipfix_unregister_async(int unit, bcm_ipfix_callback_t callback, void * userdata, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcm_ipmc_add_async(int unit, bcm_ipmc_addr_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_add_l2_ports_async(int unit, bcm_ip_t s_ip_addr, bcm_ip_t mc_ip_addr, bcm_vlan_t vid, bcm_pbmp_t pbmp, bcm_pbmp_t ut_pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_add_l3_ports_async(int unit, bcm_ip_t s_ip_addr, bcm_ip_t mc_ip_addr, bcm_vlan_t vid, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_age_async(int unit, uint32 flags, bcm_ipmc_traverse_cb age_cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_bitmap_del_async(int unit, int ipmc_idx, bcm_port_t port, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_bitmap_get_async(int unit, int ipmc_idx, bcm_port_t port, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_bitmap_max_get_async(int unit, int * max_index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_bitmap_set_async(int unit, int ipmc_idx, bcm_port_t port, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_cos_set_async(int unit, bcm_ip_t s_ip_addr, bcm_ip_t mc_ip_addr, bcm_vlan_t vid, int cos, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_counters_get_async(int unit, bcm_port_t port, bcm_ipmc_counters_t * counters, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_delete_async(int unit, bcm_ip_t s_ip_addr, bcm_ip_t mc_ip_addr, bcm_vlan_t vid, int keep, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_delete_l2_ports_async(int unit, bcm_ip_t s_ip_addr, bcm_ip_t mc_ip_addr, bcm_vlan_t vid, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_delete_l3_port_async(int unit, bcm_ip_t s_ip_addr, bcm_ip_t mc_ip_addr, bcm_vlan_t vid, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_egress_intf_add_async(int unit, int mc_index, bcm_port_t port, bcm_l3_intf_t * l3_intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_egress_intf_delete_async(int unit, int mc_index, bcm_port_t port, bcm_l3_intf_t * l3_intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_egress_intf_delete_all_async(int unit, int mc_index, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_egress_intf_get_async(int unit, int mc_index, bcm_port_t port, int if_max, bcm_if_t * if_array, int * if_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_egress_intf_set_async(int unit, int mc_index, bcm_port_t port, int if_count, bcm_if_t * if_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_egress_port_get_async(int unit, bcm_port_t port, bcm_mac_t mac, int * untag, bcm_vlan_t * vid, int * ttl_threshold, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_egress_port_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_egress_port_set_async(int unit, bcm_port_t port, const bcm_mac_t mac, int untag, bcm_vlan_t vid, int ttl_threshold, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_enable_async(int unit, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_entry_enable_set_async(int unit, bcm_ip_t s_ip_addr, bcm_ip_t mc_ip_addr, bcm_vlan_t vid, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_find_async(int unit, bcm_ipmc_addr_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_get_async(int unit, bcm_ip_t s_ip_addr, bcm_ip_t mc_ip_addr, bcm_vlan_t vid, bcm_ipmc_addr_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_get_by_index_async(int unit, int index, bcm_ipmc_addr_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_port_modid_set_async(int unit, bcm_ip_t s_ip_addr, bcm_ip_t mc_ip_addr, bcm_vlan_t vid, int mod_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_port_tgid_set_async(int unit, bcm_ip_t s_ip_addr, bcm_ip_t mc_ip_addr, bcm_vlan_t vid, int ts, int port_tgid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_remove_async(int unit, bcm_ipmc_addr_t * data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_remove_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_repl_add_async(int unit, int index, bcm_pbmp_t pbmp, bcm_vlan_t vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_repl_delete_async(int unit, int index, bcm_pbmp_t pbmp, bcm_vlan_t vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_repl_delete_all_async(int unit, int index, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_repl_get_async(int unit, int index, bcm_port_t port, bcm_vlan_vector_t vlan_vec, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_repl_set_async(int unit, int mc_index, bcm_port_t port, bcm_vlan_vector_t vlan_vec, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_source_ip_search_async(int unit, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_source_port_check_async(int unit, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_sport_mismatch_action_async(int unit, bcm_ip_t s_ip_addr, bcm_ip_t mc_ip_addr, bcm_vlan_t vid, int cd, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_traverse_async(int unit, uint32 flags, bcm_ipmc_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_ipmc_ttl_threshold_set_async(int unit, bcm_ip_t s_ip_addr, bcm_ip_t mc_ip_addr, bcm_vlan_t vid, int ttl_threshold, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcm_l2_addr_add_async(int unit, bcm_l2_addr_t * l2addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_delete_async(int unit, bcm_mac_t mac, bcm_vlan_t vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_delete_by_mac_async(int unit, bcm_mac_t mac, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_delete_by_mac_port_async(int unit, bcm_mac_t mac, bcm_module_t mod, bcm_port_t port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_delete_by_port_async(int unit, bcm_module_t mod, bcm_port_t port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_delete_by_trunk_async(int unit, bcm_trunk_t tid, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_delete_by_vlan_async(int unit, bcm_vlan_t vid, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_delete_by_vlan_port_async(int unit, bcm_vlan_t vid, bcm_module_t mod, bcm_port_t port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_delete_by_vlan_trunk_async(int unit, bcm_vlan_t vid, bcm_trunk_t tid, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_freeze_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_get_async(int unit, bcm_mac_t mac_addr, bcm_vlan_t vid, bcm_l2_addr_t * l2addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_register_async(int unit, bcm_l2_addr_callback_t callback, void * userdata, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_thaw_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_addr_unregister_async(int unit, bcm_l2_addr_callback_t callback, void * userdata, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_age_timer_get_async(int unit, int * age_seconds, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_age_timer_set_async(int unit, int age_seconds, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_bpdu_count_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_bpdu_get_async(int unit, int index, bcm_mac_t * addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_bpdu_set_async(int unit, int index, bcm_mac_t addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_cache_delete_async(int unit, int index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_cache_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_cache_get_async(int unit, int index, bcm_l2_cache_addr_t * addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_cache_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_cache_set_async(int unit, int index, bcm_l2_cache_addr_t * addr, int * index_used, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_cache_size_get_async(int unit, int * size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_clear_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_conflict_get_async(int unit, bcm_l2_addr_t * addr, bcm_l2_addr_t * cf_array, int cf_max, int * cf_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_egress_create_async(int unit, bcm_l2_egress_t * egr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_egress_destroy_async(int unit, bcm_if_t encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_egress_find_async(int unit, bcm_l2_egress_t * egr, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_egress_get_async(int unit, bcm_if_t encap_id, bcm_l2_egress_t * egr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_egress_traverse_async(int unit, bcm_l2_egress_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_key_dump_async(int unit, char * pfx, bcm_l2_addr_t * entry, char * sfx, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_learn_class_get_async(int unit, int lclass, int * lclass_prio, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_learn_class_set_async(int unit, int lclass, int lclass_prio, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_learn_limit_get_async(int unit, bcm_l2_learn_limit_t * limit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_learn_limit_set_async(int unit, bcm_l2_learn_limit_t * limit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_learn_port_class_get_async(int unit, bcm_gport_t port, int * lclass, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_learn_port_class_set_async(int unit, bcm_gport_t port, int lclass, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_port_native_async(int unit, int modid, int port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_replace_async(int unit, uint32 flags, bcm_l2_addr_t * match_addr, bcm_module_t new_module, bcm_port_t new_port, bcm_trunk_t new_trunk, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_stat_enable_set_async(int unit, bcm_l2_addr_t * l2_addr, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_stat_get_async(int unit, bcm_l2_addr_t * l2_addr, bcm_l2_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_stat_get32_async(int unit, bcm_l2_addr_t * l2_addr, bcm_l2_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_stat_set_async(int unit, bcm_l2_addr_t * l2_addr, bcm_l2_stat_t stat, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_stat_set32_async(int unit, bcm_l2_addr_t * l2_addr, bcm_l2_stat_t stat, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_traverse_async(int unit, bcm_l2_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_tunnel_add_async(int unit, bcm_mac_t mac, bcm_vlan_t vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_tunnel_delete_async(int unit, bcm_mac_t mac, bcm_vlan_t vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l2_tunnel_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcm_l3_age_async(int unit, uint32 flags, bcm_l3_age_cb age_out, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_cleanup_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_conflict_get_async(int unit, bcm_l3_key_t * ipkey, bcm_l3_key_t * cf_array, int cf_max, int * cf_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_defip_add_async(int unit, bcm_l3_route_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_defip_age_async(int unit, bcm_l3_route_traverse_cb age_out, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_defip_delete_async(int unit, bcm_l3_route_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_defip_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_defip_delete_by_interface_async(int unit, int intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_defip_find_index_async(int unit, int index, bcm_l3_route_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_defip_get_async(int unit, bcm_l3_route_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_defip_max_ecmp_get_async(int unit, int * max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_defip_max_ecmp_set_async(int unit, int max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_create_async(int unit, uint32 flags, bcm_l3_egress_t * egr, bcm_if_t * if_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_destroy_async(int unit, bcm_if_t intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_find_async(int unit, bcm_l3_egress_t * egr, bcm_if_t * intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_get_async(int unit, bcm_if_t intf, bcm_l3_egress_t * egr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_multipath_add_async(int unit, bcm_if_t mpintf, bcm_if_t intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_multipath_create_async(int unit, uint32 flags, int intf_count, bcm_if_t * intf_array, bcm_if_t * mpintf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_multipath_delete_async(int unit, bcm_if_t mpintf, bcm_if_t intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_multipath_destroy_async(int unit, bcm_if_t mpintf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_multipath_find_async(int unit, int intf_count, bcm_if_t * intf_array, bcm_if_t * mpintf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_multipath_get_async(int unit, bcm_if_t mpintf, int intf_size, bcm_if_t * intf_array, int * intf_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_multipath_traverse_async(int unit, bcm_l3_egress_multipath_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_stat_enable_set_async(int unit, bcm_l3_egress_t * egr, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_stat_get_async(int unit, bcm_l3_egress_t * egr, bcm_l3_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_stat_get32_async(int unit, bcm_l3_egress_t * egr, bcm_l3_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_stat_set_async(int unit, bcm_l3_egress_t * egr, bcm_l3_stat_t stat, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_stat_set32_async(int unit, bcm_l3_egress_t * egr, bcm_l3_stat_t stat, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_egress_traverse_async(int unit, bcm_l3_egress_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_enable_set_async(int unit, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_add_async(int unit, bcm_l3_host_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_age_async(int unit, uint32 flags, bcm_l3_host_traverse_cb age_cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_conflict_get_async(int unit, bcm_l3_key_t * ipkey, bcm_l3_key_t * cf_array, int cf_max, int * cf_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_delete_async(int unit, bcm_l3_host_t * ip_addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_delete_all_async(int unit, bcm_l3_host_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_delete_by_interface_async(int unit, bcm_l3_host_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_delete_by_network_async(int unit, bcm_l3_route_t * ip_addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_find_async(int unit, bcm_l3_host_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_invalidate_entry_async(int unit, bcm_ip_t info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_stat_enable_set_async(int unit, bcm_l3_host_t * host, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_stat_get_async(int unit, bcm_l3_host_t * host, bcm_l3_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_stat_get32_async(int unit, bcm_l3_host_t * host, bcm_l3_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_stat_set_async(int unit, bcm_l3_host_t * host, bcm_l3_stat_t stat, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_stat_set32_async(int unit, bcm_l3_host_t * host, bcm_l3_stat_t stat, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_traverse_async(int unit, uint32 flags, uint32 start, uint32 end, bcm_l3_host_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_host_validate_entry_async(int unit, bcm_ip_t info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_info_async(int unit, bcm_l3_info_t * l3info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_interface_create_async(int unit, bcm_mac_t mac_addr, bcm_vlan_t vid, int add_to_arl, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_interface_destroy_async(int unit, int intf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_interface_find_async(int unit, int intf_id, bcm_vlan_t * vid, bcm_mac_t mac_addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_interface_find_by_vlan_async(int unit, bcm_vlan_t vid, int * intf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_interface_id_create_async(int unit, bcm_mac_t mac_addr, bcm_vlan_t vid, int intf_idx, int add_to_arl, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_interface_id_update_async(int unit, bcm_mac_t mac_addr, bcm_vlan_t vid, int intf_idx, int add_to_arl, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_interface_lookup_async(int unit, bcm_mac_t mac_addr, bcm_vlan_t vid, int * intf_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_intf_create_async(int unit, bcm_l3_intf_t * intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_intf_delete_async(int unit, bcm_l3_intf_t * intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_intf_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_intf_find_async(int unit, bcm_l3_intf_t * intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_intf_find_vlan_async(int unit, bcm_l3_intf_t * intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_intf_get_async(int unit, bcm_l3_intf_t * intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_invalidate_entry_async(int unit, bcm_ip_t l3_addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ip6_prefix_map_add_async(int unit, bcm_ip6_t ip6_addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ip6_prefix_map_delete_async(int unit, bcm_ip6_t ip6_addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ip6_prefix_map_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ip6_prefix_map_get_async(int unit, int map_size, bcm_ip6_t * ip6_array, int * ip6_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ip_add_async(int unit, bcm_l3_ip_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ip_delete_async(int unit, bcm_ip_t ip_addr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ip_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ip_delete_by_interface_async(int unit, int intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ip_delete_by_prefix_async(int unit, bcm_ip_t ip_addr, bcm_ip_t mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ip_find_async(int unit, bcm_l3_ip_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ip_find_index_async(int unit, int index, bcm_l3_ip_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_ip_update_entry_by_key_async(int unit, bcm_l3_ip_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_add_async(int unit, bcm_l3_route_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_age_async(int unit, uint32 flags, bcm_l3_route_traverse_cb age_out, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_delete_async(int unit, bcm_l3_route_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_delete_all_async(int unit, bcm_l3_route_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_delete_by_interface_async(int unit, bcm_l3_route_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_get_async(int unit, bcm_l3_route_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_max_ecmp_get_async(int unit, int * max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_max_ecmp_set_async(int unit, int max, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_multipath_get_async(int unit, bcm_l3_route_t * the_route, bcm_l3_route_t * path_array, int max_path, int * path_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_enable_set_async(int unit, bcm_l3_route_t * route, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_get_async(int unit, bcm_l3_route_t * route, bcm_l3_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_get32_async(int unit, bcm_l3_route_t * route, bcm_l3_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_set_async(int unit, bcm_l3_route_t * route, bcm_l3_stat_t stat, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_stat_set32_async(int unit, bcm_l3_route_t * route, bcm_l3_stat_t stat, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_route_traverse_async(int unit, uint32 flags, uint32 start, uint32 end, bcm_l3_route_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_status_async(int unit, int * free_l3intf, int * free_l3, int * free_defip, int * free_lpm_blk, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_untagged_update_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_l3_validate_entry_async(int unit, bcm_ip_t l3_addr, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcm_link_change_async(int unit, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_link_wait_async(int unit, bcm_pbmp_t * pbm, int us, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	BROADCOM_DEBUG
void	bcm_linkscan_dump_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BROADCOM_DEBUG */
void	bcm_linkscan_enable_get_async(int unit, int * us, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_enable_port_get_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_enable_set_async(int unit, int us, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_mode_get_async(int unit, bcm_port_t port, int * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_mode_set_async(int unit, bcm_port_t port, int mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_mode_set_pbm_async(int unit, bcm_pbmp_t pbm, int mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_port_register_async(int unit, bcm_port_t port, bcm_linkscan_port_handler_t f, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_port_unregister_async(int unit, bcm_port_t port, bcm_linkscan_port_handler_t f, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_register_async(int unit, bcm_linkscan_handler_t f, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_unregister_async(int unit, bcm_linkscan_handler_t f, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_linkscan_update_async(int unit, bcm_pbmp_t pbm, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_addr_add_async(int unit, bcm_mcast_addr_t * mcaddr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_addr_add_w_l2mcindex_async(int unit, bcm_mcast_addr_t * mcaddr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_addr_remove_async(int unit, bcm_mac_t mac, bcm_vlan_t vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_addr_remove_w_l2mcindex_async(int unit, bcm_mcast_addr_t * mcaddr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_bitmap_del_async(int unit, int mc_idx, bcm_port_t in_port, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_bitmap_get_async(int unit, int mc_idx, bcm_port_t in_port, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_bitmap_max_get_async(int unit, int * max_index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_bitmap_set_async(int unit, int mc_idx, bcm_port_t in_port, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_join_async(int unit, bcm_mac_t mcMacAddr, bcm_vlan_t vlanId, int srcPort, bcm_mcast_addr_t * mcaddr, bcm_pbmp_t * allRouterBmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_leave_async(int unit, bcm_mac_t mcMacAddr, bcm_vlan_t vlanId, int srcPort, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_port_add_async(int unit, bcm_mcast_addr_t * mcaddr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_port_get_async(int unit, bcm_mac_t mac, bcm_vlan_t vid, bcm_mcast_addr_t * mcaddr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mcast_port_remove_async(int unit, bcm_mcast_addr_t * mcaddr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_meter_create_async(int unit, int port, int * mid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_meter_delete_async(int unit, int port, int mid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_meter_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_meter_get_async(int unit, int port, int mid, uint32 * kbits_sec, uint32 * kbits_burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_meter_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_meter_set_async(int unit, int port, int mid, uint32 kbits_sec, uint32 kbits_burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_port_add_async(int unit, bcm_mim_vpn_t vpn, bcm_mim_port_t * mim_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_port_delete_async(int unit, bcm_mim_vpn_t vpn, bcm_gport_t mim_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_port_delete_all_async(int unit, bcm_mim_vpn_t vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_port_get_async(int unit, bcm_mim_vpn_t vpn, bcm_mim_port_t * mim_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_port_get_all_async(int unit, bcm_mim_vpn_t vpn, int port_max, bcm_mim_port_t * port_array, int * port_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_vpn_create_async(int unit, bcm_mim_vpn_config_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_vpn_destroy_async(int unit, bcm_mim_vpn_t vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_vpn_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_vpn_get_async(int unit, bcm_mim_vpn_t vpn, bcm_mim_vpn_config_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mim_vpn_traverse_async(int unit, bcm_mim_vpn_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_destination_create_async(int unit, bcm_mirror_destination_t * mirror_dest, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_destination_destroy_async(int unit, bcm_gport_t mirror_dest_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_destination_get_async(int unit, bcm_gport_t mirror_dest_id, bcm_mirror_destination_t * mirror_dest, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_destination_traverse_async(int unit, bcm_mirror_destination_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_egress_get_async(int unit, bcm_port_t port, int * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_egress_path_get_async(int unit, bcm_module_t modid, bcm_port_t * port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_egress_path_set_async(int unit, bcm_module_t modid, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_egress_set_async(int unit, bcm_port_t port, int val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_ingress_get_async(int unit, bcm_port_t port, int * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_ingress_set_async(int unit, bcm_port_t port, int val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_mode_get_async(int unit, int * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_mode_set_async(int unit, int mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_pfmt_get_async(int unit, int * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_pfmt_set_async(int unit, int val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_dest_add_async(int unit, bcm_port_t port, uint32 flags, bcm_gport_t mirror_dest_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_dest_delete_async(int unit, bcm_port_t port, uint32 flags, bcm_gport_t mirror_dest_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_dest_delete_all_async(int unit, bcm_port_t port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_dest_get_async(int unit, bcm_port_t port, uint32 flags, int mirror_dest_size, bcm_gport_t * mirror_dest, int * mirror_dest_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_get_async(int unit, bcm_port_t port, bcm_module_t * dest_mod, bcm_port_t * dest_port, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_port_set_async(int unit, bcm_port_t port, bcm_module_t dest_mod, bcm_port_t dest_port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_to_get_async(int unit, bcm_port_t * port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_to_pbmp_get_async(int unit, bcm_port_t port, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_to_pbmp_set_async(int unit, bcm_port_t port, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_to_set_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_vlan_get_async(int unit, bcm_port_t port, uint16 * tpid, uint16 * vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mirror_vlan_set_async(int unit, bcm_port_t port, uint16 tpid, uint16 vlan, bcm_async_cb_t async_callback, void *async_cookie);
/* bcm_module_name has a non int return type */
#ifdef	INCLUDE_L3
void	bcm_mpls_cleanup_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_exp_map_create_async(int unit, uint32 flags, int * exp_map_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_exp_map_destroy_async(int unit, int exp_map_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_exp_map_get_async(int unit, int exp_map_id, bcm_mpls_exp_map_t * exp_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_exp_map_set_async(int unit, int exp_map_id, bcm_mpls_exp_map_t * exp_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_info_async(int unit, bcm_mpls_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_l3_initiator_clear_async(int unit, bcm_l3_intf_t * intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_l3_initiator_clear_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_l3_initiator_get_async(int unit, bcm_l3_intf_t * intf, bcm_mpls_l3_initiator_t * mpls_label, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_l3_initiator_set_async(int unit, bcm_l3_intf_t * intf, bcm_mpls_l3_initiator_t * mpls_label, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_label_stat_get_async(int unit, bcm_mpls_label_t label, bcm_gport_t port, bcm_mpls_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_label_stat_get32_async(int unit, bcm_mpls_label_t label, bcm_gport_t port, bcm_mpls_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_add_async(int unit, bcm_vpn_t vpn, bcm_mpls_port_t * mpls_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_block_get_async(int unit, bcm_vpn_t vpn, bcm_port_t port, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_block_set_async(int unit, bcm_vpn_t vpn, bcm_port_t port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_delete_async(int unit, bcm_vpn_t vpn, bcm_gport_t mpls_port_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_delete_all_async(int unit, bcm_vpn_t vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_get_async(int unit, bcm_vpn_t vpn, bcm_mpls_port_t * mpls_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_get_all_async(int unit, bcm_vpn_t vpn, int port_max, bcm_mpls_port_t * port_array, int * port_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_stat_enable_set_async(int unit, bcm_gport_t mpls_port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_stat_get_async(int unit, bcm_gport_t mpls_port, bcm_cos_t cos, bcm_mpls_port_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_stat_get32_async(int unit, bcm_gport_t mpls_port, bcm_cos_t cos, bcm_mpls_port_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_stat_set_async(int unit, bcm_gport_t mpls_port, bcm_cos_t cos, bcm_mpls_port_stat_t stat, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_port_stat_set32_async(int unit, bcm_gport_t mpls_port, bcm_cos_t cos, bcm_mpls_port_stat_t stat, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_switch_add_async(int unit, bcm_mpls_switch_t * mswitch_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_switch_delete_async(int unit, bcm_mpls_switch_t * mswitch_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_switch_delete_all_async(int unit, int flag, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_switch_get_async(int unit, bcm_mpls_switch_t * mswitch_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_switch_traverse_async(int unit, uint32 flags, uint32 start, uint32 end, bcm_mpls_switch_traverse_cb trav_fn, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_initiator_clear_async(int unit, bcm_if_t intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_initiator_clear_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_initiator_get_async(int unit, bcm_if_t intf, int label_max, bcm_mpls_egress_label_t * label_array, int * label_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_initiator_set_async(int unit, bcm_if_t intf, int num_labels, bcm_mpls_egress_label_t * label_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_switch_add_async(int unit, bcm_mpls_tunnel_switch_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_switch_delete_async(int unit, bcm_mpls_tunnel_switch_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_switch_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_switch_get_async(int unit, bcm_mpls_tunnel_switch_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_tunnel_switch_traverse_async(int unit, bcm_mpls_tunnel_switch_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_vpn_add_async(int unit, bcm_vpn_t vpn, bcm_mpls_vpn_t * vpn_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_vpn_circuit_add_async(int unit, bcm_vpn_t vpn, bcm_mpls_circuit_t * vc_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_vpn_circuit_delete_async(int unit, bcm_vpn_t vpn, bcm_mpls_circuit_t * vc_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_vpn_circuit_delete_all_async(int unit, bcm_vpn_t vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_vpn_circuit_get_async(int unit, bcm_vpn_t vpn, int vc_array, bcm_mpls_circuit_t * vc_info, int * vc_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_vpn_create_async(int unit, bcm_vpn_t vpn, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_vpn_delete_async(int unit, bcm_vpn_t vpn, bcm_mpls_vpn_t * key, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_vpn_delete_all_async(int unit, bcm_vpn_t vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_vpn_destroy_async(int unit, bcm_vpn_t vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_vpn_get_async(int unit, bcm_vpn_t vpn, int max_out, bcm_mpls_vpn_t * vpn_info, int * real_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_vpn_id_create_async(int unit, bcm_mpls_vpn_config_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_vpn_id_destroy_async(int unit, bcm_vpn_t vpn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_vpn_id_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_mpls_vpn_id_get_async(int unit, bcm_vpn_t vpn, bcm_mpls_vpn_config_t * info, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcm_multicast_create_async(int unit, uint32 flags, bcm_multicast_t * group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_destroy_async(int unit, bcm_multicast_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_egress_add_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_if_t encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_egress_delete_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_if_t encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_egress_delete_all_async(int unit, bcm_multicast_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_egress_get_async(int unit, bcm_multicast_t group, int port_max, bcm_gport_t * port_array, bcm_if_t * encap_id_array, int * port_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_egress_set_async(int unit, bcm_multicast_t group, int port_count, bcm_gport_t * port_array, bcm_if_t * encap_id_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_l2_encap_get_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_vlan_t vlan, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_l3_encap_get_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_if_t intf, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_mim_encap_get_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_gport_t mim_port_id, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_subport_encap_get_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_gport_t subport, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_multicast_vpls_encap_get_async(int unit, bcm_multicast_t group, bcm_gport_t port, bcm_gport_t mpls_port_id, bcm_if_t * encap_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_ccm_endpoint_add_async(int unit, bcm_oam_ccm_t * ccm, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_ccm_endpoint_delete_async(int unit, bcm_oam_ccm_t * ccm, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_ccm_endpoint_delete_all_async(int unit, bcm_oam_ccm_t * ccm, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_ccm_endpoint_get_async(int unit, bcm_oam_ccm_t * ccm, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_ccm_register_async(int unit, bcm_oam_ccm_timeout_cb_t fn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_ccm_traverse_async(int unit, uint32 flags, int start, int end, bcm_oam_ccm_traverse_cb_t cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_ccm_unregister_async(int unit, bcm_oam_ccm_timeout_cb_t fn, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_oam_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_alloc_async(int unit, int size, uint32 flags, bcm_pkt_t ** pkt_buf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_blk_alloc_async(int unit, int count, int size, uint32 flags, bcm_pkt_t *** packet_array, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_blk_free_async(int unit, bcm_pkt_t ** pkt, int count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_byte_index_async(bcm_pkt_t * pkt, int n, int * len, int * blk_idx, uint8 ** location, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_clear_async(int unit, bcm_pkt_t * pkt, bcm_pkt_blk_t * blks, int blk_count, uint32 flags, bcm_pkt_t ** pkt_buf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_flags_init_async(int unit, bcm_pkt_t * pkt, uint32 init_flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_flags_len_setup_async(int unit, bcm_pkt_t * pkt, int alloc_bytes, int payload_len, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_free_async(int unit, bcm_pkt_t * pkt, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_memcpy_async(bcm_pkt_t * pkt, int dest_byte, uint8 * src, int len, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_rx_alloc_async(int unit, int len, bcm_pkt_t ** pkt_buf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_pkt_rx_free_async(int unit, bcm_pkt_t * pkt, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_create_async(int unit, bcm_policer_config_t * pol_cfg, bcm_policer_t * policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_destroy_async(int unit, bcm_policer_t policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_get_async(int unit, bcm_policer_t policer_id, bcm_policer_config_t * pol_cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_group_create_async(int unit, bcm_policer_group_mode_t mode, bcm_policer_t * policer_id, int * npolicers, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_set_async(int unit, bcm_policer_t policer_id, bcm_policer_config_t * pol_cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_stat_enable_get_async(int unit, bcm_policer_t policer_id, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_stat_enable_set_async(int unit, bcm_policer_t policer_id, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_stat_get_async(int unit, bcm_policer_t policer_id, bcm_policer_stat_t stat, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_stat_get32_async(int unit, bcm_policer_t policer_id, bcm_policer_stat_t stat, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_stat_set_async(int unit, bcm_policer_t policer_id, bcm_policer_stat_t stat, uint64 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_stat_set32_async(int unit, bcm_policer_t policer_id, bcm_policer_stat_t stat, uint32 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_policer_traverse_async(int unit, bcm_policer_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ability_advert_get_async(int unit, bcm_port_t port, bcm_port_ability_t * ability_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ability_advert_set_async(int unit, bcm_port_t port, bcm_port_ability_t * ability_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ability_get_async(int unit, bcm_port_t port, bcm_port_abil_t * local_ability_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ability_local_get_async(int unit, bcm_port_t port, bcm_port_ability_t * local_ability_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ability_remote_get_async(int unit, bcm_port_t port, bcm_port_ability_t * ability_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_advert_get_async(int unit, bcm_port_t port, bcm_port_abil_t * ability_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_advert_remote_get_async(int unit, bcm_port_t port, bcm_port_abil_t * ability_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_advert_set_async(int unit, bcm_port_t port, bcm_port_abil_t ability_mask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_autoneg_get_async(int unit, bcm_port_t port, int * autoneg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_autoneg_set_async(int unit, bcm_port_t port, int autoneg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_bpdu_enable_get_async(int unit, bcm_port_t port, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_bpdu_enable_set_async(int unit, bcm_port_t port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_cable_diag_async(int unit, bcm_port_t port, bcm_port_cable_diag_t * status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_cfi_color_get_async(int unit, bcm_port_t port, int cfi, bcm_color_t * color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_cfi_color_set_async(int unit, bcm_port_t port, int cfi, bcm_color_t color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_class_get_async(int unit, bcm_port_t port, bcm_port_class_t pclass, uint32 * class_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_class_set_async(int unit, bcm_port_t port, bcm_port_class_t pclass, uint32 class_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_clear_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_config_get_async(int unit, bcm_port_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_control_get_async(int unit, bcm_port_t port, bcm_port_control_t type, int * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_control_set_async(int unit, bcm_port_t port, bcm_port_control_t type, int value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_detach_async(int unit, bcm_pbmp_t pbmp, bcm_pbmp_t * detached, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_discard_get_async(int unit, bcm_port_t port, int * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_discard_set_async(int unit, bcm_port_t port, int mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_dscp_map_get_async(int unit, bcm_port_t port, int srccp, int * mapcp, int * prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_dscp_map_mode_get_async(int unit, bcm_port_t port, int * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_dscp_map_mode_set_async(int unit, bcm_port_t port, int mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_dscp_map_set_async(int unit, bcm_port_t port, int srccp, int mapcp, int prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_dscp_unmap_get_async(int unit, bcm_port_t port, int internal_pri, bcm_color_t color, int * pkt_dscp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_dscp_unmap_set_async(int unit, bcm_port_t port, int internal_pri, bcm_color_t color, int pkt_dscp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_dtag_mode_get_async(int unit, bcm_port_t port, int * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_dtag_mode_set_async(int unit, bcm_port_t port, int mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_duplex_get_async(int unit, bcm_port_t port, int * duplex, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_duplex_set_async(int unit, bcm_port_t port, int duplex, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_egress_get_async(int unit, bcm_port_t port, int modid, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_egress_set_async(int unit, bcm_port_t port, int modid, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_enable_get_async(int unit, bcm_port_t port, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_enable_set_async(int unit, bcm_port_t port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_encap_get_async(int unit, bcm_port_t port, int * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_encap_set_async(int unit, bcm_port_t port, int mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_fault_get_async(int unit, bcm_port_t port, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_flood_block_get_async(int unit, bcm_port_t ingress_port, bcm_port_t egress_port, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_flood_block_set_async(int unit, bcm_port_t ingress_port, bcm_port_t egress_port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_force_forward_get_async(int unit, bcm_port_t port, bcm_port_t * egr_port, int * enabled, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_force_forward_set_async(int unit, bcm_port_t port, bcm_port_t egr_port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_force_vlan_get_async(int unit, bcm_port_t port, bcm_vlan_t * vlan, int * pkt_prio, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_force_vlan_set_async(int unit, bcm_port_t port, bcm_vlan_t vlan, int pkt_prio, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_frame_max_get_async(int unit, bcm_port_t port, int * size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_frame_max_set_async(int unit, bcm_port_t port, int size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_gport_get_async(int unit, bcm_port_t port, bcm_gport_t * gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ifg_get_async(int unit, bcm_port_t port, int speed, bcm_port_duplex_t duplex, int * bit_times, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ifg_set_async(int unit, bcm_port_t port, int speed, bcm_port_duplex_t duplex, int bit_times, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ifilter_get_async(int unit, bcm_port_t port, int * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ifilter_set_async(int unit, bcm_port_t port, int mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_info_get_async(int unit, bcm_port_t port, bcm_port_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_info_restore_async(int unit, bcm_port_t port, bcm_port_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_info_save_async(int unit, bcm_port_t port, bcm_port_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_info_set_async(int unit, bcm_port_t port, bcm_port_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_inner_tpid_get_async(int unit, bcm_port_t port, uint16 * tpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_inner_tpid_set_async(int unit, bcm_port_t port, uint16 tpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_interface_get_async(int unit, bcm_port_t port, bcm_port_if_t * intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_interface_set_async(int unit, bcm_port_t port, bcm_port_if_t intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ipmc_modify_get_async(int unit, bcm_port_t port, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_ipmc_modify_set_async(int unit, bcm_port_t port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_jam_get_async(int unit, bcm_port_t port, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_jam_set_async(int unit, bcm_port_t port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_l3_enable_get_async(int unit, bcm_port_t port, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_l3_enable_set_async(int unit, bcm_port_t port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_l3_modify_get_async(int unit, bcm_port_t port, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_l3_modify_set_async(int unit, bcm_port_t port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_l3_mtu_get_async(int unit, bcm_port_t port, int * size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_l3_mtu_set_async(int unit, bcm_port_t port, int size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_learn_get_async(int unit, bcm_port_t port, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_learn_modify_async(int unit, bcm_port_t port, uint32 add, uint32 remove, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_learn_set_async(int unit, bcm_port_t port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_link_status_get_async(int unit, bcm_port_t port, int * up, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_linkscan_get_async(int unit, bcm_port_t port, int * linkscan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_linkscan_set_async(int unit, bcm_port_t port, int linkscan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_loopback_get_async(int unit, bcm_port_t port, int * loopback, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_loopback_set_async(int unit, bcm_port_t port, int loopback, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_master_get_async(int unit, bcm_port_t port, int * ms, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_master_set_async(int unit, bcm_port_t port, int ms, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_mdix_get_async(int unit, bcm_port_t port, bcm_port_mdix_t * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_mdix_set_async(int unit, bcm_port_t port, bcm_port_mdix_t mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_mdix_status_get_async(int unit, bcm_port_t port, bcm_port_mdix_status_t * status, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_medium_config_get_async(int unit, bcm_port_t port, bcm_port_medium_t medium, bcm_phy_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_medium_config_set_async(int unit, bcm_port_t port, bcm_port_medium_t medium, bcm_phy_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_medium_get_async(int unit, bcm_port_t port, bcm_port_medium_t * medium, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_medium_status_register_async(int unit, bcm_port_t port, bcm_port_medium_status_cb_t callback, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_medium_status_unregister_async(int unit, bcm_port_t port, bcm_port_medium_status_cb_t callback, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_modid_egress_get_async(int unit, bcm_port_t port, bcm_module_t modid, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_modid_egress_set_async(int unit, bcm_port_t port, bcm_module_t modid, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_modid_enable_get_async(int unit, bcm_port_t port, int modid, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_modid_enable_set_async(int unit, bcm_port_t port, int modid, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pause_addr_get_async(int unit, bcm_port_t port, bcm_mac_t mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pause_addr_set_async(int unit, bcm_port_t port, bcm_mac_t mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pause_get_async(int unit, bcm_port_t port, int * pause_tx, int * pause_rx, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pause_set_async(int unit, bcm_port_t port, int pause_tx, int pause_rx, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pause_sym_get_async(int unit, bcm_port_t port, int * pause, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pause_sym_set_async(int unit, bcm_port_t port, int pause, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pfm_get_async(int unit, bcm_port_t port, int * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_pfm_set_async(int unit, bcm_port_t port, int mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_control_get_async(int unit, bcm_port_t port, bcm_port_phy_control_t type, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_control_set_async(int unit, bcm_port_t port, bcm_port_phy_control_t type, uint32 value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_drv_name_get_async(int unit, bcm_port_t port, char * name, int len, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_get_async(int unit, bcm_port_t port, uint32 flags, uint32 phy_reg_addr, uint32 * phy_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_reset_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_reset_register_async(int unit, bcm_port_t port, bcm_port_phy_reset_cb_t callback, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_reset_unregister_async(int unit, bcm_port_t port, bcm_port_phy_reset_cb_t callback, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_phy_set_async(int unit, bcm_port_t port, uint32 flags, uint32 phy_reg_addr, uint32 phy_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_priority_color_get_async(int unit, bcm_port_t port, int prio, bcm_color_t * color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_priority_color_set_async(int unit, bcm_port_t port, int prio, bcm_color_t color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_probe_async(int unit, bcm_pbmp_t pbmp, bcm_pbmp_t * okay_pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_protocol_vlan_add_async(int unit, bcm_port_t port, bcm_port_frametype_t frame, bcm_port_ethertype_t ether, bcm_vlan_t vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_protocol_vlan_delete_async(int unit, bcm_port_t port, bcm_port_frametype_t frame, bcm_port_ethertype_t ether, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_protocol_vlan_delete_all_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_queued_count_get_async(int unit, bcm_port_t port, uint32 * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_rate_egress_get_async(int unit, bcm_port_t port, uint32 * kbits_sec, uint32 * kbits_burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_rate_egress_set_async(int unit, bcm_port_t port, uint32 kbits_sec, uint32 kbits_burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_rate_egress_traffic_get_async(int unit, bcm_port_t port, uint32 * traffic_types, uint32 * kbits_sec, uint32 * kbits_burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_rate_egress_traffic_set_async(int unit, bcm_port_t port, uint32 traffic_types, uint32 kbits_sec, uint32 kbits_burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_rate_ingress_get_async(int unit, bcm_port_t port, uint32 * kbits_sec, uint32 * kbits_burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_rate_ingress_set_async(int unit, bcm_port_t port, uint32 kbits_sec, uint32 kbits_burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_rate_pause_get_async(int unit, bcm_port_t port, uint32 * kbits_pause, uint32 * kbits_resume, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_rate_pause_set_async(int unit, bcm_port_t port, uint32 kbits_pause, uint32 kbits_resume, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_sample_rate_get_async(int unit, bcm_port_t port, int * ingress_rate, int * egress_rate, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_sample_rate_set_async(int unit, bcm_port_t port, int ingress_rate, int egress_rate, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_selective_get_async(int unit, bcm_port_t port, bcm_port_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_selective_set_async(int unit, bcm_port_t port, bcm_port_info_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_speed_get_async(int unit, bcm_port_t port, int * speed, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_speed_max_async(int unit, bcm_port_t port, int * speed, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_speed_set_async(int unit, bcm_port_t port, int speed, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stp_get_async(int unit, bcm_port_t port, int * state, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_stp_set_async(int unit, bcm_port_t port, int state, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_tgid_get_async(int unit, bcm_port_t port, int * tgid, int * psc, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_tgid_set_async(int unit, bcm_port_t port, int tgid, int psc, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_tpid_add_async(int unit, bcm_port_t port, uint16 tpid, int color_select, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_tpid_delete_async(int unit, bcm_port_t port, uint16 tpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_tpid_delete_all_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_tpid_get_async(int unit, bcm_port_t port, uint16 * tpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_tpid_set_async(int unit, bcm_port_t port, uint16 tpid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_trunk_index_get_async(int unit, bcm_port_t port, int * port_index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_trunk_index_set_async(int unit, bcm_port_t port, int port_index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_untagged_priority_get_async(int unit, bcm_port_t port, int * priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_untagged_priority_set_async(int unit, bcm_port_t port, int priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_untagged_vlan_get_async(int unit, bcm_port_t port, bcm_vlan_t * vid_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_untagged_vlan_set_async(int unit, bcm_port_t port, bcm_vlan_t vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_update_async(int unit, bcm_port_t port, int link, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_dscp_map_get_async(int unit, bcm_port_t port, bcm_vlan_t vlan, int dscp, int * internal_pri, bcm_color_t * color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_dscp_map_set_async(int unit, bcm_port_t port, bcm_vlan_t vlan, int dscp, int internal_pri, bcm_color_t color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_inner_tag_get_async(int unit, bcm_port_t port, uint16 * inner_tag, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_inner_tag_set_async(int unit, bcm_port_t port, uint16 inner_tag, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_member_get_async(int unit, bcm_port_t port, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_member_set_async(int unit, bcm_port_t port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_pri_map_get_async(int unit, bcm_port_t port, bcm_vlan_t vlan, int pkt_pri, int cfi, int * internal_pri, bcm_color_t * color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_pri_map_set_async(int unit, bcm_port_t port, bcm_vlan_t vlan, int pkt_pri, int cfi, int internal_pri, bcm_color_t color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_priority_map_get_async(int unit, bcm_port_t port, int pkt_pri, int cfi, int * internal_pri, bcm_color_t * color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_priority_map_set_async(int unit, bcm_port_t port, int pkt_pri, int cfi, int internal_pri, bcm_color_t color, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_priority_unmap_get_async(int unit, bcm_port_t port, int internal_pri, bcm_color_t color, int * pkt_pri, int * cfi, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_port_vlan_priority_unmap_set_async(int unit, bcm_port_t port, int internal_pri, bcm_color_t color, int pkt_pri, int cfi, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcm_proxy_client_set_async(int unit, bcm_port_t client_port, bcm_proxy_proto_type_t proto_type, bcm_module_t server_modid, bcm_port_t server_port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_proxy_server_get_async(int unit, bcm_port_t server_port, bcm_proxy_mode_t mode, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_proxy_server_set_async(int unit, bcm_port_t server_port, bcm_proxy_mode_t mode, int enable, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcm_rate_bandwidth_get_async(int unit, bcm_port_t port, int flags, uint32 * kbits_sec, uint32 * kbits_burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_bandwidth_set_async(int unit, bcm_port_t port, int flags, uint32 kbits_sec, uint32 kbits_burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_bcast_get_async(int unit, int * pps, int * flags, int port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_bcast_set_async(int unit, int pps, int flags, int port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_dlfbc_get_async(int unit, int * pps, int * flags, int port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_dlfbc_set_async(int unit, int pps, int flags, int port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_get_async(int unit, int * pps, int * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_mcast_get_async(int unit, int * pps, int * flags, int port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_mcast_set_async(int unit, int pps, int flags, int port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_set_async(int unit, int pps, int flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_type_get_async(int unit, bcm_rate_limit_t * rl, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rate_type_set_async(int unit, bcm_rate_limit_t * rl, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_active_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_alloc_async(int unit, int pkt_size, uint32 flags, void ** buf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_burst_get_async(int unit, int * burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_burst_set_async(int unit, int burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cfg_get_async(int unit, bcm_rx_cfg_t * cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cfg_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_channels_running_async(int unit, uint32 * channels, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_clear_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cos_burst_get_async(int unit, int cos, int * burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cos_burst_set_async(int unit, int cos, int burst, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cos_max_len_get_async(int unit, int cos, int * max_q_len, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cos_max_len_set_async(int unit, int cos, int max_q_len, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cos_rate_get_async(int unit, int cos, int * pps, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cos_rate_set_async(int unit, int cos, int pps, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cosq_mapping_delete_async(int unit, int index, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cosq_mapping_get_async(int unit, int index, bcm_rx_reasons_t * reasons, bcm_rx_reasons_t * reasons_mask, uint8 * int_prio, uint8 * int_prio_mask, uint32 * packet_type, uint32 * packet_type_mask, bcm_cos_queue_t * cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cosq_mapping_reasons_get_async(int unit, bcm_rx_reasons_t * reasons, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cosq_mapping_set_async(int unit, int index, bcm_rx_reasons_t reasons, bcm_rx_reasons_t reasons_mask, uint8 int_prio, uint8 int_prio_mask, uint32 packet_type, uint32 packet_type_mask, bcm_cos_queue_t cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cosq_mapping_size_get_async(int unit, int * size, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cpu_rate_get_async(int unit, int * pps, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_cpu_rate_set_async(int unit, int pps, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_free_async(int unit, void * pkt_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_free_enqueue_async(int unit, void * pkt_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_pool_alloc_async(int unit, int size, uint32 flags, void ** pool, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_pool_cleanup_async(bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_pool_free_async(int unit, void * buf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_pool_setup_async(int pkt_count, int bytes_per_pkt, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_pool_setup_done_async(bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_queue_channel_get_async(int unit, bcm_cos_queue_t queue_id, bcm_rx_chan_t * chan_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_queue_channel_set_async(int unit, bcm_cos_queue_t queue_id, bcm_rx_chan_t chan_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_queue_max_get_async(int unit, bcm_cos_queue_t * cosq, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_queue_packet_count_get_async(int unit, bcm_cos_queue_t cosq, int * packet_count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_queue_rate_limit_status_get_async(int unit, bcm_cos_queue_t cosq, int * packet_tokens, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_queue_register_async(int unit, const char * name, bcm_cos_queue_t cosq, bcm_rx_cb_f callback, uint8 priority, void * cookie, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_queue_unregister_async(int unit, bcm_cos_queue_t cosq, bcm_rx_cb_f callback, uint8 priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_rate_get_async(int unit, int * pps, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_rate_set_async(int unit, int pps, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_reasons_get_async(int unit, bcm_rx_reasons_t * reasons, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_reasons_policer_set_async(int unit, bcm_rx_reasons_t rx_reasons, bcm_policer_t polid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_register_async(int unit, const char * name, bcm_rx_cb_f callback, uint8 priority, void * cookie, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	BCM_RPC_SUPPORT
void	bcm_rx_remote_pkt_alloc_async(int len, bcm_pkt_t ** pkt, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BCM_RPC_SUPPORT */
void	bcm_rx_remote_pkt_enqueue_async(int unit, bcm_pkt_t * pkt, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	BCM_RPC_SUPPORT
void	bcm_rx_remote_pkt_free_async(bcm_pkt_t * pkt, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BCM_RPC_SUPPORT */
void	bcm_rx_sched_register_async(int unit, bcm_rx_sched_cb sched_cb, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_sched_unregister_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	BROADCOM_DEBUG
void	bcm_rx_show_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BROADCOM_DEBUG */
void	bcm_rx_start_async(int unit, bcm_rx_cfg_t * cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_stop_async(int unit, bcm_rx_cfg_t * cfg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_unit_next_get_async(int unit, int * next_unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_rx_unregister_async(int unit, bcm_rx_cb_f callback, uint8 priority, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_clear_async(int unit, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_custom_add_async(int unit, bcm_port_t port, bcm_stat_val_t type, bcm_custom_stat_trigger_t trigger, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_custom_check_async(int unit, bcm_port_t port, bcm_stat_val_t type, bcm_custom_stat_trigger_t trigger, int * result, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_custom_delete_async(int unit, bcm_port_t port, bcm_stat_val_t type, bcm_custom_stat_trigger_t trigger, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_custom_delete_all_async(int unit, bcm_port_t port, bcm_stat_val_t type, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_custom_get_async(int unit, bcm_port_t port, bcm_stat_val_t type, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_custom_set_async(int unit, bcm_port_t port, bcm_stat_val_t type, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_get_async(int unit, bcm_port_t port, bcm_stat_val_t type, uint64 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_get32_async(int unit, bcm_port_t port, bcm_stat_val_t type, uint32 * value, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stat_sync_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_clear_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_count_get_async(int unit, int * max_stg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_create_async(int unit, bcm_stg_t * stg_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_create_id_async(int unit, bcm_stg_t stg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_default_get_async(int unit, bcm_stg_t * stg_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_default_set_async(int unit, bcm_stg_t stg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_destroy_async(int unit, bcm_stg_t stg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_list_async(int unit, bcm_stg_t ** list, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_list_destroy_async(int unit, bcm_stg_t * list, int count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_stp_get_async(int unit, bcm_stg_t stg, bcm_port_t port, int * stp_state, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_stp_set_async(int unit, bcm_stg_t stg, bcm_port_t port, int stp_state, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_vlan_add_async(int unit, bcm_stg_t stg, bcm_vlan_t vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_vlan_list_async(int unit, bcm_stg_t stg, bcm_vlan_t ** list, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_vlan_list_destroy_async(int unit, bcm_vlan_t * list, int count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_vlan_remove_async(int unit, bcm_stg_t stg, bcm_vlan_t vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stg_vlan_remove_all_async(int unit, bcm_stg_t stg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_fabric_map_get_async(int unit, bcm_gport_t switch_port, bcm_gport_t * fabric_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_fabric_map_set_async(int unit, bcm_gport_t switch_port, bcm_gport_t fabric_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_fmod_lmod_mapping_get_async(int unit, bcm_port_t port, bcm_module_t * fmod, bcm_module_t * lmod, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_fmod_lmod_mapping_set_async(int unit, bcm_port_t port, bcm_module_t fmod, bcm_module_t lmod, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_fmod_smod_mapping_get_async(int unit, bcm_port_t port, bcm_module_t fmod, bcm_module_t * smod, bcm_port_t * sport, uint32 * nports, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_fmod_smod_mapping_set_async(int unit, bcm_port_t port, bcm_module_t fmod, bcm_module_t smod, bcm_port_t sport, uint32 nports, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_mode_get_async(int unit, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_mode_set_async(int unit, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modid_count_async(int unit, int * num_modid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modid_get_async(int unit, int * modid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modid_set_async(int unit, int modid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modmap_enable_get_async(int unit, bcm_port_t port, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modmap_enable_set_async(int unit, bcm_port_t port, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modmap_map_async(int unit, int setget, bcm_module_t mod_in, bcm_port_t port_in, bcm_module_t * mod_out, bcm_port_t * port_out, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modmap_register_async(int unit, bcm_stk_modmap_cb_t func, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modmap_unregister_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modport_add_async(int unit, int modid, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modport_clear_async(int unit, int modid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modport_clear_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modport_delete_async(int unit, int modid, bcm_port_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modport_get_async(int unit, int modid, int * port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_modport_set_async(int unit, int modid, int port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_module_enable_async(int unit, bcm_module_t modid, int nports, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_module_protocol_get_async(int unit, bcm_module_t modid, bcm_module_protocol_t * protocol, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_module_protocol_set_async(int unit, bcm_module_t modid, bcm_module_protocol_t protocol, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_my_modid_get_async(int unit, int * my_modid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_my_modid_set_async(int unit, int my_modid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_pbmp_get_async(int unit, bcm_pbmp_t * cur_pbm, bcm_pbmp_t * inactive_pbm, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_port_get_async(int unit, bcm_port_t port, uint32 * flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_port_modmap_group_get_async(int unit, bcm_port_t port, int * group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_port_modmap_group_max_get_async(int unit, int * max_group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_port_modmap_group_set_async(int unit, bcm_port_t port, int group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_port_set_async(int unit, bcm_port_t port, uint32 flags, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_sl_simplex_count_get_async(int unit, int * count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_sl_simplex_count_set_async(int unit, int count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_ucbitmap_del_async(int unit, bcm_port_t port, int modid, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_ucbitmap_get_async(int unit, int port, int modid, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_ucbitmap_set_async(int unit, int port, int modid, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_update_callback_register_async(int unit, bcm_stk_cb_f cb, void * cookie, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_stk_update_callback_unregister_async(int unit, bcm_stk_cb_f cb, void * cookie, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_cleanup_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_group_create_async(int unit, bcm_subport_group_config_t * config, bcm_gport_t * group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_group_destroy_async(int unit, bcm_gport_t group, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_group_get_async(int unit, bcm_gport_t group, bcm_subport_group_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_port_add_async(int unit, bcm_subport_config_t * config, bcm_gport_t * port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_port_delete_async(int unit, bcm_gport_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_port_get_async(int unit, bcm_gport_t port, bcm_subport_config_t * config, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_subport_port_traverse_async(int unit, bcm_subport_port_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_control_get_async(int unit, bcm_switch_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_control_port_get_async(int unit, bcm_port_t port, bcm_switch_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_control_port_set_async(int unit, bcm_port_t port, bcm_switch_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_switch_control_set_async(int unit, bcm_switch_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_topo_port_get_async(int unit, int dest_modid, bcm_port_t * exit_port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_bitmap_expand_async(int unit, bcm_pbmp_t * pbmp_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_chip_info_get_async(int unit, bcm_trunk_chip_info_t * ta_info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_create_async(int unit, bcm_trunk_t * tid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_create_id_async(int unit, bcm_trunk_t tid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_destroy_async(int unit, bcm_trunk_t tid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_egress_get_async(int unit, bcm_trunk_t tid, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_egress_set_async(int unit, bcm_trunk_t tid, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_find_async(int unit, bcm_module_t modid, bcm_port_t port, bcm_trunk_t * tid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_get_async(int unit, bcm_trunk_t tid, bcm_trunk_add_info_t * t_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_mcast_join_async(int unit, bcm_trunk_t tid, bcm_vlan_t vid, bcm_mac_t mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_override_ipmc_get_async(int unit, bcm_port_t port, bcm_trunk_t tid, int idx, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_override_ipmc_set_async(int unit, bcm_port_t port, bcm_trunk_t tid, int idx, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_override_mcast_get_async(int unit, bcm_port_t port, bcm_trunk_t tid, int idx, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_override_mcast_set_async(int unit, bcm_port_t port, bcm_trunk_t tid, int idx, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_override_ucast_get_async(int unit, bcm_port_t port, bcm_trunk_t tid, int modid, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_override_ucast_set_async(int unit, bcm_port_t port, bcm_trunk_t tid, int modid, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_override_vlan_get_async(int unit, bcm_port_t port, bcm_trunk_t tid, bcm_vlan_t vid, int * enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_override_vlan_set_async(int unit, bcm_port_t port, bcm_trunk_t tid, bcm_vlan_t vid, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_pool_get_async(int unit, bcm_port_t port, bcm_trunk_t tid, int * size, int weights[BCM_TRUNK_MAX_PORTCNT], bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_pool_set_async(int unit, bcm_port_t port, bcm_trunk_t tid, int size, const int weights[BCM_TRUNK_MAX_PORTCNT], bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_psc_get_async(int unit, bcm_trunk_t tid, int * psc, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_psc_set_async(int unit, bcm_trunk_t tid, int psc, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_trunk_set_async(int unit, bcm_trunk_t tid, bcm_trunk_add_info_t * add_info, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	INCLUDE_L3
void	bcm_tunnel_config_get_async(int unit, bcm_tunnel_config_t * tconfig, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_config_set_async(int unit, bcm_tunnel_config_t * tconfig, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_dscp_map_create_async(int unit, uint32 flags, int * dscp_map_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_dscp_map_destroy_async(int unit, int dscp_map_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_dscp_map_get_async(int unit, int dscp_map_id, bcm_tunnel_dscp_map_t * dscp_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_dscp_map_port_get_async(int unit, bcm_port_t port, bcm_tunnel_dscp_map_t * dscp_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_dscp_map_port_set_async(int unit, bcm_port_t port, bcm_tunnel_dscp_map_t * dscp_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_dscp_map_set_async(int unit, int dscp_map_id, bcm_tunnel_dscp_map_t * dscp_map, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_initiator_clear_async(int unit, bcm_l3_intf_t * intf, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_initiator_get_async(int unit, bcm_l3_intf_t * intf, bcm_tunnel_initiator_t * tunnel, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_initiator_set_async(int unit, bcm_l3_intf_t * intf, bcm_tunnel_initiator_t * tunnel, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_terminator_add_async(int unit, bcm_tunnel_terminator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_terminator_delete_async(int unit, bcm_tunnel_terminator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_terminator_get_async(int unit, bcm_tunnel_terminator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tunnel_terminator_update_async(int unit, bcm_tunnel_terminator_t * info, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* INCLUDE_L3 */
void	bcm_tx_async(int unit, bcm_pkt_t * tx_pkt, void * cookie, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tx_array_async(int unit, bcm_pkt_t ** pkt, int count, bcm_pkt_cb_f all_done_cb, void * cookie, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	BCM_RPC_SUPPORT
void	bcm_tx_cpu_tunnel_async(bcm_pkt_t * pkt, int dest_unit, int remote_port, uint32 flags, bcm_cpu_tunnel_mode_t mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tx_cpu_tunnel_get_async(bcm_tx_cpu_tunnel_f * f, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tx_cpu_tunnel_set_async(bcm_tx_cpu_tunnel_f f, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BCM_RPC_SUPPORT */
#ifdef	BROADCOM_DEBUG
void	bcm_tx_dv_dump_async(int unit, void * dv_p, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BROADCOM_DEBUG */
void	bcm_tx_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tx_list_async(int unit, bcm_pkt_t * pkt, bcm_pkt_cb_f all_done_cb, void * cookie, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tx_pkt_l2_map_async(int unit, bcm_pkt_t * pkt, bcm_mac_t dest_mac, int vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_tx_pkt_setup_async(int unit, bcm_pkt_t * tx_pkt, bcm_async_cb_t async_callback, void *async_cookie);
#ifdef	BROADCOM_DEBUG
void	bcm_tx_show_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
#endif	/* BROADCOM_DEBUG */
void	bcm_vlan_control_get_async(int unit, bcm_vlan_control_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_control_port_get_async(int unit, int port, bcm_vlan_control_port_t type, int * arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_control_port_set_async(int unit, int port, bcm_vlan_control_port_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_control_set_async(int unit, bcm_vlan_control_t type, int arg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_control_vlan_get_async(int unit, bcm_vlan_t vlan, bcm_vlan_control_vlan_t * control, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_control_vlan_set_async(int unit, bcm_vlan_t vlan, bcm_vlan_control_vlan_t control, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_create_async(int unit, bcm_vlan_t vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_cross_connect_add_async(int unit, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_gport_t port_1, bcm_gport_t port_2, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_cross_connect_delete_async(int unit, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_cross_connect_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_cross_connect_traverse_async(int unit, bcm_vlan_cross_connect_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_default_get_async(int unit, bcm_vlan_t * vid_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_default_set_async(int unit, bcm_vlan_t vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_destroy_async(int unit, bcm_vlan_t vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_destroy_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_dtag_add_async(int unit, int port, bcm_vlan_t old_vid, bcm_vlan_t new_vid, int prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_dtag_delete_async(int unit, int port, bcm_vlan_t old_vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_dtag_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_dtag_get_async(int unit, int port, bcm_vlan_t old_vid, bcm_vlan_t * new_vid, int * prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_dtag_range_add_async(int unit, int port, bcm_vlan_t old_vid_low, bcm_vlan_t old_vid_high, bcm_vlan_t new_vid, int int_prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_dtag_range_delete_async(int unit, int port, bcm_vlan_t old_vid_low, bcm_vlan_t old_vid_high, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_dtag_range_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_dtag_range_get_async(int unit, int port, bcm_vlan_t old_vid_low, bcm_vlan_t old_vid_high, bcm_vlan_t * new_vid, int * prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_dtag_range_traverse_async(int unit, bcm_vlan_dtag_range_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_dtag_traverse_async(int unit, bcm_vlan_dtag_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_ip4_add_async(int unit, bcm_ip_t ipaddr, bcm_ip_t netmask, bcm_vlan_t vid, int prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_ip4_delete_async(int unit, bcm_ip_t ipaddr, bcm_ip_t netmask, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_ip4_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_ip_action_add_async(int unit, bcm_vlan_ip_t * vlan_ip, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_ip_add_async(int unit, bcm_vlan_ip_t * vlan_ip, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_ip_delete_async(int unit, bcm_vlan_ip_t * vlan_ip, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_ip_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_list_async(int unit, bcm_vlan_data_t ** listp, int * countp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_list_by_pbmp_async(int unit, bcm_pbmp_t ports, bcm_vlan_data_t ** listp, int * countp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_list_destroy_async(int unit, bcm_vlan_data_t * list, int count, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_mac_action_add_async(int unit, bcm_mac_t mac, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_mac_add_async(int unit, bcm_mac_t mac, bcm_vlan_t vid, int prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_mac_delete_async(int unit, bcm_mac_t mac, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_mac_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_mcast_flood_get_async(int unit, bcm_vlan_t vlan, bcm_vlan_mcast_flood_t * mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_mcast_flood_set_async(int unit, bcm_vlan_t vlan, bcm_vlan_mcast_flood_t mode, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_policer_get_async(int unit, bcm_vlan_t vlan, bcm_policer_t * policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_policer_set_async(int unit, bcm_vlan_t vlan, bcm_policer_t policer_id, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_add_async(int unit, bcm_vlan_t vid, bcm_pbmp_t pbmp, bcm_pbmp_t ubmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_create_async(int unit, uint32 flags, bcm_vlan_port_t vlan_port, bcm_gport_t * gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_default_action_get_async(int unit, bcm_port_t port, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_default_action_set_async(int unit, bcm_port_t port, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_destroy_async(int unit, bcm_gport_t gport, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_egress_default_action_get_async(int unit, bcm_port_t port, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_egress_default_action_set_async(int unit, bcm_port_t port, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_get_async(int unit, bcm_vlan_t vid, bcm_pbmp_t * pbmp, bcm_pbmp_t * ubmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_protocol_action_add_async(int unit, bcm_port_t port, bcm_port_frametype_t frame, bcm_port_ethertype_t ether, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_port_remove_async(int unit, bcm_vlan_t vid, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_enable_set_async(int unit, bcm_vlan_t vlan, int enable, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_get_async(int unit, bcm_vlan_t vlan, bcm_cos_t cos, bcm_vlan_stat_t stat, uint64 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_get32_async(int unit, bcm_vlan_t vlan, bcm_cos_t cos, bcm_vlan_stat_t stat, uint32 * val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_set_async(int unit, bcm_vlan_t vlan, bcm_cos_t cos, bcm_vlan_stat_t stat, uint64 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stat_set32_async(int unit, bcm_vlan_t vlan, bcm_cos_t cos, bcm_vlan_stat_t stat, uint32 val, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stg_get_async(int unit, bcm_vlan_t vid, bcm_stg_t * stg_ptr, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stg_set_async(int unit, bcm_vlan_t vid, bcm_stg_t stg, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stp_get_async(int unit, bcm_vlan_t vid, bcm_port_t port, int * stp_state, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_stp_set_async(int unit, bcm_vlan_t vid, bcm_port_t port, int stp_state, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_add_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_delete_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_get_async(int unit, bcm_gport_t port, bcm_vlan_translate_key_t key_type, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_range_add_async(int unit, bcm_gport_t port, bcm_vlan_t outer_vlan_low, bcm_vlan_t outer_vlan_high, bcm_vlan_t inner_vlan_low, bcm_vlan_t inner_vlan_high, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_range_delete_async(int unit, bcm_gport_t port, bcm_vlan_t outer_vlan_low, bcm_vlan_t outer_vlan_high, bcm_vlan_t inner_vlan_low, bcm_vlan_t inner_vlan_high, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_range_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_range_get_async(int unit, bcm_gport_t port, bcm_vlan_t outer_vlan_low, bcm_vlan_t outer_vlan_high, bcm_vlan_t inner_vlan_low, bcm_vlan_t inner_vlan_high, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_range_traverse_async(int unit, bcm_vlan_translate_action_range_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_action_traverse_async(int unit, bcm_vlan_translate_action_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_add_async(int unit, int port, bcm_vlan_t old_vid, bcm_vlan_t new_vid, int prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_delete_async(int unit, int port, bcm_vlan_t old_vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_action_add_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_action_delete_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_action_get_async(int unit, int port_class, bcm_vlan_t outer_vlan, bcm_vlan_t inner_vlan, bcm_vlan_action_set_t * action, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_action_traverse_async(int unit, bcm_vlan_translate_egress_action_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_add_async(int unit, int port, bcm_vlan_t old_vid, bcm_vlan_t new_vid, int prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_delete_async(int unit, int port, bcm_vlan_t old_vid, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_get_async(int unit, int port, bcm_vlan_t old_vid, bcm_vlan_t * new_vid, int * prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_egress_traverse_async(int unit, bcm_vlan_translate_egress_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_get_async(int unit, int port, bcm_vlan_t old_vid, bcm_vlan_t * new_vid, int * prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_range_add_async(int unit, int port, bcm_vlan_t old_vid_low, bcm_vlan_t old_vid_high, bcm_vlan_t new_vid, int int_prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_range_delete_async(int unit, int port, bcm_vlan_t old_vid_low, bcm_vlan_t old_vid_high, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_range_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_range_get_async(int unit, int port, bcm_vlan_t old_vid_low, bcm_vlan_t old_vid_high, bcm_vlan_t * new_vid, int * int_prio, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_range_traverse_async(int unit, bcm_vlan_translate_range_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vlan_translate_traverse_async(int unit, bcm_vlan_translate_traverse_cb cb, void * user_data, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vpls_bitmap_add_async(int unit, uint32 vc_label, bcm_vlan_t vid, bcm_pbmp_t pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vpls_bitmap_delete_async(int unit, uint32 vc_label, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vpls_bitmap_delete_all_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vpls_bitmap_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vpls_bitmap_get_async(int unit, uint32 vc_label, bcm_vlan_t * vid, bcm_pbmp_t * pbmp, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vpls_bitmap_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_create_async(int unit, bcm_vlan_t * vsi, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_create_with_id_async(int unit, bcm_vlan_t vsi, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_destroy_async(int unit, bcm_vlan_t vsi, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_detach_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_init_async(int unit, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_port_add_async(int unit, bcm_vlan_t vsi, bcm_gport_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_port_delete_async(int unit, bcm_vlan_t vsi, bcm_gport_t port, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_port_delete_all_async(int unit, bcm_vlan_t vsi, bcm_async_cb_t async_callback, void *async_cookie);
void	bcm_vswitch_port_get_async(int unit, bcm_gport_t port, bcm_vlan_t * vsi, bcm_async_cb_t async_callback, void *async_cookie);

#endif	/* BCM_ASYNC_SUPPORT */
#endif	/* !_BCM_ASYNC_H */
