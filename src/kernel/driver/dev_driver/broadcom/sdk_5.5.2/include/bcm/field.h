/*
 * $Id: field.h,v 1.189.2.21 Broadcom SDK $
 * 
 * $Copyright: Copyright 2008 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR U.S. $1,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __BCM_FIELD_H__
#define __BCM_FIELD_H__

#include <bcm/types.h>
#include <bcm/policer.h>
#include <bcm/port.h>

/* Entry priority. */
/* 2008-12-11, Jinfeng Chen: Extend to 8 priority */
#if 1
#define BCM_FIELD_ENTRY_PRIO_1          (-1)
#define BCM_FIELD_ENTRY_PRIO_2          (-2)
#define BCM_FIELD_ENTRY_PRIO_3          (-3)
#define BCM_FIELD_ENTRY_PRIO_4          (-4)
#define BCM_FIELD_ENTRY_PRIO_5          (-5)
#define BCM_FIELD_ENTRY_PRIO_6          (-6)
#define BCM_FIELD_ENTRY_PRIO_7          (-7)
#define BCM_FIELD_ENTRY_PRIO_8          (-8)

#define BCM_FIELD_ENTRY_PRIO_HIGHEST    BCM_FIELD_ENTRY_PRIO_1
#define BCM_FIELD_ENTRY_PRIO_DONT_CARE  BCM_FIELD_ENTRY_PRIO_4
#define BCM_FIELD_ENTRY_PRIO_LOWEST     BCM_FIELD_ENTRY_PRIO_8

#else
#define BCM_FIELD_ENTRY_PRIO_HIGHEST    (-1)       /* Highest in group. */
#define BCM_FIELD_ENTRY_PRIO_DONT_CARE  (-2)       /* Just above lowest. */
#define BCM_FIELD_ENTRY_PRIO_LOWEST     (-3)       /* Lowest in group. */
#endif

#define BCM_FIELD_ENTRY_PRIO_DEFAULT    BCM_FIELD_ENTRY_PRIO_DONT_CARE /* Default priority assigned
                                                      to new entries */

/* User-Defined Field (UDF) L2 Flags. */
#define BCM_FIELD_USER_L2_MASK      0x00000003 
#define BCM_FIELD_USER_L2_ETHERNET2 (0 << 0)   
#define BCM_FIELD_USER_L2_SNAP      (1 << 0)   
#define BCM_FIELD_USER_L2_LLC       (2 << 0)   
#define BCM_FIELD_USER_L2_OTHER     (3 << 0)   

/* Packet content (data) qualification object flags. */
#define BCM_FIELD_DATA_QUALIFIER_WITH_ID    (1 << 0)   
#define BCM_FIELD_DATA_QUALIFIER_REPLACE    (1 << 1)   
#define BCM_FIELD_DATA_QUALIFIER_OFFSET_IP4_OPTIONS_ADJUST (1 << 2)   
#define BCM_FIELD_DATA_QUALIFIER_OFFSET_IP6_EXTENSIONS_ADJUST (1 << 3)   
#define BCM_FIELD_DATA_QUALIFIER_OFFSET_GRE_OPTIONS_ADJUST (1 << 4)   

/* Packet content (data) qualification vlan tag format. */
#define BCM_FIELD_DATA_FORMAT_VLAN_TAG_ANY  (0xffff)   
#define BCM_FIELD_DATA_FORMAT_VLAN_NO_TAG   (1 << 0)   
#define BCM_FIELD_DATA_FORMAT_VLAN_SINGLE_TAGGED (1 << 1)   
#define BCM_FIELD_DATA_FORMAT_VLAN_DOUBLE_TAGGED (1 << 2)   

/* Packet content (data) qualification L2 header format. */
#define BCM_FIELD_DATA_FORMAT_L2_ANY    (0xffff)   
#define BCM_FIELD_DATA_FORMAT_L2_ETH_II (1 << 0)   
#define BCM_FIELD_DATA_FORMAT_L2_SNAP   (1 << 1)   
#define BCM_FIELD_DATA_FORMAT_L2_LLC    (1 << 2)   

/* Packet content (data) qualification L3 header version. */
#define BCM_FIELD_DATA_FORMAT_IP_ANY    (0xffff)   
#define BCM_FIELD_DATA_FORMAT_IP_NONE   (1 << 0)   
#define BCM_FIELD_DATA_FORMAT_IP4       (1 << 1)   
#define BCM_FIELD_DATA_FORMAT_IP6       (1 << 2)   

/* Packet content (data) qualification Mpls encapsulation. */
#define BCM_FIELD_DATA_FORMAT_MPLS_ANY      (0xffff)   
#define BCM_FIELD_DATA_FORMAT_MPLS_ONE_LABEL (1 << 0)   
#define BCM_FIELD_DATA_FORMAT_MPLS_TWO_LABELS (1 << 1)   

/* Packet content (data) qualification Tunnel. */
#define BCM_FIELD_DATA_FORMAT_TUNNEL_ANY    (0xffff)   
#define BCM_FIELD_DATA_FORMAT_TUNNEL_NONE   (1 << 0)   
#define BCM_FIELD_DATA_FORMAT_TUNNEL_IP_IN_IP (1 << 1)   
#define BCM_FIELD_DATA_FORMAT_TUNNEL_GRE    (1 << 2)   
#define BCM_FIELD_DATA_FORMAT_TUNNEL_MPLS   (1 << 3)   

/* bcm_field_data_offset_base_e */
typedef enum bcm_field_data_offset_base_e {
    bcmFieldDataOffsetBasePacketStart,  /* Offset provided from the beginning of
                                           a packet. */
    bcmFieldDataOffsetBaseOuterL3Header, /* Offset provided from the beginning of
                                           outer L3 header. */
    bcmFieldDataOffsetBaseInnerL3Header, /* Offset provided from the beginning of
                                           inner L3 header. */
    bcmFieldDataOffsetBaseOuterL4Header, /* Offset provided from the beginning of
                                           outer L4 header.. */
    bcmFieldDataOffsetBaseInnerL4Header, /* Offset provided from the beginning of
                                           inner L4 header. */
    bcmFieldDataOffsetBaseHigigHeader,  /* Offset provided from the beginning of
                                           Higig header. */
    bcmFieldDataOffsetBaseHigig2Header, /* Offset provided from the beginning of
                                           Higig header. */
    bcmFieldDataOffsetBaseCount         /* Always Last. Not a usable value. */
} bcm_field_data_offset_base_t;

#define BCM_FIELD_DATA_OFFSET_BASE \
{ \
    "bcmFieldDataOffsetBasePacketStart", \
    "bcmFieldDataOffsetBaseOuterL3Header", \
    "bcmFieldDataOffsetBaseInnerL3Header", \
    "bcmFieldDataOffsetBaseOuterL4Header", \
    "bcmFieldDataOffsetBaseInnerL4Header", \
    "bcmFieldDataOffsetBaseHigigHeader", \
    "bcmFieldDataOffsetBaseHigig2Header"  \
}

/* DATA qualifier object, used for creation of custom data qualifiers. */
typedef struct bcm_field_data_qualifier_s {
    int qual_id;                        /* Data qualifier id. */
    uint32 flags;                       /* Data qualifier flags
                                           BCM_FIELD_DATA_QUALIFIER_XXX. */
    bcm_field_data_offset_base_t offset_base; /* Offset base adjustment. */
    uint16 offset;                      /* Packet byte offset. */
    int length;                         /* Matched data byte length. */
} bcm_field_data_qualifier_t;

/* Ethertype based DATA packet qualifier structure. */
typedef struct bcm_field_data_ethertype_s {
    int relative_offset;            /* Packet byte offset relative to qualifier
                                       byte offset. */
    bcm_port_ethertype_t ethertype; /* Ether type. */
    uint16 l2;                      /* Packet l2 format.
                                       (FIELD_DATA_FORMAT_L2_XXX) */
    uint16 vlan_tag;                /* vlan_tag_format.
                                       (FIELD_DATA_FORMAT_VLAN_XXX) */
} bcm_field_data_ethertype_t;

/* Ip protocol/Next header based DATA packet qualifier structure. */
typedef struct bcm_field_data_ip_protocol_s {
    int relative_offset;    /* Packet byte offset relative to qualifier byte
                               offset. */
    uint16 flags;           /* Packet ip header version.
                               (FIELD_DATA_FORMAT_IP_XXX) */
    uint8 ip;               /* Ip protocol id. */
    uint16 l2;              /* Packet l2 format. (FIELD_DATA_FORMAT_L2_XXX) */
    uint16 vlan_tag;        /* vlan_tag_format. (FIELD_DATA_FORMAT_VLAN_XXX) */
} bcm_field_data_ip_protocol_t;

/* Packet format based DATA qualifier specification structure. */
typedef struct bcm_field_data_packet_format_s {
    int relative_offset;    /* Packet byte offset relative to qualifier byte
                               offset. */
    uint16 l2;              /* Packet l2 format. (FIELD_DATA_FORMAT_L2_XXX) */
    uint16 vlan_tag;        /* vlan_tag_format. (FIELD_DATA_FORMAT_VLAN_XXX) */
    uint16 outer_ip;        /* Outer IP header
                               version.(FIELD_DATA_FORMAT_IP_XXX) */
    uint16 inner_ip;        /* Inner IP header
                               version.(FIELD_DATA_FORMAT_IP_XXX) */
    uint16 tunnel;          /* Tunnel.(FIELD_DATA_FORMAT_TUNNEL_XXX) */
    uint16 mpls;            /* Mpls labels.(FIELD_DATA_FORMAT_MPLS_XXX) */
} bcm_field_data_packet_format_t;

/* User-Defined Field (UDF) VLAN Flags. */
#define BCM_FIELD_USER_VLAN_MASK    0x00000018 
#define BCM_FIELD_USER_VLAN_NOTAG   (0 << 3)   
#define BCM_FIELD_USER_VLAN_ONETAG  (1 << 3)   
#define BCM_FIELD_USER_VLAN_TWOTAG  (2 << 3)   
#define BCM_FIELD_USER_VLAN_NOTUSED (3 << 3)   

/* User-Defined Field (UDF) IP Flags. */
#define BCM_FIELD_USER_IP_MASK              0x000003c0 
#define BCM_FIELD_USER_IP4_HDR_ONLY         (0 << 6)   
#define BCM_FIELD_USER_IP6_HDR_ONLY         (1 << 6)   
#define BCM_FIELD_USER_IP6_FRAGMENT         (2 << 6)   
#define BCM_FIELD_USER_IP4_OVER_IP4         (3 << 6)   
#define BCM_FIELD_USER_IP6_OVER_IP4         (4 << 6)   
#define BCM_FIELD_USER_IP4_OVER_IP6         (5 << 6)   
#define BCM_FIELD_USER_IP6_OVER_IP6         (6 << 6)   
#define BCM_FIELD_USER_GRE_IP4_OVER_IP4     (7 << 6)   
#define BCM_FIELD_USER_GRE_IP6_OVER_IP4     (8 << 6)   
#define BCM_FIELD_USER_GRE_IP4_OVER_IP6     (9 << 6)   
#define BCM_FIELD_USER_GRE_IP6_OVER_IP6     (10 << 6)  
#define BCM_FIELD_USER_ONE_MPLS_LABEL       (11 << 6)  
#define BCM_FIELD_USER_TWO_MPLS_LABELS      (12 << 6)  
#define BCM_FIELD_USER_IP6_FRAGMENT_OVER_IP4 (13 << 6)  
#define BCM_FIELD_USER_IP_NOTUSED           (14 << 6)  

/* Flags for Auto Adjust Offset with IP options length. */
#define BCM_FIELD_USER_OPTION_ADJUST    (1 << 12)  

/* Flags for Auto Adjust Offset with GRE header options length. */
#define BCM_FIELD_USER_GRE_OPTION_ADJUST    (1 << 13)  

/* 
 * On devices that support this feature, these flags indicate that the
 * HiGig header is being examined via the UDF mechanism.
 */
#define BCM_FIELD_USER_HIGIG    (1 << 14)  
#define BCM_FIELD_USER_HIGIG2   (1 << 15)  

/* User-Defined Field (UDF) OFFSET BASE Flags. */
#define BCM_FIELD_USER_OFFSET_BASE_MASK     0x000f0000 
#define BCM_FIELD_USER_OFFSET_BASE_START_OF_FRAME 0x00010000 
#define BCM_FIELD_USER_OFFSET_BASE_END_OF_L2HDR 0x00020000 
#define BCM_FIELD_USER_OFFSET_BASE_END_OF_L3HDR 0x00040000 
#define BCM_FIELD_USER_OFFSET_BASE_END_OF_TAG 0x00080000 

/* Packet colors. */
#define BCM_FIELD_COLOR_PRESERVE    0          
#define BCM_FIELD_COLOR_GREEN       1          
#define BCM_FIELD_COLOR_YELLOW      2          
#define BCM_FIELD_COLOR_RED         3          

/* IPv4 Flags from RFC-791 (for bcm_field_qualify_IpFlags). */
#define BCM_FIELD_IPFLAGS_MF    0x1        /* More Fragments. */
#define BCM_FIELD_IPFLAGS_DF    0x2        /* Don't Fragment. */
#define BCM_FIELD_IPFLAGS_RF    0x4        /* Reserved. */
#define BCM_FIELD_IPFLAGS_MASK  0x7        /* All bits. */

/* TCP Control Flags from RFC-793 (for bcm_field_qualify_TcpControl). */
#define BCM_FIELD_TCPCONTROL_FIN    0x01       /* No more data. */
#define BCM_FIELD_TCPCONTROL_SYN    0x02       /* Sync seq numbers. */
#define BCM_FIELD_TCPCONTROL_RST    0x04       /* Reset connection. */
#define BCM_FIELD_TCPCONTROL_PSH    0x08       /* Push. */
#define BCM_FIELD_TCPCONTROL_ACK    0x10       /* Ack field valid. */
#define BCM_FIELD_TCPCONTROL_URG    0x20       /* Urgent field valid. */
#define BCM_FIELD_TCPCONTROL_R40    0x40       /* Reserved. */
#define BCM_FIELD_TCPCONTROL_R80    0x80       /* Reserved. */
#define BCM_FIELD_TCPCONTROL_MASK   0x3f       /* All non-reserved bits. */

/* Packet Lookup Status (for bcm_field_qualify_LookupStatus). */
#define BCM_FIELD_LOOKUP_L3_TUN_HIT     0x0001     /* L3 tunnel table hit. */
#define BCM_FIELD_LOOKUP_VXLT_HIT       0x0002     /* VLAN translation hit. */
#define BCM_FIELD_LOOKUP_VLAN_VALID     0x0004     /* VLAN ID valid. */
#define BCM_FIELD_LOOKUP_ING_STP_MASK   0x0018     /* Ingress spanning tree
                                                      state. */
#define BCM_FIELD_LOOKUP_ING_STP_DIS    0x0000     /* STP state Disabled. */
#define BCM_FIELD_LOOKUP_ING_STP_BLK    0x0008     /* STP state Blocking. */
#define BCM_FIELD_LOOKUP_ING_STP_LRN    0x0010     /* STP state Learning. */
#define BCM_FIELD_LOOKUP_ING_STP_FWD    0x0018     /* STP state Forwarding. */
#define BCM_FIELD_LOOKUP_L2_SA_HIT      0x0020     /* L2 src lookup hit. */
#define BCM_FIELD_LOOKUP_L2_SA_STATIC   0x0040     /* L2 src static bit. */
#define BCM_FIELD_LOOKUP_L2_DA_HIT      0x0080     /* L2 dst lookup hit. */
#define BCM_FIELD_LOOKUP_L3_ROUTABLE    0x0100     /* L2 dst L3 bit. */
#define BCM_FIELD_LOOKUP_L2_CACHE_HIT   0x0200     /* L2 cache lookup hit. */
#define BCM_FIELD_LOOKUP_L3UC_SA_HIT    0x0400     /* L3 unicast src lookup hit. */
#define BCM_FIELD_LOOKUP_L3UC_DA_HIT    0x0800     /* L3 unicast dst lookup hit. */
#define BCM_FIELD_LOOKUP_L3MC_SGV_HIT   0x1000     /* L3 multicast table hit. */
#define BCM_FIELD_LOOKUP_L3_LPM_HIT     0x2000     /* Longest pref. table hit. */
#define BCM_FIELD_LOOKUP_L2_MISS        0x4000     /* L2 src miss/station movmt. */
#define BCM_FIELD_LOOKUP_DOS_ATTACK     0x8000     /* DoS attack drop candidate. */

/* IP Info (for bcm_field_qualify_IpInfo). */
#define BCM_FIELD_IP_HDR_OFFSET_ZERO    0x0001     
#define BCM_FIELD_IP_HDR_FLAGS_MF       0x0002     
#define BCM_FIELD_IP_CHECKSUM_OK        0x0004     

/* Packet Format Values (for bcm_field_qualify_PacketFormat). */
#define BCM_FIELD_PKT_FMT_L2_ETH_II     0x0000     /* Ethernet II frame format. */
#define BCM_FIELD_PKT_FMT_L2_SNAP       0x0001     /* SNAP frame format. */
#define BCM_FIELD_PKT_FMT_L2_LLC        0x0002     /* LLC frame format. */
#define BCM_FIELD_PKT_FMT_L2_802_3      0x0003     /* IEEE 802.3 frame format. */
#define BCM_FIELD_PKT_FMT_L2_MASK       \
    (BCM_FIELD_PKT_FMT_L2_ETH_II | \
     BCM_FIELD_PKT_FMT_L2_SNAP   | \
     BCM_FIELD_PKT_FMT_L2_LLC    | \
     BCM_FIELD_PKT_FMT_L2_802_3) /* L2 format mask. */
#define BCM_FIELD_PKT_FMT_OUTER_TAGGED  0x0004     /* Outer tag present. */
#define BCM_FIELD_PKT_FMT_INNER_TAGGED  0x0008     /* Inner tag present. */
#define BCM_FIELD_PKT_FMT_TAGGED_MASK   \
    (BCM_FIELD_PKT_FMT_OUTER_TAGGED | \
     BCM_FIELD_PKT_FMT_INNER_TAGGED) /* Tag info mask. */
#define BCM_FIELD_PKT_FMT_IPV4          0x0010     /* IPv4 format packet. */
#define BCM_FIELD_PKT_FMT_IPV6          0x0020     /* IPv4 format packet. */
#define BCM_FIELD_PKT_FMT_IP_MASK       \
    (BCM_FIELD_PKT_FMT_IPV4 | \
     BCM_FIELD_PKT_FMT_IPV6) /* Packt format mask. */

/* 
 * Field Qualifier VlanFormat (for bcm_field_qualify_VlanFormat).
 * Used to qualify packets based on vlan tag format.
 */
#define BCM_FIELD_VLAN_FORMAT_OUTER_TAGGED  0x1        /* Outer tag present. */
#define BCM_FIELD_VLAN_FORMAT_INNER_TAGGED  0x2        /* Inner tag present. */
#define BCM_FIELD_VLAN_FORMAT_OUTER_TAGGED_VID_ZERO 0x4        /* Outer tag present and
                                                          vlan id is zero. */
#define BCM_FIELD_VLAN_FORMAT_INNER_TAGGED_VID_ZERO 0x8        /* Inner tag present and
                                                          vlan id is zero. */

/* Packet Resolution Values (for bcm_field_qualify_PacketRes). */
#define BCM_FIELD_PKT_RES_UNKNOWN       0x0        /* No resolution. */
#define BCM_FIELD_PKT_RES_CONTROL       0x1        /* Ethernet control (8808). */
#define BCM_FIELD_PKT_RES_BPDU          0x2        /* L2 cache BPDU bit. */
#define BCM_FIELD_PKT_RES_L2BC          0x3        /* L2 broadcast. */
#define BCM_FIELD_PKT_RES_L2UC          0x4        /* L2 unicast. */
#define BCM_FIELD_PKT_RES_L2UNKNOWN     0x5        /* Unknown L2 dest (DLF). */
#define BCM_FIELD_PKT_RES_L3MCUNKNOWN   0x6        /* Unknown L3 multicast. */
#define BCM_FIELD_PKT_RES_L3MCKNOWN     0x7        /* Known L3 multicast. */
#define BCM_FIELD_PKT_RES_L2MCKNOWN     0x8        /* Known L2 multicast. */
#define BCM_FIELD_PKT_RES_L2MCUNKNOWN   0x9        /* Unknown L2 multicast. */
#define BCM_FIELD_PKT_RES_L3UCKNOWN     0xa        /* Known L3 unicast. */
#define BCM_FIELD_PKT_RES_L3UCUNKNOWN   0xb        /* Unknown L3 unicast. */
#define BCM_FIELD_PKT_RES_MPLSKNOWN     0xc        /* Known MPLS packet   . */
#define BCM_FIELD_PKT_RES_MPLSL3KNOWN   0xd        /* Known MPLS L3 packet. */
#define BCM_FIELD_PKT_RES_MPLSL2KNOWN   0xe        /* Known MPLS L2 packet. */
#define BCM_FIELD_PKT_RES_MPLSUNKNOWN   0xf        /* Unknown MPLS packet . */
#define BCM_FIELD_PKT_RES_LAST          (BCM_FIELD_PKT_RES_MPLSUNKNOWN) /* Must be >= highest valid
                                                      BCM_FIELD_PKT_RES_* */

/* Module header opcodes (for bcm_field_qualify_MHOpcode). */
#define BCM_FIELD_MHOPCODE_CONTROL          0          
#define BCM_FIELD_MHOPCODE_UNICAST          1          
#define BCM_FIELD_MHOPCODE_BROADCAST_DLF    2          
#define BCM_FIELD_MHOPCODE_MULTICAST        3          
#define BCM_FIELD_MHOPCODE_IPMULTICAST      4          

/* 
 * Chain action param1 values. This is the choice of chaining type,
 * internal vs. external and/or the choice of which slice the action(s)
 * come from.
 */
#define BCM_FIELD_CHAINTYPE_EXTERNAL    (1 << 0)   /* Valid only on devices that
                                                      support external TCAMs. */
#define BCM_FIELD_CHAINTYPE_EVEN        (1 << 1)   
#define BCM_FIELD_CHAINTYPE_ODD         (0)        
#define BCM_FIELD_CHAINTYPE_DEFAULT     BCM_FIELD_CHAINTYPE_ODD 

/* User-defined field maximums. */
#define BCM_FIELD_USER_MAX_UDF_NUM  1          /* UDF0 or UDF1. */
#define BCM_FIELD_USER_MAX_USER_NUM 3          /* Valid range: 0..3 */
#define BCM_FIELD_USER_NUM_UDFS     93         
#define BCM_FIELD_USER_FIELD_SIZE   4          /* Bytes per user_num. */
#define BCM_FIELD_USER_MAX_LENGTH   (1 << 5)   /* Number of bits. */

/* Meter select parameters. */
#define BCM_FIELD_METER_PEAK        1          
#define BCM_FIELD_METER_COMMITTED   2          

/* Metering modes for bcmFieldActionMeterConfig param0. */
#define BCM_FIELD_METER_MODE_DEFAULT        0x0        
#define BCM_FIELD_METER_MODE_FLOW           0x1        
#define BCM_FIELD_METER_MODE_trTCM_COLOR_BLIND 0x2        
#define BCM_FIELD_METER_MODE_trTCM_COLOR_AWARE 0x3        
#define BCM_FIELD_METER_MODE_srTCM_COLOR_BLIND 0x6        
#define BCM_FIELD_METER_MODE_srTCM_COLOR_AWARE 0x7        

/* 
 * Counter pair modes for bcmFieldActionUpdateCounter
 * 
 * Specifies increment mode for upper (counter_num=1) and lower
 * (counter_num=0) counter in the pair. For example: GREEN_YELLOW would
 * increment the upper counter for green packets and the lower counter
 * for yellow packets.
 * 
 * BCM_FIELD_COUNTER_MODE_BYTES can be ORd with any of the other values
 * to make the counter count bytes instead of packets.
 */
#define BCM_FIELD_COUNTER_MODE_NO_NO        0x0000     
#define BCM_FIELD_COUNTER_MODE_NO_YES       0x0001     
#define BCM_FIELD_COUNTER_MODE_YES_NO       0x0002     
#define BCM_FIELD_COUNTER_MODE_RED_NOTRED   0x0003     
#define BCM_FIELD_COUNTER_MODE_GREEN_NOTGREEN 0x0004     
#define BCM_FIELD_COUNTER_MODE_GREEN_RED    0x0005     
#define BCM_FIELD_COUNTER_MODE_GREEN_YELLOW 0x0006     
#define BCM_FIELD_COUNTER_MODE_RED_YELLOW   0x0007     
#define BCM_FIELD_COUNTER_MODE_BYTES_PACKETS 0x0008     /* Upper counter is
                                                          bytes; lower counter
                                                          is packets */
#define BCM_FIELD_COUNTER_MODE_GREEN        0x0010     
#define BCM_FIELD_COUNTER_MODE_YELLOW       0x0020     
#define BCM_FIELD_COUNTER_MODE_RED          0x0040     
#define BCM_FIELD_COUNTER_MODE_ALL          0x0070     
#define BCM_FIELD_COUNTER_MODE_PACKETS      0x0000     
#define BCM_FIELD_COUNTER_MODE_BYTES        0x0100     
#define BCM_FIELD_COUNTER_MODE_DEFAULT      BCM_FIELD_COUNTER_MODE_NO_YES 

/* Opaque handle to a field entry. */
typedef int bcm_field_entry_t;

/* Opaque handle to a field group. */
typedef int bcm_field_group_t;
#if 1/* anzhen.zheng, 5/26/2008 */
typedef int bcm_field_group_sbmp_t;
#endif
/* 
 * Field Qualifiers
 * 
 * Field qualifiers are collected into qualifier sets (qsets), which are
 * used to allocate field groups.
 * 
 * Note: These are in order of their bit width. Do not change the order
 * or the field select code algorithm for wide-mode will get slower.
 */
typedef enum bcm_field_qualify_e {
    bcmFieldQualifySrcIp6,              /* [0x00] Source IPv6 Address. */
    bcmFieldQualifyDstIp6,              /* [0x01] Destination IPv6 Address. */
    bcmFieldQualifySrcIp6High,          /* [0x02] Src. IPv6 Address (High/Upper
                                           64 bits). */
    bcmFieldQualifyDstIp6High,          /* [0x03] Dest IPv6 Address (High/Upper
                                           64 bits). */
    bcmFieldQualifySrcMac,              /* [0x04] Source L2 MAC Address. */
    bcmFieldQualifyDstMac,              /* [0x05] Destination L2 MAC Address. */
    bcmFieldQualifySnap,                /* [0x06] 40: SNAP Header. */
    bcmFieldQualifySrcIp,               /* [0x07] Source IPv4 Address. */
    bcmFieldQualifyDstIp,               /* [0x08] Destination IPv4 Address. */
    bcmFieldQualifyLlc,                 /* [0x09] 24: LLC Header. */
    bcmFieldQualifyInPort,              /* [0x0a] Single Input Port. */
    bcmFieldQualifyInPorts,             /* [0x0b] Input Port Bitmap. */
    bcmFieldQualifyOutPorts,            /* [0x0c] Output Port Bitmap. */
    bcmFieldQualifyDrop,                /* [0x0d] Packet is flagged to be
                                           dropped . */
    bcmFieldQualifyIp6FlowLabel,        /* [0x0e] IPv6 Flow Label. */
    bcmFieldQualifyOuterVlan,           /* [0x0f] Outer VLAN. */
    bcmFieldQualifyInnerVlan,           /* [0x10] Inner VLAN (double-tagged pkts
                                           only). */
    bcmFieldQualifyLookupStatus,        /* [0x11] DEPRECATED Lookup status
                                           (BCM_FIELD_LOOKUP_xxx). */
    bcmFieldQualifyRangeCheck,          /* [0x12] TCP/UDP Port Range Check
                                           Results. */
    bcmFieldQualifyL4SrcPort,           /* [0x13] TCP/UDP Source Port. */
    bcmFieldQualifyL4DstPort,           /* [0x14] TCP/UDP Destination Port. */
    bcmFieldQualifyEtherType,           /* [0x15] Ethernet Type. */
    bcmFieldQualifyIpProtocol,          /* [0x16] IP Protocol Field. */
    bcmFieldQualifyDSCP,                /* [0x17] Diffserv Code Point. */
    bcmFieldQualifyTos = bcmFieldQualifyDSCP, /* [0x17] Tos - same as DSCP. */
    bcmFieldQualifyTtl,                 /* [0x18] Time To Live/Hop Limit. */
    bcmFieldQualifyIp6NextHeader,       /* [0x19] IPv6 Next Header/IP Protocol. */
    bcmFieldQualifyIp6TrafficClass,     /* [0x1a] IPv6 Traffic Class. */
    bcmFieldQualifyIp6HopLimit,         /* [0x1b] IPv6 Hop Limit. */
    bcmFieldQualifySrcModid,            /* [0x1c] Source Module ID (deprecated). */
    bcmFieldQualifySrcPortTgid,         /* [0x1d] Source Port/Trunk Group ID
                                           (deprecated). */
    bcmFieldQualifySrcPort,             /* [0x1e] Source Module ID and Port . */
    bcmFieldQualifySrcTrunk,            /* [0x1f] Source Trunk Group ID . */
    bcmFieldQualifyDstModid,            /* [0x20] Destination Module ID
                                           (deprecated). */
    bcmFieldQualifyDstPortTgid,         /* [0x21] Dest Port/Trunk Group ID
                                           (deprecated. */
    bcmFieldQualifyDstPort,             /* [0x22] Destination Module ID and Port
                                           . */
    bcmFieldQualifyDstTrunk,            /* [0x23] Destination Trunk Group ID . */
    bcmFieldQualifyTcpControl,          /* [0x24] TCP Control Flags. */
    bcmFieldQualifyPacketRes,           /* [0x25] Pkt resolution
                                           (BCM_FIELD_PKT_RES_xxx). */
    bcmFieldQualifyPacketFormat,        /* [0x26] DEPRECATED Packet Format
                                           (BCM_FIELD_PKT_FMT_xxx). */
    bcmFieldQualifySrcClassL2,          /* [0x27] Source Class based on L2
                                           lookup result. */
    bcmFieldQualifySrcMacGroup = bcmFieldQualifySrcClassL2, /* [0x27] Same as
                                           bcmFieldQualifySrcClassL2. */
    bcmFieldQualifySrcClassL3,          /* [0x28] Source Class based on L3
                                           lookup result. */
    bcmFieldQualifySrcClassField,       /* [0x29] Source Class based on
                                           bcmFieldStageLookup result. */
    bcmFieldQualifyDstClassL2,          /* [0x2a] Destination Class based on L2
                                           lookup result. */
    bcmFieldQualifyDstClassL3,          /* [0x2b] Destination Class based on L3
                                           lookup result. */
    bcmFieldQualifyDstClassField,       /* [0x2c] Destination Class based on
                                           bcmFieldStageLookup result. */
    bcmFieldQualifyLookupClass0 = bcmFieldQualifyDstClassField, /* [0x2c] Same as
                                           bcmFieldQualifyDstClassField. */
    bcmFieldQualifyIpInfo,              /* [0x2d] IP Information
                                           (BCM_FIELD_IP_xxx). */
    bcmFieldQualifyIpProtocolCommon,    /* [0x2e] 3: Common IP protocols. */
    bcmFieldQualifyMHOpcode,            /* [0x2f] Module Header Opcode. */
    bcmFieldQualifyIpFlags,             /* [0x30] IPv4 Flags. */
    bcmFieldQualifyInnerTpid,           /* [0x31] 2: Inner VLAN TPID. */
    bcmFieldQualifyOuterTpid,           /* [0x32] 2: Outer VLAN TPID. */
    bcmFieldQualifyIpType,              /* [0x33] IP Type (bcmFieldIpTypeXXX). */
    bcmFieldQualifyChain,               /* [0x34] Internal use only. */
    bcmFieldQualifyDecap,               /* [0x35] Decapsulation occurred. */
    bcmFieldQualifyHiGig,               /* [0x36] HiGig packet. */
    bcmFieldQualifyHiGigProxy,          /* [0x37] HiGig proxy processing is
                                           enabled. */
    bcmFieldQualifyStage,               /* [0x38] Field Processor pipeline
                                           stage. */
    bcmFieldQualifyStageIngress,        /* [0x39] Field Processor pipeline
                                           ingress stage. */
    bcmFieldQualifyStageIngressSecurity, /* [0x3a] Field Processor ingress
                                           security stage. */
    bcmFieldQualifyStageIngressQoS,     /* [0x3b] Field Processor ingress QOS
                                           stage. */
    bcmFieldQualifyStageLookup,         /* [0x3c] Field Processor pipeline
                                           lookup stage. */
    bcmFieldQualifyStageEgress,         /* [0x3d] Field Processor pipeline
                                           egress stage. */
    bcmFieldQualifyStageEgressSecurity, /* [0x3e] Field Processor egress
                                           security stage. */
    bcmFieldQualifyStageExternal,       /* [0x3f] Field Processor Rules in
                                           External slice. */
    bcmFieldQualifySrcIpEqualDstIp,     /* [0x40] Src IP == Dst IP. */
    bcmFieldQualifyEqualL4Port,         /* [0x41] L4 Src Port == Dst Port. */
    bcmFieldQualifyTcpSequenceZero,     /* [0x42] Sequence number = 0. */
    bcmFieldQualifyTcpHeaderSize,       /* [0x43] TCP Header Size. */
    bcmFieldQualifyInterfaceClassL2,    /* [0x44] Vlan Class Id. */
    bcmFieldQualifyInterfaceClassL3,    /* [0x45] L3 Interface Class Id. */
    bcmFieldQualifyL3IntfGroup = bcmFieldQualifyInterfaceClassL3, /* [0x45] Same as
                                           bcmFieldQualifyInterfaceClass. */
    bcmFieldQualifyInterfaceClassPort,  /* [0x46] Port Class Id. */
    bcmFieldQualifyPortClass = bcmFieldQualifyInterfaceClassPort, /* [0x46] Same as
                                           bcmFieldQualifyInterfaceClassPort. */
    bcmFieldQualifyL3Routable,          /* [0x47] L3 routable bit for FB2. */
    bcmFieldQualifyIpFrag,              /* [0x48] IP Fragment info. */
    bcmFieldQualifyVrf,                 /* [0x49] VRF Id for FB 2. */
    bcmFieldQualifyOutPort,             /* [0x4a] Single Output Port. */
    bcmFieldQualifyIp4,                 /* [0x4b] Qualify IpType == IPv4Any. */
    bcmFieldQualifyIp6,                 /* [0x4c] Qualify IpType == Ipv6Any. */
    bcmFieldQualifyL2Format,            /* [0x4d] Qualify on L2 header format. */
    bcmFieldQualifyVlanFormat,          /* [0x4e] Qualify on vlan tag format. */
    bcmFieldQualifyExtensionHeaderType, /* [0x4f] Qualify on  Next Header Field
                                           in First Extension Header. */
    bcmFieldQualifyExtensionHeaderSubCode, /* [0x50] Qualify on First byte after
                                           extentsion header length field. */
    bcmFieldQualifyL4Ports,             /* [0x51] Four bytes after L3 header are
                                           available. */
    bcmFieldQualifyMirrorCopy,          /* [0x52] Qualify mirrored traffic. */
    bcmFieldQualifyTunnelTerminated,    /* [0x53] Qualify tunnel terminated
                                           traffic. */
    bcmFieldQualifyMplsTerminated,      /* [0x54] Qualify mpls terminated
                                           traffic. */
    bcmFieldQualifyInnerSrcIp,          /* [0x55] Inner ip header source IPv6
                                           Address. */
    bcmFieldQualifyInnerDstIp,          /* [0x56] Inner ip header destination
                                           IPv6 Address. */
    bcmFieldQualifyInnerSrcIp6,         /* [0x57] Inner ip header source IPv6
                                           Address. */
    bcmFieldQualifyInnerDstIp6,         /* [0x58] Inner ip header destination
                                           IPv6 Address. */
    bcmFieldQualifyInnerSrcIp6High,     /* [0x59] Inner ip header Src. IPv6
                                           Address (High/Upper 64 bits). */
    bcmFieldQualifyInnerDstIp6High,     /* [0x5a] Inner ip header Dest IPv6
                                           Address (High/Upper 64 bits). */
    bcmFieldQualifyInnerTtl,            /* [0x5b] Inner ip header time To
                                           Live/Hop Limit. */
    bcmFieldQualifyInnerDSCP,           /* [0x5c] Inner ip header diffserv Code
                                           Point. */
    bcmFieldQualifyInnerIpProtocol,     /* [0x5d] Inner ip header IP Protocol
                                           Field. */
    bcmFieldQualifyInnerIpFrag,         /* [0x5e] Inner ip header IP Fragment
                                           info. */
    bcmFieldQualifyVlanTranslationHit,  /* [0x5f] Vlan Translation table hit. */
    bcmFieldQualifyForwardingVlanValid, /* [0x60] Forwarding vlan is valid. */
    bcmFieldQualifyIngressStpState,     /* [0x61] Ingress Vlan STG STP state. */
    bcmFieldQualifyL2SrcHit,            /* [0x62] L2 Source lookup success. */
    bcmFieldQualifyL2SrcStatic,         /* [0x63] L2 Source is static entry. */
    bcmFieldQualifyL2DestHit,           /* [0x64] L2 Destination lookup success. */
    bcmFieldQualifyL2StationMove,       /* [0x65] L2 Source port mismatch. */
    bcmFieldQualifyL2CacheHit,          /* [0x66] L2 Destination cache lookup
                                           sucess. */
    bcmFieldQualifyL3SrcHostHit,        /* [0x67] L3 Source lookup host table
                                           hit. */
    bcmFieldQualifyL3DestHostHit,       /* [0x68] L3 Destination lookup host
                                           table hit. */
    bcmFieldQualifyL3DestRouteHit,      /* [0x69] L3 Destination lookup route
                                           table hit. */
    bcmFieldQualifyIpmcStarGroupHit,    /* [0x6a] L3 Multicast lookup
                                           (Star,Group) hit. */
    bcmFieldQualifyDosAttack,           /* [0x6b] Denial of Service attack
                                           frame. */
    bcmFieldQualifyIpAuth,              /* [0x6c] IP Authenticated. */
    bcmFieldQualifyClassId,             /* [0x6d] internal use only. */
    bcmFieldQualifyBigIcmpCheck,        /* [0x6e] internal use only. */
    bcmFieldQualifyIcmpTypeCode,        /* [0x6f] internal use only. */
    bcmFieldQualifyIgmpTypeMaxRespTime, /* [0x70] internal use only. */
    bcmFieldQualifyCount                /* Always Last. Not a usable value. */
} bcm_field_qualify_t;

#define BCM_FIELD_QUALIFY_STRINGS \
{ \
    "SrcIp6", \
    "DstIp6", \
    "SrcIp6High", \
    "DstIp6High", \
    "SrcMac", \
    "DstMac", \
    "Snap", \
    "SrcIp", \
    "DstIp", \
    "Llc", \
    "InPort", \
    "InPorts", \
    "OutPorts", \
    "Drop", \
    "Ip6FlowLabel", \
    "OuterVlan", \
    "InnerVlan", \
    "LookupStatus", \
    "RangeCheck", \
    "L4SrcPort", \
    "L4DstPort", \
    "EtherType", \
    "IpProtocol", \
    "DSCP", \
    "Ttl", \
    "Ip6NextHeader", \
    "Ip6TrafficClass", \
    "Ip6HopLimit", \
    "SrcModid", \
    "SrcPortTgid", \
    "SrcPort", \
    "SrcTrunk", \
    "DstModid", \
    "DstPortTgid", \
    "DstPort", \
    "DstTrunk", \
    "TcpControl", \
    "PacketRes", \
    "PacketFormat", \
    "SrcClassL2", \
    "SrcClassL3", \
    "SrcClassField", \
    "DstClassL2", \
    "DstClassL3", \
    "DstClassField", \
    "IpInfo", \
    "IpProtocolCommon", \
    "MHOpcode", \
    "IpFlags", \
    "InnerTpid", \
    "OuterTpid", \
    "IpType", \
    "Chain", \
    "Decap", \
    "HiGig", \
    "HiGigProxy", \
    "Stage", \
    "StageIngress", \
    "StageIngressSecurity", \
    "StageIngressQoS", \
    "StageLookup", \
    "StageEgress", \
    "StageEgressSecurity", \
    "StageExternal", \
    "SrcIpEqualDstIp", \
    "EqualL4Port", \
    "TcpSequenceZero", \
    "TcpHeaderSize", \
    "InterfaceClassL2", \
    "InterfaceClassL3", \
    "InterfaceClassPort", \
    "L3Routable", \
    "IpFrag", \
    "Vrf", \
    "OutPort", \
    "Ip4", \
    "Ip6", \
    "L2Format", \
    "VlanFormat", \
    "ExtensionHeaderType", \
    "ExtensionHeaderSubCode", \
    "L4Ports", \
    "MirrorCopy", \
    "TunnelTerminated", \
    "MplsTerminated", \
    "InnerSrcIp", \
    "InnerDstIp", \
    "InnerSrcIp6", \
    "InnerDstIp6", \
    "InnerSrcIp6High", \
    "InnerDstIp6High", \
    "InnerTtl", \
    "InnerDSCP", \
    "InnerIpProtocol", \
    "InnerIpFrag", \
    "VlanTranslationHit", \
    "ForwardingVlanValid", \
    "IngressStpState", \
    "L2SrcHit", \
    "L2SrcStatic", \
    "L2DestHit", \
    "L2StationMove", \
    "L2CacheHit", \
    "L3SrcHostHit", \
    "L3DestHostHit", \
    "L3DestRouteHit", \
    "IpmcStarGroupHit", \
    "DosAttack", \
    "IpAuth", \
    "ClassId", \
    "BigIcmpCheck", \
    "IcmpTypeCode", \
    "IgmpTypeMaxRespTime"  \
}

#define BCM_FIELD_QUALIFY_MAX   (bcmFieldQualifyCount + BCM_FIELD_USER_NUM_UDFS) /* Must be >= bcmFieldQualifyCount. */

#define BCM_FIELD_QUALIFY_WIDTH_MAX 30         

#define BCM_FIELD_QSET_WIDTH_MAX    \
    ((BCM_FIELD_QUALIFY_WIDTH_MAX+1) * \
    bcmFieldQualifyCount + 1) 

#define BCM_FIELD_EXACT_MATCH_MASK  (~0)       /* Mask parameter value. */

/* 
 * Field Qualifier Decap.
 * 
 * Possible data values for bcm_field_qualify_decap().
 */
typedef enum bcm_field_decap_e {
    bcmFieldDecapNone,          /* No Decap. */
    bcmFieldDecapL2Mpls,        /* L2 MPLS Decap. */
    bcmFieldDecapL3Mpls,        /* L3 MPLS Decap. */
    bcmFieldDecapOtherMPLS,     /* non-L2 or L3 MPLS Decap. */
    bcmFieldDecapIpTunnel,      /* IP Tunnel Decap. */
    bcmFieldDecapIpGreTunnel,   /* IP GRE Tunnel Decap. */
    bcmFieldDecapIpUdpTunnel,   /* IP UDP Tunnel Decap. */
    bcmFieldDecapIpPimTunnel,   /* IP PIM Tunnel Decap. */
    bcmFieldDecapCount          /* Always Last. Not a usable value. */
} bcm_field_decap_t;

#define BCM_FIELD_DECAP_STRINGS \
{ \
    "None", \
    "L2Mpls", \
    "L3Mpls", \
    "OtherMPLS", \
    "IpTunnel", \
    "IpGreTunnel", \
    "IpUdpTunnel", \
    "IpPimTunnel"  \
}

/* 
 * Field Statge Type
 * 
 * Selects which pipeline stage an entry applies to.
 */
typedef enum bcm_field_stage_e {
    bcmFieldStageFirst,         /* Earliest Field stage in device. */
    bcmFieldStageIngressEarly,  /* Early Ingress Field stage. */
    bcmFieldStageIngressLate,   /* Earie Ingress Field stage. */
    bcmFieldStageDefault,       /* Default stage for device. */
    bcmFieldStageLast,          /* Latest Field stage in device. */
    bcmFieldStageCount          /* Always Last. Not a usable value. */
} bcm_field_stage_t;

#define BCM_FIELD_STAGE_STRINGS \
{ \
    "First", \
    "IngressEarly", \
    "IngressLate", \
    "Default", \
    "Last"  \
}

/* Field Qualifier IpType (for bcm_field_qualify_IpType). */
typedef enum bcm_field_IpType_e {
    bcmFieldIpTypeAny,              /* Don't care. */
    bcmFieldIpTypeNonIp,            /* Non-Ip packet. */
    bcmFieldIpTypeIpv4Not,          /* Anything but IPv4 packets. */
    bcmFieldIpTypeIpv4NoOpts,       /* IPv4 without options. */
    bcmFieldIpTypeIpv4WithOpts,     /* IPv4 with options. */
    bcmFieldIpTypeIpv4Any,          /* Any IPv4 packet. */
    bcmFieldIpTypeIpv6Not,          /* Anything but IPv6 packets. */
    bcmFieldIpTypeIpv6,             /* IPv6 packet. */
    bcmFieldIpTypeIp,               /* IPv4 and IPv6 packets. */
    bcmFieldIpTypeArp,              /* ARP/RARP. */
    bcmFieldIpTypeArpRequest,       /* ARP Request. */
    bcmFieldIpTypeArpReply,         /* ARP Reply. */
    bcmFieldIpTypeMplsUnicast,      /* Mpls unicast frame (ethertype = 0x8847). */
    bcmFieldIpTypeMplsMulticast,    /* Mpls mcast frame   (ethertype = 0x8848). */
    bcmFieldIpTypeCount             /* Always Last. Not a usable value. */
} bcm_field_IpType_t;

#define BCM_FIELD_IPTYPE_STRINGS \
{ \
    "Any", \
    "NonIp", \
    "Ipv4Not", \
    "Ipv4NoOpts", \
    "Ipv4WithOpts", \
    "Ipv4Any", \
    "Ipv6Not", \
    "Ipv6", \
    "Ip", \
    "Arp", \
    "ArpRequest", \
    "ArpReply", \
    "MplsUnicast", \
    "MplsMulticast"  \
}

/* 
 * Field Qualifier IpProtocolCommon (for
 * bcm_field_qualify_IpProtocolCommon).
 */
typedef enum bcm_field_IpProtocolCommon_e {
    bcmFieldIpProtocolCommonTcp, 
    bcmFieldIpProtocolCommonUdp, 
    bcmFieldIpProtocolCommonIgmp, 
    bcmFieldIpProtocolCommonIcmp, 
    bcmFieldIpProtocolCommonIp6Icmp, 
    bcmFieldIpProtocolCommonIp6HopByHop, 
    bcmFieldIpProtocolCommonIpInIp, 
    bcmFieldIpProtocolCommonTcpUdp, 
    bcmFieldIpProtocolCommonCount       /* Always Last. Not a usable value. */
} bcm_field_IpProtocolCommon_t;

#define BCM_FIELD_IPPROTOCOLCOMMON_STRINGS \
{ \
    "TCP", \
    "UDP", \
    "IGMP", \
    "ICMP", \
    "IPv6 ICMP", \
    "IPv6 Hop-by-Hop", \
    "IPv4 Payload", \
    "TCP and UDP"  \
}

/* Field Qualifier IpFrag (for bcm_field_qualify_IpFrag). */
typedef enum bcm_field_IpFrag_e {
    bcmFieldIpFragNon,          /* Non-fragmented packet. */
    bcmFieldIpFragFirst,        /* First fragment of fragmented packet. */
    bcmFieldIpFragNonOrFirst,   /* Non-fragmented or first fragment. */
    bcmFieldIpFragNotFirst,     /* Not the first fragment. */
    bcmFieldIpFragCount         /* Always last. Not a usable value. */
} bcm_field_IpFrag_t;

/* 
 * Field Qualifier L2Format (for bcm_field_qualify_L2Format).
 * Used to qualify packets based on L2 header format.
 */
typedef enum bcm_field_L2Format_e {
    bcmFieldL2FormatAny,        /* Do not qualify on L2 format. */
    bcmFieldL2FormatEthII,      /* Ethernet 2 (802.2). */
    bcmFieldL2FormatSnap,       /* Sub-Network Access Protocol (SNAP). */
    bcmFieldL2FormatLlc,        /* Logical Link Control. */
    bcmFieldL2Format802dot3,    /* 802.3 frame format. */
    bcmFieldL2FormatCount       /* Always Last. Not a usable value. */
} bcm_field_L2Format_t;

#define BCM_FIELD_L2FORMAT_STRINGS \
{ \
    "Any", \
    "EthII", \
    "Snap", \
    "Llc", \
    "802dot3"  \
}

/* LLC Header Format. */
typedef struct bcm_field_llc_header_s {
    uint8 dsap; 
    uint8 ssap; 
    uint8 control; 
} bcm_field_llc_header_t;

/* SNAP Header Format. */
typedef struct bcm_field_snap_header_s {
    uint32 org_code; 
    uint16 type; 
} bcm_field_snap_header_t;

/* 
 * Range Check.
 * 
 * bcm_field_range_create requires exactly one of SRCPORT or DSTPORT or
 * FIELD_RANGE_OUTER_VLAN or FIELD_RANGE_PACKET_LENGTH.
 */
#define BCM_FIELD_RANGE_SRCPORT         0x00000001 
#define BCM_FIELD_RANGE_DSTPORT         0x00000002 
#define BCM_FIELD_RANGE_TCP             0x00000004 
#define BCM_FIELD_RANGE_UDP             0x00000008 
#define BCM_FIELD_RANGE_INVERT          0x00000010 
#define BCM_FIELD_RANGE_EXTERNAL        0x00000020 
#define BCM_FIELD_RANGE_OUTER_VLAN      0x00000040 
#define BCM_FIELD_RANGE_PACKET_LENGTH   0x00000080 

/* Opaque handle to a field range. */
typedef uint32 bcm_field_range_t;

/* 
 * Opaque handle to a User Defined Field (UDF).
 * Note: bcm_field_range_create requires exactly one of SRCPORT or
 * DSTPORT.
 */
typedef uint32 bcm_field_udf_t;

/* Field udf_spec defines the locations of user-defined byte fields. */
typedef struct bcm_field_udf_spec_s {
    uint32 offset[384]; 
} bcm_field_udf_spec_t;

/* Field qset defines the set of fields used for lookup. */
typedef struct bcm_field_qset_s {
    SHR_BITDCL w[_SHR_BITDCLSIZE(BCM_FIELD_QUALIFY_MAX)]; 
    SHR_BITDCL udf_map[_SHR_BITDCLSIZE(BCM_FIELD_USER_NUM_UDFS)]; 
} bcm_field_qset_t;

#define BCM_FIELD_QSET_INIT(qset)  \
    sal_memset(&(qset), 0, sizeof(bcm_field_qset_t)) 

#define BCM_FIELD_QSET_ADD(qset, q)  SHR_BITSET(((qset).w), (q)) 

#define BCM_FIELD_QSET_REMOVE(qset, q)  SHR_BITCLR(((qset).w), (q)) 

#define BCM_FIELD_QSET_TEST(qset, q)  SHR_BITGET(((qset).w), (q)) 
#if 1/*anzhen.zheng, 5/26/2008*/
#define BCM_FIELD_SSET_TEST(sset,q)   \
	    ((sset)& (q))
#endif

/* 
 * Group Priority.
 * 
 * Numerically higher values are higher priority. Each priority value may
 * be used only once. BCM_FIELD_GROUP_PRIO_ANY can be used to have a
 * priority assigned automatically.
 */
#define BCM_FIELD_GROUP_PRIO_ANY    -0x7fffffff 
#define BCM_FIELD_GROUP_PRIO_EXT  -2    /* Use the external TCAM. */ /*anzhen.zheng, 6/4/2008*/

/* bcm_field_action_e */
typedef enum bcm_field_action_e {
    bcmFieldActionCosQNew,              /* Change CoS Queue; param0: New CoS
                                           Queue. */
    bcmFieldActionCosQCpuNew,           /* Change CoS Queue when CopyToCpu;
                                           param0: New CoS Queue. */
    bcmFieldActionVlanCosQNew,          /* Change VLAN CoS Queue; param0: New
                                           CoS Queue. */
    bcmFieldActionPrioPktAndIntCopy,    /* Pkt & internal priority from inner
                                           tag. */
    bcmFieldActionPrioPktAndIntNew,     /* Pkt & internal priority from arg;
                                           param0: New priority. */
    bcmFieldActionPrioPktAndIntTos,     /* Pkt & internal priority from TOS
                                           field. */
    bcmFieldActionPrioPktAndIntCancel,  /* Override another rule. */
    bcmFieldActionPrioPktCopy,          /* Pkt priority from inner tag. */
    bcmFieldActionPrioPktNew,           /* Pkt priority from arg; param0: New
                                           priority. */
    bcmFieldActionPrioPktTos,           /* Pkt priority from TOS field. */
    bcmFieldActionPrioPktCancel,        /* Override another rule. */
    bcmFieldActionPrioIntCopy,          /* Internal priority from inner tag. */
    bcmFieldActionPrioIntNew,           /* Internal priority from arg; param0:
                                           New priority. */
    bcmFieldActionPrioIntTos,           /* Internal priority from TOS field. */
    bcmFieldActionPrioIntCancel,        /* Override another rule. */
    bcmFieldActionTosNew,               /* Change TOS value in IP header;
                                           param0: New TOS value. */
    bcmFieldActionTosCopy,              /* Copy priority from outer tag to IP
                                           hdr. */
    bcmFieldActionTosCancel,            /* Override another rule. */
    bcmFieldActionDscpNew,              /* Change DSCP value; param0: New DSCP
                                           value. */
    bcmFieldActionDscpCancel,           /* Override another rule. */
    bcmFieldActionEcnNew,               /* Change ECN value in IP header TOS;
                                           param0: New ECN value. */
    bcmFieldActionCopyToCpu,            /* Copy to CPU. */
    bcmFieldActionCopyToCpuCancel,      /* Override another rule. */
    bcmFieldActionSwitchToCpuCancel,    /* Override switch logic copy-to-CPU. */
    bcmFieldActionSwitchToCpuReinstate, /* Reinstate copy-to-CPU switch logic. */
    bcmFieldActionRedirectPort,         /* Redirect Packet to single port;
                                           param0: Destination modid; param1:
                                           Destination port. */
    bcmFieldActionRedirect = bcmFieldActionRedirectPort, /* Same as bcmFieldActionRedirectPort. */
    bcmFieldActionRedirectTrunk,        /* Redirect Packet to a trunk; param0:
                                           Destination trunk ID. */
    bcmFieldActionRedirectCancel,       /* Override another rule. */
    bcmFieldActionRedirectPbmp,         /* Replace port bitmap; param0:
                                           Destination port bitmap. */
    bcmFieldActionRedirectIpmc,         /* Replace L3 multicast L3 & L2 bitmap;
                                           param0: IP Multicast Index. */
    bcmFieldActionRedirectMcast,        /* Replace L2 multicast dest bitmap;
                                           param0: L2 Multicast Index. */
    bcmFieldActionEgressMask,           /* Apply egress mask; param0:
                                           Destination port bitmap. */
    bcmFieldActionEgressPortsAdd,
    bcmFieldActionRedirectBcastPbmp,
    bcmFieldActionChain,                /* Chain; param0: chain index ID
                                           (0-127); param1:
                                           BCM_FIELD_CHAINTYPE_xxx. */
    bcmFieldActionDrop,                 /* Drop. */
    bcmFieldActionDropCancel,           /* Override another rule. */
    bcmFieldActionMirrorOverride,       /* Override any mirroring for packet. */
    bcmFieldActionMirrorIngress,        /* Ingress mirror; param0: Dest modid;
                                           param1: Dest port/tgid. */
    bcmFieldActionMirrorEgress,         /* Egress mirror; param0: Dest modid;
                                           param1: Dest port/tgid. */
    bcmFieldActionL3ChangeVlan,         /* Change VLAN on L3-switched packets;
                                           param0: ECMP or next hop info. */
    bcmFieldActionL3ChangeVlanCancel,   /* Override another rule. */
    bcmFieldActionL3ChangeMacDa,        /* Change MAC DA on L3-switched packets;
                                           param0: ECMP or next hop info. */
    bcmFieldActionL3ChangeMacDaCancel,  /* Override another rule; param0: Next
                                           hop table index. */
    bcmFieldActionL3Switch,             /* L3-switch packet; param0: ECMP or
                                           next hop info. */
    bcmFieldActionL3SwitchCancel,       /* Override another rule. */
    bcmFieldActionAddClassTag,          /* Add Classification Tag. */
    bcmFieldActionDropPrecedence,       /* Set Drop Precedence; param0:
                                           BCM_FIELD_COLOR_xxx. */
    bcmFieldActionRpDrop,               /* Red Priority Drop. */
    bcmFieldActionRpDropCancel,         /* Override another rule. */
    bcmFieldActionRpDropPrecedence,     /* Set Red Priority Drop Precedence;
                                           param0: BCM_FIELD_COLOR_xxx. */
    bcmFieldActionRpCopyToCpu,          /* Red Priority Copy to CPU. */
    bcmFieldActionRpCopyToCpuCancel,    /* Override another rule. */
    bcmFieldActionRpSwitchToCpuCancel,  /* Override switch logic copy-to-CPU. */
    bcmFieldActionRpSwitchToCpuReinstate, /* Reinstate copy-to-CPU switch logic. */
    bcmFieldActionRpDscpNew,            /* Red packet change DSCP value; param0:
                                           New DSCP value. */
    bcmFieldActionRpDscpCancel,         /* Override any changes to DSCP field. */
    bcmFieldActionRpEcnNew,             /* Red packet change ECN value; param0:
                                           New ECN value. */
    bcmFieldActionRpOuterVlanPrioNew,   /* Red packet 802.1p priority from arg;
                                           param0: New priority. */
    bcmFieldActionRpInnerVlanPrioNew,   /* Red packet 802.1p priority from arg;
                                           param0: New priority. */
    bcmFieldActionRpOuterVlanCfiNew,    /* Red packet 802.1p CFI from arg;
                                           param0: New CFI bit value. */
    bcmFieldActionRpInnerVlanCfiNew,    /* Red packet 802.1p CFI from arg;
                                           param0: New CFI bit value. */
    bcmFieldActionRpPrioPktCopy,        /* Red packet priority from inner tag. */
    bcmFieldActionRpPrioPktNew,         /* Red packet priority from argument0;
                                           param0: New priority. */
    bcmFieldActionRpPrioPktTos,         /* Red Packet priority from TOS field in
                                           IP header. */
    bcmFieldActionRpPrioPktCancel,      /* Override another rule. */
    bcmFieldActionRpCosQNew,            /* Red packet change CoS Queue; param0:
                                           New CoS Queue. */
    bcmFieldActionRpVlanCosQNew,        /* Red packet change VLAN CoSQ; param0:
                                           New CoS Queue. */
    bcmFieldActionRpPrioPktAndIntCopy,  /* Red packet Packet & Internal priority
                                           from inner tag. */
    bcmFieldActionRpPrioPktAndIntNew,   /* Red packet Packet & Internal priority
                                           from param0; param0: New priority. */
    bcmFieldActionRpPrioPktAndIntTos,   /* Red packet Packet & Internal priority
                                           from TOS field. */
    bcmFieldActionRpPrioPktAndIntCancel, /* Override any internal priority
                                           changes. */
    bcmFieldActionRpPrioIntCopy,        /* Red packet internal priority from
                                           inner VLAN tag. */
    bcmFieldActionRpPrioIntNew,         /* Red packet internal priority from an
                                           argument; param0: New priority. */
    bcmFieldActionRpPrioIntTos,         /* Red packet internal priority from IP
                                           header  TOS field. */
    bcmFieldActionRpPrioIntCancel,      /* Red packet override any internal
                                           priority changes. */
    bcmFieldActionYpDrop,               /* Yellow Priority Drop. */
    bcmFieldActionYpDropCancel,         /* Override another rule. */
    bcmFieldActionYpDropPrecedence,     /* Set Yellow Priority Drop Precision;
                                           param0: BCM_FIELD_COLOR_xxx. */
    bcmFieldActionYpCopyToCpu,          /* Yellow Priority Copy to CPU. */
    bcmFieldActionYpCopyToCpuCancel,    /* Override another rule. */
    bcmFieldActionYpSwitchToCpuCancel,  /* Override switch logic copy-to-CPU. */
    bcmFieldActionYpSwitchToCpuReinstate, /* Reinstate copy-to-CPU switch logic. */
    bcmFieldActionYpDscpNew,            /* Yellow packet change DSCP value;
                                           param0: New DSCP value. */
    bcmFieldActionYpDscpCancel,         /* Override any changes to DSCP field. */
    bcmFieldActionYpEcnNew,             /* Yellow packet change ECN value;
                                           param0: New ECN value. */
    bcmFieldActionYpOuterVlanPrioNew,   /* Yellow packet 802.1p priority from
                                           arg. */
    bcmFieldActionYpInnerVlanPrioNew,   /* Yellow packet 802.1p priority from
                                           arg; param0: New priority. */
    bcmFieldActionYpOuterVlanCfiNew,    /* Yellow packet 802.1p CFI from arg;
                                           param0: New CFI bit value. */
    bcmFieldActionYpInnerVlanCfiNew,    /* Yellow packet 802.1p CFI from arg;
                                           param0: New CFI bit value. */
    bcmFieldActionYpPrioPktCopy,        /* Yellow packet priority from inner
                                           tag. */
    bcmFieldActionYpPrioPktNew,         /* Yellow packet priority from param0;
                                           param0: New priority. */
    bcmFieldActionYpPrioPktTos,         /* Yellow packet priority from TOS field
                                           in IP header. */
    bcmFieldActionYpPrioPktCancel,      /* Override another rule. */
    bcmFieldActionYpCosQNew,            /* Yellow packet change CoS Queue;
                                           param0: New CoS Queue. */
    bcmFieldActionYpVlanCosQNew,        /* Yellow packet change VLAN CoSQ;
                                           param0: New CoS Queue. */
    bcmFieldActionYpPrioPktAndIntCopy,  /* Yellow packet Packet & Internal
                                           priority from inner tag. */
    bcmFieldActionYpPrioPktAndIntNew,   /* Yellow packet Packet & Internal
                                           priority from param0; param0: New
                                           priority. */
    bcmFieldActionYpPrioPktAndIntTos,   /* Yellow packet Packet & Internal
                                           priority from TOS field. */
    bcmFieldActionYpPrioPktAndIntCancel, /* Override any int priority changes. */
    bcmFieldActionYpPrioIntCopy,        /* Yellow packet internal priority from
                                           inner VLAN tag. */
    bcmFieldActionYpPrioIntNew,         /* Yellow packet internal priority from
                                           an argument; param0: New priority. */
    bcmFieldActionYpPrioIntTos,         /* Yellow packet internal priority from
                                           IP header TOS field. */
    bcmFieldActionYpPrioIntCancel,      /* Yellow packet override any internal
                                           priority changes. */
    bcmFieldActionUpdateCounter,        /* Update Counter; param0:
                                           BCM_FIELD_COUNTER_MODE_xxx. */
    bcmFieldActionMeterConfig,          /* Meter configuration; param0:
                                           BCM_FIELD_METER_MODE_xxx; param1: if
                                           param0 == BCM_FIELD_METER_MODE_FLOW,
                                           this denotes BCM_FIELD_METER_PEAK(1)
                                           or BCM_FIELD_METER_COMMITTED(2). */
    bcmFieldActionColorIndependent,     /* Make L3SW_CHANGE_MACDA_OR_VLAN
                                           actions color independent. */
    bcmFieldActionClassDestSet,         /* Set destination address lookup class
                                           ID. */
    bcmFieldActionClassSet = bcmFieldActionClassDestSet, /* Same as bcmFieldActionClassDestSet. */
    bcmFieldActionClassSourceSet,       /* Set source address lookup class ID. */
    bcmFieldActionVrfSet,               /* Set VRF ID. */
    bcmFieldActionInnerVlanNew,         /* Replace inner VLAN ID; param0: New
                                           inner VLAN ID. */
    bcmFieldActionInnerVlanPrioNew,     /* Replace inner VLAN tag priority;
                                           param0: New inner VLAN tag priority. */
    bcmFieldActionInnerVlanLookup,      /* Lookup inner VLAN tag. */
    bcmFieldActionInnerVlanAdd,         /* Add a new Inner VLAN tag. */
    bcmFieldActionInnerVlanCfiNew,      /* Replace packet 802.1p CFI from arg. */
    bcmFieldActionOuterVlanNew,         /* Replace outer VLAN ID; param0: New
                                           outer VLAN ID. */
    bcmFieldActionVlanNew = bcmFieldActionOuterVlanNew, /* Same as bcmFieldActionOuterVlanNew. */
    bcmFieldActionOuterVlanAdd,         /* Add a new Outer VLAN tag. */
    bcmFieldActionVlanAdd = bcmFieldActionOuterVlanAdd, /* Same as bcmFieldActionOuterVlanAdd. */
    bcmFieldActionOuterVlanLookup,      /* Lookup outer VLAN tag. */
    bcmFieldActionVlanLookup = bcmFieldActionOuterVlanLookup, /* Same as
                                           bcmFieldActionOuterVlanLookup. */
    bcmFieldActionOuterVlanPrioNew,     /* Replace outer VLAN tag priority;
                                           param0: New outer VLAN tag priority. */
    bcmFieldActionOuterVlanCfiNew,      /* Replace packet 802.1p CFI from arg;
                                           param0: New CFI bit value; param0:
                                           New CFI bit value. */
    bcmFieldActionOuterTpidNew,         /* Replace TPID in outer VLAN tag;
                                           param0: New tpid. */
    bcmFieldActionGpDrop,               /* Green Priority Drop. */
    bcmFieldActionGpDropCancel,         /* Override another rule. */
    bcmFieldActionGpDropPrecedence,     /* Set Green Priority Drop Precision;
                                           param0: BCM_FIELD_COLOR_xxx. */
    bcmFieldActionGpCopyToCpu,          /* Green Priority Copy to CPU. */
    bcmFieldActionGpCopyToCpuCancel,    /* Override another rule. */
    bcmFieldActionGpSwitchToCpuCancel,  /* Override switch logic copy-to-CPU. */
    bcmFieldActionGpSwitchToCpuReinstate, /* Reinstate copy-to-CPU switch logic. */
    bcmFieldActionGpDscpNew,            /* Green packet change DSCP value;
                                           param0: New DSCP value. */
    bcmFieldActionGpDscpCancel,         /* Override any changes to DSCP field. */
    bcmFieldActionGpEcnNew,             /* Green packet change ECN value;
                                           param0: New ECN value. */
    bcmFieldActionGpDscpPrecedenceNew,  /* Green packet change DSCP precedence
                                           value; param0: New Dscp precedence
                                           value. */
    bcmFieldActionGpOuterVlanPrioNew,   /* Green packet 802.1p priority from
                                           arg. */
    bcmFieldActionGpInnerVlanPrioNew,   /* Green packet 802.1p priority from
                                           arg; param0: New priority. */
    bcmFieldActionGpOuterVlanCfiNew,    /* Green packet 802.1p CFI from arg;
                                           param0: New CFI bit value. */
    bcmFieldActionGpInnerVlanCfiNew,    /* Green packet 802.1p CFI from arg;
                                           param0: New CFI bit value. */
    bcmFieldActionGpPrioPktCopy,        /* Green packet priority from inner tag. */
    bcmFieldActionGpPrioPktNew,         /* Green packet priority from param0;
                                           param0: New priority. */
    bcmFieldActionGpPrioPktTos,         /* Green packet priority from TOS field
                                           in IP header. */
    bcmFieldActionGpPrioPktCancel,      /* Override another rule. */
    bcmFieldActionGpCosQNew,            /* Green packet change CoS Queue;
                                           param0: New CoS Queue. */
    bcmFieldActionGpVlanCosQNew,        /* Green packet change VLAN CoSQ;
                                           param0: New CoS Queue. */
    bcmFieldActionGpPrioPktAndIntCopy,  /* Green packet Packet & Internal
                                           priority from inner tag. */
    bcmFieldActionGpPrioPktAndIntNew,   /* Green packet Packet & Internal
                                           priority from param0; param0: New
                                           priority. */
    bcmFieldActionGpPrioPktAndIntTos,   /* Green packet Packet & Internal
                                           priority from TOS field. */
    bcmFieldActionGpPrioPktAndIntCancel, /* Override any int priority changes. */
    bcmFieldActionGpPrioIntCopy,        /* Green packet internal priority from
                                           inner VLAN tag. */
    bcmFieldActionGpPrioIntNew,         /* Green packet internal priority from
                                           an argument; param0: New priority. */
    bcmFieldActionGpPrioIntTos,         /* Green packet internal priority from
                                           IP header TOS field. */
    bcmFieldActionGpPrioIntCancel,      /* Green packet override any internal
                                           priority changes. */
    bcmFieldActionDoNotChangeTtl,       /* Do not decrement TTL. */
    bcmFieldActionDoNotCheckUrpf,       /* Do not check reverse path for unicast
                                           traffic. */
    bcmFieldActionDoNotCheckVlan,       /* Do not check VLAN membership and STG
                                           STP state. */
    bcmFieldActionDoNotLearn,           /* Disable L2 learning. */
    bcmFieldActionIpFix,                /* Record the packet regardless of port
                                           ipfix enable. */
    bcmFieldActionIpFixCancel,          /* Record the packet action override. */
    bcmFieldActionIncomingMplsPortSet,  /* Assign incoming MPLS port. */
    bcmFieldActionNewTc,                /* Assign new traffic class. */
    bcmFieldActionNewClassId,           /* Assign new classfication ID. */
    bcmFieldActionLoopback,             /* Forward the packet to the receiving
                                           port. */
    bcmFieldActionNewReasonCode,        /* Assign new reasons for packet
                                           forwarded to CPU. */
    bcmFieldActionBypassStp,            /* Bypass the STP port state filtering. */
    bcmFieldActionBypassEap,            /* Bypass the 802.1x EAP port state
                                           filtering. */
    bcmFieldActionBypassVlan,           /* Bypass VLAN checking. */
    bcmFieldActionRpRedirectPort,       /* Redirect red packet to single port;
                                           param0: Destination modid; param1:
                                           Destination port. */
    bcmFieldActionRpMirrorIngress,      /* Red packet ingress mirror; param0:
                                           Dest modid; param1: Dest port/tgid. */
    bcmFieldActionCount                 /* Always Last. Not a usable value. */
} bcm_field_action_t;

#define BCM_FIELD_ACTION_STRINGS \
{ \
    "CosQNew", \
    "CosQCpuNew", \
    "VlanCosQNew", \
    "PrioPktAndIntCopy", \
    "PrioPktAndIntNew", \
    "PrioPktAndIntTos", \
    "PrioPktAndIntCancel", \
    "PrioPktCopy", \
    "PrioPktNew", \
    "PrioPktTos", \
    "PrioPktCancel", \
    "PrioIntCopy", \
    "PrioIntNew", \
    "PrioIntTos", \
    "PrioIntCancel", \
    "TosNew", \
    "TosCopy", \
    "TosCancel", \
    "DscpNew", \
    "DscpCancel", \
    "EcnNew", \
    "CopyToCpu", \
    "CopyToCpuCancel", \
    "SwitchToCpuCancel", \
    "SwitchToCpuReinstate", \
    "RedirectPort", \
    "RedirectTrunk", \
    "RedirectCancel", \
    "RedirectPbmp", \
    "RedirectIpmc", \
    "RedirectMcast", \
    "EgressMask", \
    "Chain", \
    "Drop", \
    "DropCancel", \
    "MirrorOverride", \
    "MirrorIngress", \
    "MirrorEgress", \
    "L3ChangeVlan", \
    "L3ChangeVlanCancel", \
    "L3ChangeMacDa", \
    "L3ChangeMacDaCancel", \
    "L3Switch", \
    "L3SwitchCancel", \
    "AddClassTag", \
    "DropPrecedence", \
    "RpDrop", \
    "RpDropCancel", \
    "RpDropPrecedence", \
    "RpCopyToCpu", \
    "RpCopyToCpuCancel", \
    "RpSwitchToCpuCancel", \
    "RpSwitchToCpuReinstate", \
    "RpDscpNew", \
    "RpDscpCancel", \
    "RpEcnNew", \
    "RpOuterVlanPrioNew", \
    "RpInnerVlanPrioNew", \
    "RpOuterVlanCfiNew", \
    "RpInnerVlanCfiNew", \
    "RpPrioPktCopy", \
    "RpPrioPktNew", \
    "RpPrioPktTos", \
    "RpPrioPktCancel", \
    "RpCosQNew", \
    "RpVlanCosQNew", \
    "RpPrioPktAndIntCopy", \
    "RpPrioPktAndIntNew", \
    "RpPrioPktAndIntTos", \
    "RpPrioPktAndIntCancel", \
    "RpPrioIntCopy", \
    "RpPrioIntNew", \
    "RpPrioIntTos", \
    "RpPrioIntCancel", \
    "YpDrop", \
    "YpDropCancel", \
    "YpDropPrecedence", \
    "YpCopyToCpu", \
    "YpCopyToCpuCancel", \
    "YpSwitchToCpuCancel", \
    "YpSwitchToCpuReinstate", \
    "YpDscpNew", \
    "YpDscpCancel", \
    "YpEcnNew", \
    "YpOuterVlanPrioNew", \
    "YpInnerVlanPrioNew", \
    "YpOuterVlanCfiNew", \
    "YpInnerVlanCfiNew", \
    "YpPrioPktCopy", \
    "YpPrioPktNew", \
    "YpPrioPktTos", \
    "YpPrioPktCancel", \
    "YpCosQNew", \
    "YpVlanCosQNew", \
    "YpPrioPktAndIntCopy", \
    "YpPrioPktAndIntNew", \
    "YpPrioPktAndIntTos", \
    "YpPrioPktAndIntCancel", \
    "YpPrioIntCopy", \
    "YpPrioIntNew", \
    "YpPrioIntTos", \
    "YpPrioIntCancel", \
    "UpdateCounter", \
    "MeterConfig", \
    "ColorIndependent", \
    "ClassDestSet", \
    "ClassSourceSet", \
    "VrfSet", \
    "InnerVlanNew", \
    "InnerVlanPrioNew", \
    "InnerVlanLookup", \
    "InnerVlanAdd", \
    "InnerVlanCfiNew", \
    "OuterVlanNew", \
    "OuterVlanAdd", \
    "OuterVlanLookup", \
    "OuterVlanPrioNew", \
    "OuterVlanCfiNew", \
    "OuterTpidNew", \
    "GpDrop", \
    "GpDropCancel", \
    "GpDropPrecedence", \
    "GpCopyToCpu", \
    "GpCopyToCpuCancel", \
    "GpSwitchToCpuCancel", \
    "GpSwitchToCpuReinstate", \
    "GpDscpNew", \
    "GpDscpCancel", \
    "GpEcnNew", \
    "GpDscpPrecedenceNew", \
    "GpOuterVlanPrioNew", \
    "GpInnerVlanPrioNew", \
    "GpOuterVlanCfiNew", \
    "GpInnerVlanCfiNew", \
    "GpPrioPktCopy", \
    "GpPrioPktNew", \
    "GpPrioPktTos", \
    "GpPrioPktCancel", \
    "GpCosQNew", \
    "GpVlanCosQNew", \
    "GpPrioPktAndIntCopy", \
    "GpPrioPktAndIntNew", \
    "GpPrioPktAndIntTos", \
    "GpPrioPktAndIntCancel", \
    "GpPrioIntCopy", \
    "GpPrioIntNew", \
    "GpPrioIntTos", \
    "GpPrioIntCancel", \
    "DoNotChangeTtl", \
    "DoNotCheckUrpf", \
    "DoNotCheckVlan", \
    "DoNotLearn", \
    "IpFix", \
    "IpFixCancel", \
    "IncomingMplsPortSet", \
    "NewTc", \
    "NewClassId", \
    "Loopback", \
    "NewReasonCode", \
    "BypassStp", \
    "BypassEap", \
    "BypassVlan", \
    "RpRedirectPort", \
    "RpMirrorIngress"  \
}

#define BCM_FIELD_ACTION_WIDTH_MAX  48         

/* Unit capabilities flags. */
#define BCM_FIELD_STAT_WIDE_MODE    (1 << 0)   /* Unit has wide-mode slices. */
#define BCM_FIELD_STAT_SLICE_EN     (1 << 1)   /* Enable/disable slice lookup. */
#define BCM_FIELD_STAT_COS_QUEUE    (1 << 2)   /* Unit has CoS Queue change
                                                  actions. */

/* This API is deprecated and no longer supported. */
typedef struct bcm_field_status_s {
    int group_total;    /* Total possible number of groups in unit. */
    int group_free;     /* Unused groups in unit. */
    uint32 flags;       /* Unit capabilities flags. */
} bcm_field_status_t;

/* 
 * Value for bcmFieldControlSharedVlanFieldSet.
 * 
 * When using shared VLAN feature, the shared VLAN ID can be used in
 * place of the packet's inner or outer vlan ID during packet
 * classification.
 */
#define BCM_FIELD_SHARED_VLAN_NONE  0          /* Do not use shared VLAN ID. */
#define BCM_FIELD_SHARED_VLAN_INNER 1          /* Use shared VLAN ID as inner
                                                  VLAN ID. */
#define BCM_FIELD_SHARED_VLAN_OUTER 2          /* Use shared VLAN ID as outer
                                                  VLAN ID. */

/* Field control elements. */
typedef enum bcm_field_control_e {
    bcmFieldControlStage,               /* Select default Field Processor stage. */
    bcmFieldControlColorIndependent,    /* Default for color in/dependent. */
    bcmFieldControlUdfHigig0,           /* UDF_ID=7, has 1st word of Higig
                                           Packet. */
    bcmFieldControlUdfHigig1,           /* UDF_ID=6, has 2nd word of Higig
                                           Packet. */
    bcmFieldControlUdfHigig2,           /* UDF_ID=5, has 3rd word of Higig
                                           Packet. */
    bcmFieldControlSharedVlanFieldSet,  /* Shared VLAN ID as inner/outer VLAN.
                                           See BCM_FIELD_SHARED_VLAN_xxx. */
    bcmFieldControlRedirectIngressVlanCheck, /* Enable ingress vlan membership check
                                           for FP redirected traffic. */
    bcmFieldControlRedirectNonUcastTrunkResolve, /* Enable uniform distribution of
                                           non-unicast FP redirected traffic. */
    bcmFieldControlRedirectExcludeSrcPort, /* Exclude source port/trunk from FP
                                           redirection  destination. */
    bcmFieldControlRedirectPortFloodBlock, /* Enable port flood blocking policy for
                                           FP redirected traffic. */
    bcmFieldControlRedirectVlanFloodBlock, /* Enable vlan flood blocking policy for
                                           FP redirected traffic. */
    bcmFieldControlArpAsIp,             /* Treat ARP packets as Ip. */
    bcmFieldControlRarpAsIp,            /* Treat RARP packets as Ip. */
    bcmFieldControlIntraDoubleEnable,   /* Enable/Disable INTRA slice groups. */
    bcmFieldControlCount                /* Always last. Not a usable value. */
} bcm_field_control_t;

#define BCM_FIELD_CONTROL_STRINGS \
{ \
    "Stage", \
    "ColorIndependent", \
    "UdfHigig0", \
    "UdfHigig1", \
    "UdfHigig2", \
    "SharedVlanFieldSet", \
    "RedirectIngressVlanCheck", \
    "RedirectNonUcastTrunkResolve", \
    "RedirectExcludeSrcPort", \
    "RedirectPortFloodBlock", \
    "RedirectVlanFloodBlock", \
    "ArpAsIp", \
    "RarpAsIp", \
    "IntraDoubleEnable"  \
}

/* Field Group Status structure. */
typedef struct bcm_field_group_status_s {
    int prio_min;       /* Minimum priority within group. */
    int prio_max;       /* Maximum priority within group. */
    int entries_total;  /* Total possible entries in group. */
    int entries_free;   /* Unused entries in slice. */
    int counters_total; /* Total possible counters in slice. */
    int counters_free;  /* Unused counters in slice. */
    int meters_total;   /* Total meters in slice. */
    int meters_free;    /* Unused meters in slice. */
    int entry_count;    /* Number of entries in the group. */
    int counter_count;  /* Number of counters attached to group entries. */
    int meter_count;    /* Number of meters attached to group entries. */
} bcm_field_group_status_t;

/* Group Modes (single, double or triple wide). */
typedef enum bcm_field_group_mode_e {
    bcmFieldGroupModeSingle,    /* Single-wide group. */
    bcmFieldGroupModeDouble,    /* Double-wide group. */
    bcmFieldGroupModeTriple,    /* Triple-wide group. */
    bcmFieldGroupModeAuto,      /* Auto-expand group based on Qset (default). */
    bcmFieldGroupModeCount      /* Always last. Not a usable value. */
} bcm_field_group_mode_t;

#define BCM_FIELD_GROUP_MODE_STRINGS \
{ \
    "Single", \
    "Double", \
    "Triple", \
    "Auto"  \
}

#define bcmFieldGroupModeDefault    bcmFieldGroupModeAuto 

#define BCM_FIELD_GROUP_MODE_WIDTH_MAX  24         

/* Initialize field software subsystem. */
extern int bcm_field_init(
    int unit);

/* De-initialize field software subsystem. */
extern int bcm_field_detach(
    int unit);

/* This API was deprecated and no longer supported. */
extern int bcm_field_status_get(
    int unit, 
    bcm_field_status_t *status);

/* Get a field control value. */
extern int bcm_field_control_get(
    int unit, 
    bcm_field_control_t control, 
    uint32 *state);

/* Set a field control value. */
extern int bcm_field_control_set(
    int unit, 
    bcm_field_control_t control, 
    uint32 state);

/* Initiaize UDF specification structure. */
extern void bcm_field_udf_spec_t_init(
    bcm_field_udf_spec_t *udf_spec);

/* Create a field group. */
extern int bcm_field_group_create(
    int unit, 
    bcm_field_qset_t qset, 
    int pri, 
    bcm_field_group_t *group);

/* Create a field group. */
extern int bcm_field_group_create_id(
    int unit, 
    bcm_field_qset_t qset, 
    int pri, 
    bcm_field_group_t group);

/* Create a field group. */
extern int bcm_field_group_create_mode(
    int unit, 
    bcm_field_qset_t qset, 
    int pri, 
    bcm_field_group_mode_t mode, 
    bcm_field_group_t *group);

/* Create a field group. */
extern int bcm_field_group_create_mode_id(
    int unit, 
    bcm_field_qset_t qset, 
    int pri, 
    bcm_field_group_mode_t mode, 
    bcm_field_group_t group);

/* Create a field group. */
extern int bcm_field_group_port_create_mode(
    int unit, 
    bcm_port_t port, 
    bcm_field_qset_t qset, 
    int pri, 
    bcm_field_group_mode_t mode, 
    bcm_field_group_t *group);

#if 1/* anzhen.zheng, 5/26/2008 */
extern int bcm_field_group_create_mode_slice_id(int unit,
                                          bcm_field_qset_t qset,
                                          int pri,
                                          bcm_field_group_mode_t mode,
                                          bcm_field_group_t group,
                                          bcm_field_group_sbmp_t sset);
#endif

/* Create a field group. */
extern int bcm_field_group_port_create_mode_id(
    int unit, 
    bcm_port_t port, 
    bcm_field_qset_t qset, 
    int pri, 
    bcm_field_group_mode_t mode, 
    bcm_field_group_t group);

/* Create a field group. */
extern int bcm_field_group_ports_create_mode(
    int unit, 
    bcm_pbmp_t pbmp, 
    bcm_field_qset_t qset, 
    int pri, 
    bcm_field_group_mode_t mode, 
    bcm_field_group_t *group);

/* Create a field group. */
extern int bcm_field_group_ports_create_mode_id(
    int unit, 
    bcm_pbmp_t pbmp, 
    bcm_field_qset_t qset, 
    int pri, 
    bcm_field_group_mode_t mode, 
    bcm_field_group_t group);

/* Get the mode of a group. */
extern int bcm_field_group_mode_get(
    int unit, 
    bcm_field_group_t group, 
    bcm_field_group_mode_t *mode);

/* 
 * Returns boolean TRUE if requested qualifier set is satisfied by the
 * given group's qualifier set (else returns FALSE).
 */
extern int bcm_field_group_satisfies_qset(
    int unit, 
    bcm_field_group_t group, 
    bcm_field_qset_t qset);

/* 
 * Destroys field entries in the given group (both software object and
 * the actual hardware entry) before destroying the field group. Field
 * group sw object is also destroyed as well.
 */
extern int bcm_field_group_flush(
    int unit, 
    bcm_field_group_t group);

/* Change or retrieve the qualifiers for a field group. */
extern int bcm_field_group_set(
    int unit, 
    bcm_field_group_t group, 
    bcm_field_qset_t qset);

/* Change or retrieve the qualifiers for a field group. */
extern int bcm_field_group_get(
    int unit, 
    bcm_field_group_t group, 
    bcm_field_qset_t *qset);

/* Deallocates a field group. */
extern int bcm_field_group_destroy(
    int unit, 
    bcm_field_group_t group);

/* Compress field group entries. */
extern int bcm_field_group_compress(
    int unit, 
    bcm_field_group_t group);

/* Set field group priority. */
extern int bcm_field_group_priority_set(
    int unit, 
    bcm_field_group_t group, 
    int priority);

/* Get field group priority. */
extern int bcm_field_group_priority_get(
    int unit, 
    bcm_field_group_t group, 
    int *priority);

/* Retrieve status of a specified field group. */
extern int bcm_field_group_status_get(
    int unit, 
    bcm_field_group_t group, 
    bcm_field_group_status_t *status);

/* Set the group enable state. */
extern int bcm_field_group_enable_set(
    int unit, 
    bcm_field_group_t group, 
    int enable);

/* Get the group enable state. */
extern int bcm_field_group_enable_get(
    int unit, 
    bcm_field_group_t group, 
    int *enable);

/* Allocate a range checker with specified configuration. */
extern int bcm_field_range_create(
    int unit, 
    bcm_field_range_t *range, 
    uint32 flags, 
    bcm_l4_port_t min, 
    bcm_l4_port_t max);

/* 
 * Install all entries of a field group into the hardware tables (will
 * silently reinstall entries already in the hardware tables)
 */
extern int bcm_field_group_install(
    int unit, 
    bcm_field_group_t group);

/* 
 * Remove all entries of a field group from the hardware tables (will
 * silently ignore entries not in the hardware tables)
 */
extern int bcm_field_group_remove(
    int unit, 
    bcm_field_group_t group);

/* Allocate a range checker with specified configuration. */
extern int bcm_field_range_create_id(
    int unit, 
    bcm_field_range_t range, 
    uint32 flags, 
    bcm_l4_port_t min, 
    bcm_l4_port_t max);

/* 
 * Allocate a range checker with specified configuration associated with
 * an interface group.
 */
extern int bcm_field_range_group_create(
    int unit, 
    bcm_field_range_t *range, 
    uint32 flags, 
    bcm_l4_port_t min, 
    bcm_l4_port_t max, 
    bcm_if_group_t group);

/* 
 * Allocate a range checker with specified configuration associated with
 * an interface group.
 */
extern int bcm_field_range_group_create_id(
    int unit, 
    bcm_field_range_t range, 
    uint32 flags, 
    bcm_l4_port_t min, 
    bcm_l4_port_t max, 
    bcm_if_group_t group);

/* Retrieve parameters associated with an existing range checker. */
extern int bcm_field_range_get(
    int unit, 
    bcm_field_range_t range, 
    uint32 *flags, 
    bcm_l4_port_t *min, 
    bcm_l4_port_t *max);

/* Destroy a virtual range checker. */
extern int bcm_field_range_destroy(
    int unit, 
    bcm_field_range_t range);

/* Initialize Field Data Qualifier structure. */
extern void bcm_field_data_qualifier_t_init(
    bcm_field_data_qualifier_t *data_qual);

/* Initialize ethertype based field data qualifier. */
extern void bcm_field_data_ethertype_t_init(
    bcm_field_data_ethertype_t *etype);

/* Initialize ip protocol based field data qualifier. */
extern void bcm_field_data_ip_protocol_t_init(
    bcm_field_data_ip_protocol_t *ip_protocol);

/* Initialize packet format based field data qualifier. */
extern void bcm_field_data_packet_format_t_init(
    bcm_field_data_packet_format_t *packet_format);

/* Create an data/offset based qualifier. */
extern int bcm_field_data_qualifier_create(
    int unit, 
    bcm_field_data_qualifier_t *data_qualifier);

/* Destroy an data/offset based qualifier. */
extern int bcm_field_data_qualifier_destroy(
    int unit, 
    int qual_id);

/* Delete all data/offset based qualifiers. */
extern int bcm_field_data_qualifier_destroy_all(
    int unit);

/* Add ethertype based offset to data qualifier object. */
extern int bcm_field_data_qualifier_ethertype_add(
    int unit, 
    int qual_id, 
    bcm_field_data_ethertype_t *etype);

/* Remove ethertype based offset from data qualifier object. */
extern int bcm_field_data_qualifier_ethertype_delete(
    int unit, 
    int qual_id, 
    bcm_field_data_ethertype_t *etype);

/* Add ip protocol based offset to data qualifier object. */
extern int bcm_field_data_qualifier_ip_protocol_add(
    int unit, 
    int qual_id, 
    bcm_field_data_ip_protocol_t *ip_protocol);

/* Remove ip protocol based offset from data qualifier object. */
extern int bcm_field_data_qualifier_ip_protocol_delete(
    int unit, 
    int qual_id, 
    bcm_field_data_ip_protocol_t *ip_protocol);

/* Add packet format based offset/s to data qualifier object. */
extern int bcm_field_data_qualifier_packet_format_add(
    int unit, 
    int qual_id, 
    bcm_field_data_packet_format_t *packet_format);

/* Remove packet format based offset/s from data qualifier object. */
extern int bcm_field_data_qualifier_packet_format_delete(
    int unit, 
    int qual_id, 
    bcm_field_data_packet_format_t *packet_format);

/* Add field data qualifier to group qset. */
extern int bcm_field_qset_data_qualifier_add(
    int unit, 
    bcm_field_qset_t *qset, 
    int qual_id);

/* 
 * Set user-defined field information (location within packet of
 * particular format).
 */
extern int bcm_field_udf_spec_set(
    int unit, 
    bcm_field_udf_spec_t *udf_spec, 
    uint32 flags, 
    uint32 offset);

/* 
 * Get user-defined field information (location within packet of
 * particular format).
 */
extern int bcm_field_udf_spec_get(
    int unit, 
    bcm_field_udf_spec_t *udf_spec, 
    uint32 *flags, 
    uint32 *offset);

/* Create (install) and query a virtual UDF resource. */
extern int bcm_field_udf_create(
    int unit, 
    bcm_field_udf_spec_t *udf_spec, 
    bcm_field_udf_t *udf_id);

/* Create (install) and query a virtual UDF resource. */
extern int bcm_field_udf_create_id(
    int unit, 
    bcm_field_udf_spec_t *udf_spec, 
    bcm_field_udf_t udf_id);

#define BCM_FIELD_USER_IP4      0x1        

#define BCM_FIELD_USER_IP6      0x2        

/* Set the UDF Ethertype match value. */
extern int bcm_field_udf_ethertype_set(
    int unit, 
    int index, 
    bcm_port_frametype_t frametype, 
    bcm_port_ethertype_t ethertype);

/* Get the UDF Ethertype match value. */
extern int bcm_field_udf_ethertype_get(
    int unit, 
    int index, 
    bcm_port_frametype_t *frametype, 
    bcm_port_ethertype_t *ethertype);

/* Set the UDF IP Protocol match values. */
extern int bcm_field_udf_ipprotocol_set(
    int unit, 
    int index, 
    uint32 flags, 
    uint8 proto);

/* Get the UDF IP Protocol match values. */
extern int bcm_field_udf_ipprotocol_get(
    int unit, 
    int index, 
    uint32 *flags, 
    uint8 *proto);

/* Create (install) and query a virtual UDF resource. */
extern int bcm_field_udf_get(
    int unit, 
    bcm_field_udf_spec_t *udf_spec, 
    bcm_field_udf_t udf_id);

/* Destroy a virtual UDF resource. */
extern int bcm_field_udf_destroy(
    int unit, 
    bcm_field_udf_t udf_id);

/* Add a virtual UDF resource to a qset (for subsequent group creation). */
extern int bcm_field_qset_add_udf(
    int unit, 
    bcm_field_qset_t *qset, 
    bcm_field_udf_t udf_id);

/* Create a blank field entry. */
extern int bcm_field_entry_create(
    int unit, 
    bcm_field_group_t group, 
    bcm_field_entry_t *entry);

/* Create a blank field entry. */
extern int bcm_field_entry_create_id(
    int unit, 
    bcm_field_group_t group, 
    bcm_field_entry_t entry);

/* Destroy a field entry. */
extern int bcm_field_entry_destroy(
    int unit, 
    bcm_field_entry_t entry);

/* Destroy all field entries. */
extern int bcm_field_entry_destroy_all(
    int unit);

/* Create a copy of an existing field entry. */
extern int bcm_field_entry_copy(
    int unit, 
    bcm_field_entry_t src_entry, 
    bcm_field_entry_t *dst_entry);

/* Create a copy of an existing field entry. */
extern int bcm_field_entry_copy_id(
    int unit, 
    bcm_field_entry_t src_entry, 
    bcm_field_entry_t dst_entry);

/* Install a field entry into the hardware tables. */
extern int bcm_field_entry_install(
    int unit, 
    bcm_field_entry_t entry);

/* Re-install a field entry into the hardware tables. */
extern int bcm_field_entry_reinstall(
    int unit, 
    bcm_field_entry_t entry);

/* Remove a field entry from the hardware tables. */
extern int bcm_field_entry_remove(
    int unit, 
    bcm_field_entry_t entry);

/* Attach a policer to a field entry. */
extern int bcm_field_entry_policer_attach(
    int unit, 
    bcm_field_entry_t entry_id, 
    int level, 
    bcm_policer_t policer_id);

/* Detach a policer from a field entry. */
extern int bcm_field_entry_policer_detach(
    int unit, 
    bcm_field_entry_t entry_id, 
    int level);

/* Detach all policers from a field entry. */
extern int bcm_field_entry_policer_detach_all(
    int unit, 
    bcm_field_entry_t entry_id);

/* Get the policer(s) attached to a field entry. */
extern int bcm_field_entry_policer_get(
    int unit, 
    bcm_field_entry_t entry_id, 
    int level, 
    bcm_policer_t *policer_id);

/* Get/Set the priority for an entry within a group. */
extern int bcm_field_entry_prio_get(
    int unit, 
    bcm_field_entry_t entry, 
    int *prio);

/* Get/Set the priority for an entry within a group. */
extern int bcm_field_entry_prio_set(
    int unit, 
    bcm_field_entry_t entry, 
    int prio);

/* Invalidate HW FP entries that have not been replayed after warm boot. */
extern int bcm_field_resync(
    int unit);

#define BCM_FIELD_SEL_NOT_IN_TABLE  0xfff0     

/* Remove all qualifications from a field entry. */
extern int bcm_field_qualify_clear(
    int unit, 
    bcm_field_entry_t entry);

/* Add data field that the packet must match to trigger qualifier. */
extern int bcm_field_qualify_data(
    int unit, 
    bcm_field_entry_t eid, 
    int qual_id, 
    uint8 *data, 
    uint8 *mask, 
    uint16 length);

/* bcm_field_qualify_InPort */
extern int bcm_field_qualify_InPort(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_port_t data, 
    bcm_port_t mask);

/* bcm_field_qualify_OutPort */
extern int bcm_field_qualify_OutPort(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_port_t data, 
    bcm_port_t mask);

/* bcm_field_qualify_InPorts */
extern int bcm_field_qualify_InPorts(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_pbmp_t data, 
    bcm_pbmp_t mask);

/* bcm_field_qualify_OutPorts */
extern int bcm_field_qualify_OutPorts(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_pbmp_t data, 
    bcm_pbmp_t mask);

/* bcm_field_qualify_Drop */
extern int bcm_field_qualify_Drop(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_SrcModid */
extern int bcm_field_qualify_SrcModid(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_module_t data, 
    bcm_module_t mask);

/* bcm_field_qualify_SrcPortTgid */
extern int bcm_field_qualify_SrcPortTgid(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_port_t data, 
    bcm_port_t mask);

/* bcm_field_qualify_SrcPort */
extern int bcm_field_qualify_SrcPort(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_module_t data_modid, 
    bcm_module_t mask_modid, 
    bcm_port_t data_port, 
    bcm_port_t mask_port);

/* bcm_field_qualify_SrcTrunk */
extern int bcm_field_qualify_SrcTrunk(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_trunk_t data, 
    bcm_trunk_t mask);

/* bcm_field_qualify_DstModid */
extern int bcm_field_qualify_DstModid(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_module_t data, 
    bcm_module_t mask);

/* bcm_field_qualify_DstPortTgid */
extern int bcm_field_qualify_DstPortTgid(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_port_t data, 
    bcm_port_t mask);

/* bcm_field_qualify_DstPort */
extern int bcm_field_qualify_DstPort(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_module_t data_modid, 
    bcm_module_t mask_modid, 
    bcm_port_t data_port, 
    bcm_port_t mask_port);

/* bcm_field_qualify_DstTrunk */
extern int bcm_field_qualify_DstTrunk(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_trunk_t data, 
    bcm_trunk_t mask);

/* bcm_field_qualify_L4SrcPort */
extern int bcm_field_qualify_L4SrcPort(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_l4_port_t data, 
    bcm_l4_port_t mask);

/* bcm_field_qualify_L4DstPort */
extern int bcm_field_qualify_L4DstPort(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_l4_port_t data, 
    bcm_l4_port_t mask);

/* bcm_field_qualify_OuterVlan */
extern int bcm_field_qualify_OuterVlan(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t data, 
    bcm_vlan_t mask);

/* bcm_field_qualify_InnerVlan */
extern int bcm_field_qualify_InnerVlan(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_vlan_t data, 
    bcm_vlan_t mask);

/* bcm_field_qualify_EtherType */
extern int bcm_field_qualify_EtherType(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* bcm_field_qualify_EqualL4Port */
extern int bcm_field_qualify_EqualL4Port(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 flag);

/* bcm_field_qualify_IpProtocol */
extern int bcm_field_qualify_IpProtocol(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_LookupStatus */
extern int bcm_field_qualify_LookupStatus(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_IpInfo */
extern int bcm_field_qualify_IpInfo(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_PacketRes */
extern int bcm_field_qualify_PacketRes(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_SrcIp */
extern int bcm_field_qualify_SrcIp(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip_t data, 
    bcm_ip_t mask);

/* bcm_field_qualify_DstIp */
extern int bcm_field_qualify_DstIp(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip_t data, 
    bcm_ip_t mask);

/* bcm_field_qualify_DSCP */
extern int bcm_field_qualify_DSCP(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_Tos */
extern int bcm_field_qualify_Tos(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_IpFlags */
extern int bcm_field_qualify_IpFlags(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_TcpControl */
extern int bcm_field_qualify_TcpControl(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_TcpSequenceZero */
extern int bcm_field_qualify_TcpSequenceZero(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 flag);

/* bcm_field_qualify_TcpHeaderSize */
extern int bcm_field_qualify_TcpHeaderSize(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_Ttl */
extern int bcm_field_qualify_Ttl(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_RangeCheck */
extern int bcm_field_qualify_RangeCheck(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_range_t range, 
    int invert);

/* bcm_field_qualify_SrcIp6 */
extern int bcm_field_qualify_SrcIp6(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t data, 
    bcm_ip6_t mask);

/* bcm_field_qualify_DstIp6 */
extern int bcm_field_qualify_DstIp6(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t data, 
    bcm_ip6_t mask);

/* bcm_field_qualify_SrcIp6High */
extern int bcm_field_qualify_SrcIp6High(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t data, 
    bcm_ip6_t mask);

/* bcm_field_qualify_SrcIpEqualDstIp */
extern int bcm_field_qualify_SrcIpEqualDstIp(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 flag);

/* bcm_field_qualify_DstIp6High */
extern int bcm_field_qualify_DstIp6High(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t data, 
    bcm_ip6_t mask);

/* bcm_field_qualify_Ip6NextHeader */
extern int bcm_field_qualify_Ip6NextHeader(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_Ip6TrafficClass */
extern int bcm_field_qualify_Ip6TrafficClass(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_Ip6FlowLabel */
extern int bcm_field_qualify_Ip6FlowLabel(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_Ip6HopLimit */
extern int bcm_field_qualify_Ip6HopLimit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_SrcMac */
extern int bcm_field_qualify_SrcMac(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_mac_t data, 
    bcm_mac_t mask);

/* bcm_field_qualify_DstMac */
extern int bcm_field_qualify_DstMac(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_mac_t data, 
    bcm_mac_t mask);

/* bcm_field_qualify_PacketFormat */
extern int bcm_field_qualify_PacketFormat(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_SrcMacGroup */
extern int bcm_field_qualify_SrcMacGroup(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_IpType */
extern int bcm_field_qualify_IpType(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_IpType_t type);

/* bcm_field_qualify_L2Format */
extern int bcm_field_qualify_L2Format(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_L2Format_t type);

/* bcm_field_qualify_VlanFormat */
extern int bcm_field_qualify_VlanFormat(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_MHOpcode */
extern int bcm_field_qualify_MHOpcode(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_UserDefined */
extern int bcm_field_qualify_UserDefined(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_udf_t udf_id, 
    uint8 data[BCM_FIELD_USER_FIELD_SIZE], 
    uint8 mask[BCM_FIELD_USER_FIELD_SIZE]);

/* bcm_field_qualify_Decap */
extern int bcm_field_qualify_Decap(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_decap_t decap);

/* Qualify on HiGig packets. */
extern int bcm_field_qualify_HiGig(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_Stage */
extern int bcm_field_qualify_Stage(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_stage_t stage);

/* bcm_field_qualify_InterfaceClassPort */
extern int bcm_field_qualify_InterfaceClassPort(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_InterfaceClassL2 */
extern int bcm_field_qualify_InterfaceClassL2(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_InterfaceClassL3 */
extern int bcm_field_qualify_InterfaceClassL3(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_SrcClassL2 */
extern int bcm_field_qualify_SrcClassL2(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_SrcClassL3 */
extern int bcm_field_qualify_SrcClassL3(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_SrcClassField */
extern int bcm_field_qualify_SrcClassField(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_DstClassL2 */
extern int bcm_field_qualify_DstClassL2(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_DstClassL3 */
extern int bcm_field_qualify_DstClassL3(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_DstClassField */
extern int bcm_field_qualify_DstClassField(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_L3IntfGroup */
extern int bcm_field_qualify_L3IntfGroup(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_if_group_t data, 
    bcm_if_group_t mask);

/* bcm_field_qualify_IpProtocolCommon */
extern int bcm_field_qualify_IpProtocolCommon(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_IpProtocolCommon_t protocol);

/* bcm_field_qualify_Snap */
extern int bcm_field_qualify_Snap(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_snap_header_t data, 
    bcm_field_snap_header_t mask);

/* bcm_field_qualify_Llc */
extern int bcm_field_qualify_Llc(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_llc_header_t data, 
    bcm_field_llc_header_t mask);

/* bcm_field_qualify_InnerTpid */
extern int bcm_field_qualify_InnerTpid(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 tpid);

/* bcm_field_qualify_OuterTpid */
extern int bcm_field_qualify_OuterTpid(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 tpid);

/* bcm_field_qualify_PortClass */
extern int bcm_field_qualify_PortClass(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_L3Routable */
extern int bcm_field_qualify_L3Routable(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_IpFrag */
extern int bcm_field_qualify_IpFrag(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_IpFrag_t frag_info);

/* bcm_field_qualify_LookupClass0 */
extern int bcm_field_qualify_LookupClass0(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_Vrf */
extern int bcm_field_qualify_Vrf(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 data, 
    uint32 mask);

/* bcm_field_qualify_ExtensionHeaderType */
extern int bcm_field_qualify_ExtensionHeaderType(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_ExtensionHeaderSubCode */
extern int bcm_field_qualify_ExtensionHeaderSubCode(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_L4Ports */
extern int bcm_field_qualify_L4Ports(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_MirrorCopy */
extern int bcm_field_qualify_MirrorCopy(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_TunnelTerminated */
extern int bcm_field_qualify_TunnelTerminated(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_MplsTerminated */
extern int bcm_field_qualify_MplsTerminated(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_InnerSrcIp */
extern int bcm_field_qualify_InnerSrcIp(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip_t data, 
    bcm_ip_t mask);

/* bcm_field_qualify_InnerDstIp */
extern int bcm_field_qualify_InnerDstIp(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip_t data, 
    bcm_ip_t mask);

/* bcm_field_qualify_InnerSrcIp6 */
extern int bcm_field_qualify_InnerSrcIp6(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t data, 
    bcm_ip6_t mask);

/* bcm_field_qualify_InnerDstIp6 */
extern int bcm_field_qualify_InnerDstIp6(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t data, 
    bcm_ip6_t mask);

/* bcm_field_qualify_InnerSrcIp6High */
extern int bcm_field_qualify_InnerSrcIp6High(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t data, 
    bcm_ip6_t mask);

/* bcm_field_qualify_InnerDstIp6High */
extern int bcm_field_qualify_InnerDstIp6High(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_ip6_t data, 
    bcm_ip6_t mask);

/* bcm_field_qualify_InnerTtl */
extern int bcm_field_qualify_InnerTtl(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_InnerDSCP */
extern int bcm_field_qualify_InnerDSCP(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_InnerIpProtocol */
extern int bcm_field_qualify_InnerIpProtocol(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_InnerIpFrag */
extern int bcm_field_qualify_InnerIpFrag(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_IpFrag_t frag_info);

/* bcm_field_qualify_DosAttack */
extern int bcm_field_qualify_DosAttack(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_IpmcStarGroupHit */
extern int bcm_field_qualify_IpmcStarGroupHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_L3DestRouteHit */
extern int bcm_field_qualify_L3DestRouteHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_L3DestHostHit */
extern int bcm_field_qualify_L3DestHostHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_L3SrcHostHit */
extern int bcm_field_qualify_L3SrcHostHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_L2CacheHit */
extern int bcm_field_qualify_L2CacheHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_L2StationMove */
extern int bcm_field_qualify_L2StationMove(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_L2DestHit */
extern int bcm_field_qualify_L2DestHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_L2SrcStatic */
extern int bcm_field_qualify_L2SrcStatic(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_L2SrcHit */
extern int bcm_field_qualify_L2SrcHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_IngressStpState */
extern int bcm_field_qualify_IngressStpState(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_ForwardingVlanValid */
extern int bcm_field_qualify_ForwardingVlanValid(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_VlanTranslationHit */
extern int bcm_field_qualify_VlanTranslationHit(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_IpAuth */
extern int bcm_field_qualify_IpAuth(
    int unit, 
    bcm_field_entry_t entry, 
    uint8 data, 
    uint8 mask);

/* bcm_field_qualify_BigIcmpCheck */
extern int bcm_field_qualify_BigIcmpCheck(
    int unit, 
    bcm_field_entry_t entry, 
    uint32 flag, 
    uint32 size);

/* bcm_field_qualify_IcmpTypeCode */
extern int bcm_field_qualify_IcmpTypeCode(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* bcm_field_qualify_IgmpTypeMaxRespTime */
extern int bcm_field_qualify_IgmpTypeMaxRespTime(
    int unit, 
    bcm_field_entry_t entry, 
    uint16 data, 
    uint16 mask);

/* Add an action to a field entry. */
extern int bcm_field_action_add(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_action_t action, 
    uint32 param0, 
    uint32 param1);

/* Delete an action from a field entry. */
extern int bcm_field_action_delete(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_action_t action, 
    uint32 param0, 
    uint32 param1);

/* Add an action to a field entry. */
extern int bcm_field_action_ports_add(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_action_t action, 
    bcm_pbmp_t pbmp);

/* 
 * Retrieve the parameters for an action previously added to a field
 * entry.
 */
extern int bcm_field_action_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_action_t action, 
    uint32 *param0, 
    uint32 *param1);

/* 
 * Retrieve the parameters for an action previously added to a field
 * entry.
 */
extern int bcm_field_action_ports_get(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_action_t action, 
    bcm_pbmp_t *pbmp);

/* 
 * Remove an action from a field entry.  Same as bcm_field_action_delete
 * for actions without parameters.
 */
extern int bcm_field_action_remove(
    int unit, 
    bcm_field_entry_t entry, 
    bcm_field_action_t action);

/* Remove all actions from a field entry. */
extern int bcm_field_action_remove_all(
    int unit, 
    bcm_field_entry_t entry);

/* Create a field counter pair and associate it with a field entry. */
extern int bcm_field_counter_create(
    int unit, 
    bcm_field_entry_t entry);

/* 
 * Share a field counter pair from one field entry with another field
 * entry.
 */
extern int bcm_field_counter_share(
    int unit, 
    bcm_field_entry_t src_entry, 
    bcm_field_entry_t dst_entry);

/* Remove a field counter pair to field entry association. */
extern int bcm_field_counter_destroy(
    int unit, 
    bcm_field_entry_t entry);

/* Set a field counter value. */
extern int bcm_field_counter_set(
    int unit, 
    bcm_field_entry_t entry, 
    int counter_num, 
    uint64 val);

/* Get a field counter value. */
extern int bcm_field_counter_set32(
    int unit, 
    bcm_field_entry_t entry, 
    int counter_num, 
    uint32 val);

/* Set or get a field counter value. */
extern int bcm_field_counter_get(
    int unit, 
    bcm_field_entry_t entry, 
    int counter_num, 
    uint64 *valp);

/* Set or get a field counter value. */
extern int bcm_field_counter_get32(
    int unit, 
    bcm_field_entry_t entry, 
    int counter_num, 
    uint32 *valp);

/* Create a field meter group and associate it with a field entry. */
extern int bcm_field_meter_create(
    int unit, 
    bcm_field_entry_t entry);

/* 
 * Share the field meter group from one field entry with another field
 * entry.
 */
extern int bcm_field_meter_share(
    int unit, 
    bcm_field_entry_t src_entry, 
    bcm_field_entry_t dst_entry);

/* Remove a field meter association with a field entry. */
extern int bcm_field_meter_destroy(
    int unit, 
    bcm_field_entry_t entry);

/* Set or get the rate parameters for a field meter. */
extern int bcm_field_meter_set(
    int unit, 
    bcm_field_entry_t entry, 
    int meter_num, 
    uint32 kbits_sec, 
    uint32 kbits_burst);

/* Set or get the rate parameters for a field meter. */
extern int bcm_field_meter_get(
    int unit, 
    bcm_field_entry_t entry, 
    int meter_num, 
    uint32 *kbits_sec, 
    uint32 *kbits_burst);

extern int accton_bcm_field_entry_copy_id(int unit,
                              	          bcm_field_group_t group,
                                          bcm_field_entry_t entry);

/* Initialize Field Qualifier LLC header structure. */
extern void bcm_field_llc_header_t_init(
    bcm_field_llc_header_t *llc_header);

/* Initialize Field Qualifier SNAP header structure. */
extern void bcm_field_snap_header_t_init(
    bcm_field_snap_header_t *snap_header);

/* Initialize the Field Qualifier Set structure. */
extern void bcm_field_qset_t_init(
    bcm_field_qset_t *qset);

/* This API was deprecated and no longer supported. */
extern void bcm_field_status_t_init(
    bcm_field_status_t *fstatus);

/* Initialize the Field Group Status structure. */
extern void bcm_field_group_status_t_init(
    bcm_field_group_status_t *fgroup);

extern int accton_bcm_field_entry_copy_id(int unit,
                              	          bcm_field_group_t group,
                                          bcm_field_entry_t entry);

#if defined(BROADCOM_DEBUG)
/* Show current software state of the field module. */
extern int bcm_field_show(
    int unit, 
    const char *pfx);
#endif

#if defined(BROADCOM_DEBUG)
/* Show contents of a field entry. */
extern int bcm_field_entry_dump(
    int unit, 
    bcm_field_entry_t entry);
#endif

#if defined(BROADCOM_DEBUG)
/* Show contents of a field group. */
extern int bcm_field_group_dump(
    int unit, 
    bcm_field_group_t group);
#endif

/* SDK 5.2.0 backward compatibility. */
#define bcmFieldQualifyOutVlan  bcmFieldQualifyOuterVlan 
#define bcmFieldQualifyInVlan   bcmFieldQualifyInnerVlan 

/* SDK 5.2.0 backward compatibility. */
#define bcm_field_qualify_OutVlan   bcm_field_qualify_OuterVlan 
#define bcm_field_qualify_InVlan    bcm_field_qualify_InnerVlan 

#endif /* __BCM_FIELD_H__ */
