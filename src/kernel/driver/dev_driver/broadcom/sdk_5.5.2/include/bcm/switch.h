/*
 * $Id: switch.h,v 1.95.2.4 Broadcom SDK $
 * 
 * $Copyright: Copyright 2008 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR U.S. $1,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __BCM_SWITCH_H__
#define __BCM_SWITCH_H__

#include <bcm/port.h>

/* Switch controls. */
typedef enum bcm_switch_control_e {
    bcmSwitchHgHdrErrToCpu,             /* Higig Header Error to CPU. */
    bcmSwitchClassTagPacketsToCpu,      /* HG2 packets with a PPD header of 1. */
    bcmSwitchIpmcTunnelToCpu,           /* IPMC tunnel packet to CPU. */
    bcmSwitchStationMoveOverLearnLimitToCpu, /* Station movement over MAC learn limit
                                           to CPU. */
    bcmSwitchMcastUnknownErrToCpu,      /* MC unknown Index Error to CPU. */
    bcmSwitchLearnLimitPriority,        /* Priority for MAC limit exceeds to
                                           CPU. */
    bcmSwitchControlOpcodePriority,     /* Control Op Code priority. */
    bcmSwitchCpuProtoBpduPriority,      /* Priority for BPDUs to CPU. */
    bcmSwitchCpuProtoArpPriority,       /* Priority for ARP/ND packets to CPU. */
    bcmSwitchCpuProtoIgmpPriority,      /* Priority for IGMP/MLD packets to CPU. */
    bcmSwitchCpuProtoDhcpPriority,      /* Priority for DHCP packets to CPU. */
    bcmSwitchCpuProtoIpmcReservedPriority, /* Priority for IPv4/IPv6 multicast
                                           packets to CPU. */
    bcmSwitchCpuProtoIpOptionsPriority, /* Priority for IPv4/IPv6 packets with
                                           options or IPv6 packets with 0 len.
                                           Payload/jumbo option to CPU. */
    bcmSwitchCpuProtoExceptionsPriority, /* Priority for IPv4/IPv6 packets with
                                           TTL=1 to CPU. */
    bcmSwitchCpuProtocolPrio,           /* Priority used for BPDUs to CPU. */
    bcmSwitchCpuUnknownPrio,            /* Priority for unknown SA or DA to CPU. */
    bcmSwitchCpuSamplePrio,             /* Priority for sFlow sample to CPU. */
    bcmSwitchCpuDefaultPrio,            /* Priority for all other packets to
                                           CPU. */
    bcmSwitchL2StaticMoveToCpu,         /* Port movement of static L2 addr. */
    bcmSwitchUnknownIpmcToCpu,          /* Send unknown IP multicasts to CPU. */
    bcmSwitchUnknownMcastToCpu,         /* Send unknown multicasts to CPU. */
    bcmSwitchUnknownUcastToCpu,         /* Send DLF packets to CPU. */
    bcmSwitchNonIpL3ErrToCpu,           /* Non-IP packets w/DA of my router MAC
                                           to CPU. */
    bcmSwitchL3HeaderErrToCpu,          /* Invalid checksum, TTL 0, etc. */
    bcmSwitchUnknownVlanToCpu,          /* Packet VLAN not in VLAN table. */
    bcmSwitchUnknownL3SrcToCpu,         /* SIP not found in L3 table. */
    bcmSwitchUnknownL3DestToCpu,        /* DIP not found in L3/LPM tables. */
    bcmSwitchIpmcPortMissToCpu,         /* Incoming port not in IPMC entry. */
    bcmSwitchIpmcErrorToCpu,            /* IPMC pkt has header err or TTL=0. */
    bcmSwitchVCLabelMissToCpu,          /* Send VC mismatch packet to CPU. */
    bcmSwitchSourceRouteToCpu,          /* Send multicast SA packet to CPU. */
    bcmSwitchLLCSAP1,                   /* Get/set SAP_VALUE0 in LLC_MATCH. */
    bcmSwitchLLCSAP2,                   /* Get/set SAP_VALUE1 in LLC_MATCH. */
    bcmSwitchSampleIngressRandomSeed,   /* SFlow ingress RNG seed. */
    bcmSwitchSampleEgressRandomSeed,    /* SFlow egress RNG seed. */
    bcmSwitchCpuFpCopyPrio,             /* Priority used for FP copy to CPU. */
    bcmSwitchCpuIcmpRedirectPrio,       /* Priority for ICMP to CPU. */
    bcmSwitchCpuMtuFailPrio,            /* Priority for MTU failure to CPU. */
    bcmSwitchCpuMirrorPrio,             /* Priority for packets mirrored to CPU. */
    bcmSwitchCpuLookupFpCopyPrio,       /* Priority for Lookup FP copy to SPU. */
    bcmSwitchL2NonStaticMoveToCpu,      /* L2 w/non-static addr to CPU. */
    bcmSwitchV6L3ErrToCpu,              /* Invalid IPv6 packets to CPU. */
    bcmSwitchV6L3DstMissToCpu,          /* IPv6 unknown dest packets to CPU. */
    bcmSwitchV4L3ErrToCpu,              /* Invalid IPv6 packets to CPU. */
    bcmSwitchV4L3DstMissToCpu,          /* IPv6 unknown dest packets to CPU. */
    bcmSwitchTunnelErrToCpu,            /* Invalid tunnel packets to CPU. */
    bcmSwitchMartianAddrToCpu,          /* Martian packets to CPU. */
    bcmSwitchMartianAddr,               /* Enable/Disable Martian packet check. */
    bcmSwitchL3UcTtlErrToCpu,           /* L3 unicast w/invalid TTL to CPU. */
    bcmSwitchL3SlowpathToCpu,           /* Slowpath packets to CPU. */
    bcmSwitchIpmcTtlErrToCpu,           /* IPMC packets w/invalid TTL to CPU. */
    bcmSwitchDosAttackToCpu,            /* Denial of Service attacks to CPU. */
    bcmSwitchDosAttackSipEqualDip,      /* Enable SIP=DIP checking. */
    bcmSwitchDosAttackMinTcpHdrSize,    /* Header length for min TCP header
                                           checking. */
    bcmSwitchDosAttackV4FirstFrag,      /* Enable IPv4 First Frag checking. */
    bcmSwitchDosAttackTcpFlags,         /* Enable TCP flag checking. */
    bcmSwitchDosAttackL4Port,           /* Enable L4 port number checking. */
    bcmSwitchDosAttackTcpFrag,          /* Enable TCP fragment checking. */
    bcmSwitchDosAttackIcmp,             /* Enable ICMP size check. */
    bcmSwitchDosAttackIcmpPktOversize,  /* Max pkt size for ICMP size check. */
    bcmSwitchDosAttackMACSAEqualMACDA,  /* MACSA == MACDA check. */
    bcmSwitchDosAttackIcmpV6PingSize,   /* Max pkt size for v6 ping check. */
    bcmSwitchDosAttackIcmpFragments,    /* Fragmented ICMP packets check. */
    bcmSwitchDosAttackTcpOffset,        /* TCP Header offset equals to 1 check. */
    bcmSwitchDosAttackUdpPortsEqual,    /* UDP packets where SPORT = DROP. */
    bcmSwitchDosAttackTcpPortsEqual,    /* TCP packets where SPORT = DROP. */
    bcmSwitchDosAttackTcpFlagsSF,       /* TCP packets with SYN & FIN bits
                                           enabled. */
    bcmSwitchDosAttackTcpFlagsFUP,      /* TCP packets with FIN, URG, PSH bits
                                           set and sequence number equals 0. */
    bcmSwitchDosAttackTcpHdrPartial,    /* TCP packets with not full TCP header. */
    bcmSwitchDosAttackPingFlood,        /* Enable ping flood checking. */
    bcmSwitchDosAttackSynFlood,         /* Enable SYN flood checking. */
    bcmSwitchDosAttackTcpSmurf,         /* Enable TCP smurf checking. */
    bcmSwitchDosAttackTcpXMas,          /* SeqNum, Fin,Urg,Psh equal 0. */
    bcmSwitchDosAttackL3Header,         /* Ipv4/6 header length checks. */
    bcmSwitchIcmpRedirectToCpu,         /* ICMP redirect To CPU. */
    bcmSwitchMplsErrToCpu,              /* Invalid MPLS packets to CPU. */
    bcmSwitchMplsSequenceErrToCpu,      /* MPLS Sequence number check failure to
                                           CPU. */
    bcmSwitchMplsLabelMissToCpu,        /* MPLS label lookup miss to CPU. */
    bcmSwitchMplsTtlErrToCpu,           /* MPLS Header TTL used value is 0 or 1. */
    bcmSwitchMplsInvalidL3PayloadToCpu, /* MPLS L3 payload invalid. */
    bcmSwitchMplsInvalidActionToCpu,    /* Invalid action / comnination of
                                           actions. */
    bcmSwitchSharedVlanMismatchToCpu,   /* Private VLAN VID mismatch. */
    bcmSwitchL3SrcUrpfErrToCpu,         /* Invalid L3 uRPF SIP to CPU. */
    bcmSwitchGreSourceRoutingToCpu,     /* GRE source routing packets to CPU. */
    bcmSwitchEnifilterDropToCpu,        /* Eni filter dropped packets to CPU. */
    bcmSwitchArpReplyToCpu,             /* ARP replies to CPU. */
    bcmSwitchArpReplyDrop,              /* ARP replies dropped. */
    bcmSwitchArpRequestToCpu,           /* ARP requests to CPU. */
    bcmSwitchArpRequestDrop,            /* ARP requests dropped. */
    bcmSwitchNdPktToCpu,                /* ND packets to CPU. */
    bcmSwitchNdPktDrop,                 /* ND packets dropped. */
    bcmSwitchMcastFloodBlocking,        /* Current PFM rule is applied when
                                           IGMP/MLD/MC/ReservedMC packet flooded
                                           to VLAN. */
    bcmSwitchIgmpPktToCpu,              /* IGMP packets to CPU. */
    bcmSwitchIgmpPktDrop,               /* IGMP packets dropped. */
    bcmSwitchDhcpPktToCpu,              /* DHCP packets to CPU. */
    bcmSwitchDhcpPktDrop,               /* DHCP packets dropped. */
    bcmSwitchMldPktToCpu,               /* MLD packets to CPU. */
    bcmSwitchMldPktDrop,                /* MLD packets dropped. */
    bcmSwitchV4ResvdMcPktToCpu,         /* IPv4 reserved MC packets to CPU. */
    bcmSwitchV4ResvdMcPktDrop,          /* IPv4 reserved MC packets dropped. */
    bcmSwitchV4ResvdMcPktFlood,         /* IPv4 reserved MC packets flooded to
                                           VLAN. */
    bcmSwitchV6ResvdMcPktToCpu,         /* IPv6 reserved MC packets to CPU. */
    bcmSwitchV6ResvdMcPktDrop,          /* IPv6 reserved MC packets dropped. */
    bcmSwitchV6ResvdMcPktFlood,         /* IPv6 reserved MC packets flooded to
                                           VLAN. */
    bcmSwitchIgmpReportLeaveToCpu,      /* IGMP report/leave messages to CPU. */
    bcmSwitchIgmpReportLeaveDrop,       /* IGMP report/leave messages dropped. */
    bcmSwitchIgmpReportLeaveFlood,      /* IGMP report/leave messages flooded to
                                           VLAN. */
    bcmSwitchIgmpQueryToCpu,            /* IGMP query messages to CPU. */
    bcmSwitchIgmpQueryDrop,             /* IGMP query messages dropped. */
    bcmSwitchIgmpQueryFlood,            /* IGMP query messages flooded to VLAN. */
    bcmSwitchIgmpUnknownToCpu,          /* IGMP unknown messages to CPU. */
    bcmSwitchIgmpUnknownDrop,           /* IGMP unknown messages dropped. */
    bcmSwitchIgmpUnknownFlood,          /* IGMP unknown messages flooded to
                                           VLAN. */
    bcmSwitchMldReportDoneToCpu,        /* MLD report/done messages to CPU. */
    bcmSwitchMldReportDoneDrop,         /* MLD report/done messages dropped. */
    bcmSwitchMldReportDoneFlood,        /* MLD report/done messages flooded to
                                           VLAN. */
    bcmSwitchMldQueryToCpu,             /* MLD query messages to CPU. */
    bcmSwitchMldQueryDrop,              /* MLD query messages dropped. */
    bcmSwitchMldQueryFlood,             /* MLD query messages flooded to VLAN. */
    bcmSwitchIpmcV4RouterDiscoveryToCpu, /* IPv4 Router discovery messages to
                                           CPU. */
    bcmSwitchIpmcV4RouterDiscoveryDrop, /* IPv4 Router discovery messages
                                           dropped. */
    bcmSwitchIpmcV4RouterDiscoveryFlood, /* IPv4 Router discovery messages
                                           flooded to VLAN. */
    bcmSwitchIpmcV6RouterDiscoveryToCpu, /* IPv6 Router discovery messages to
                                           CPU. */
    bcmSwitchIpmcV6RouterDiscoveryDrop, /* IPv6 Router discovery messages
                                           dropped. */
    bcmSwitchIpmcV6RouterDiscoveryFlood, /* IPv6 Router discovery messages
                                           flooded to VLAN. */
    bcmSwitchDirectedMirroring,         /* Enable directed mirroring mode. */
    bcmSwitchPktAge,                    /* Chip-wide packet age time, msec. */
    bcmSwitchRemoteL2Lookup,            /* Allow remote L2 lookup request. */
    bcmSwitchMcastFloodDefault,         /* VLAN Multicast flood control. */
    bcmSwitchParityErrorToCpu,          /* Lookup parity error. */
    bcmSwitchL3MtuFailToCpu,            /* L3 MTU check failure. */
    bcmSwitchMeterAdjust,               /* Meter/Rate control with overhead on
                                           wire accounted for per packet. */
    bcmSwitchHashL2,                    /* Hash Select for L2. */
    bcmSwitchHashL3,                    /* Hash Select for L3. */
    bcmSwitchHashMultipath,             /* Hash Select for Multipath. */
    bcmSwitchHashControl,               /* Hash Control of fields. */
    bcmSwitchMirrorStackMode,           /* Select BCM56504, 5670 or 5675-A0
                                           style stacking. */
    bcmSwitchMirrorSrcModCheck,         /* Source modid check in BCM56504 style
                                           of mirroring. */
    bcmSwitchMirrorUnmarked,            /* Send mirror packets as simple
                                           unicast. */
    bcmSwitchDestPortHGTrunk,           /* Enable to use dest port in HiGig
                                           trunking. */
    bcmSwitchColorSelect,               /* Choose color selection source. */
    bcmSwitchModuleLoopback,            /* Allow local module ingress. */
    bcmSwitchSrcModBlockMirrorCopy,     /* Source modid blocking for BCM5670
                                           compatibility. */
    bcmSwitchSrcModBlockMirrorOnly,     /* Source modid blocking for BCM5675-A0
                                           compatibility. */
    bcmSwitchHashSeed0,                 /* BCM56700/56800/56580 hash seeds. */
    bcmSwitchHashSeed1,                 /* For enhanced hashing algoithm. */
    bcmSwitchHashField0Config,          /* BCM56700/56800/56580 enhanced hash
                                           mode 0 config. */
    bcmSwitchHashField1Config,          /* BCM56700/56800/56580 enhanced hash
                                           mode 1 config. */
    bcmSwitchHashSelectControl,         /* BCM56700/56800/56580 field selection
                                           control. */
    bcmSwitchHashIP4Field0,             /* BCM56700/56800/56580 enhanced hash
                                           field. */
    bcmSwitchHashIP4Field1,             /* Selections for IPv4 packets. */
    bcmSwitchHashIP6Field0,             /* BCM56700/56800/56580 enhanced hash
                                           field. */
    bcmSwitchHashIP6Field1,             /* Selections for IPv6 packets. */
    bcmSwitchHashL2Field0,              /* BCM56700/56800/56580 enhanced hash
                                           field. */
    bcmSwitchHashL2Field1,              /* Selections for L2 packets. */
    bcmSwitchHashMPLSField0,            /* BCM56700/56800/56580 enhanced hash
                                           field. */
    bcmSwitchHashMPLSField1,            /* Selections for MPLS packets. */
    bcmSwitchHashHG2UnknownField0,      /* BCM56700/56800/56580 enhanced hash
                                           field. */
    bcmSwitchHashHG2UnknownField1,      /* Selections for HiGig2 packets. */
    bcmSwitchTrunkHashSet0UnicastOffset, /* BCM56700/56800/56580 enhanced hash
                                           bits. */
    bcmSwitchTrunkHashSet1UnicastOffset, /* Selections for unicast trunking. */
    bcmSwitchTrunkHashSet0NonUnicastOffset, /* BCM56700/56800/56580 enhanced hash
                                           bits. */
    bcmSwitchTrunkHashSet1NonUnicastOffset, /* Selections for non-unicast trunking. */
    bcmSwitchFabricTrunkHashSet0UnicastOffset, /* BCM56700/56800/56580 enhanced hash
                                           bits. */
    bcmSwitchFabricTrunkHashSet1UnicastOffset, /* Selections for unicast fabric
                                           trunking. */
    bcmSwitchFabricTrunkHashSet0NonUnicastOffset, /* BCM56700/56800/56580 enhanced hash
                                           bits. */
    bcmSwitchFabricTrunkHashSet1NonUnicastOffset, /* Selections for non-unicast fabric
                                           trunking. */
    bcmSwitchLoadBalanceHashSet0UnicastOffset, /* BCM56700/56800/56580 enhanced hash
                                           bits. */
    bcmSwitchLoadBalanceHashSet1UnicastOffset, /* Selections for unicast load
                                           balancing. */
    bcmSwitchLoadBalanceHashSet0NonUnicastOffset, /* BCM56700/56800/56580 enhanced hash
                                           bits. */
    bcmSwitchLoadBalanceHashSet1NonUnicastOffset, /* Selections for non-unicast load
                                           balancing. */
    bcmSwitchUniformUcastTrunkDistribution, /* Uniform unicast trunk distribution on
                                           trunk with non power of 2 trunk
                                           ports. */
    bcmSwitchUniformFabricTrunkDistribution, /* Uniform Higig trunk distribution on
                                           trunk with non power of 2 trunk
                                           ports. */
    bcmSwitchECMPHashSet0Offset,        /* BCM56700/56800/56580 enhanced hash
                                           bits. */
    bcmSwitchECMPHashSet1Offset,        /* Selections for ECMP. */
    bcmSwitchCpuToCpuEnable,            /* Enable copying packets from CMIC to
                                           CPU. */
    bcmSwitchIgmpUcastEnable,           /* Enable unicast packets with IGMP
                                           payload. */
    bcmSwitchMldUcastEnable,            /* Enable unicast packets with MLD
                                           payload. */
    bcmSwitchIgmpReservedMcastEnable,   /* IGMP packets with reserved MC address
                                           threated as IGMP. */
    bcmSwitchMldReservedMcastEnable,    /* MLD packets with reserved MC address
                                           threated as MLD. */
    bcmSwitchMldDirectAttachedOnly,     /* Stricter checks for MLD packets are
                                           enable. */
    bcmSwitchPortEgressBlockL2,         /* Apply egress mask port blocking on L2
                                           traffic. */
    bcmSwitchPortEgressBlockL3,         /* Apply egress mask port blocking on L3
                                           traffic. */
    bcmSwitchBpduInvalidVlanDrop,       /* BPDU packets are dropped upon invalid
                                           VLAN. */
    bcmSwitchMirrorInvalidVlanDrop,     /* Mirror-to-port packets are dropped
                                           upon invalid VLAN. */
    bcmSwitchRemoteLearnTrust,          /* Honor the DONOT_LEARN bit in HiGig
                                           header. */
    bcmSwitchSourceMacZeroDrop,         /* Packets with MACSA of all zeros are
                                           dropped. */
    bcmSwitchIpmcGroupMtu,              /* For ingress MTU check for all IPMC
                                           groups. */
    bcmSwitchModuleType,                /* Set Switch module type. */
    bcmSwitchIgmpToCPU,                 /* ROBO for IGMP to CPU. */
    bcmSwitchBpduToCPU,                 /* ROBO for all BPDU to CPU. */
    bcmSwitch8021xToCPU,                /* ROBO for MAC SEC to CPU. */
    bcmSwitchBcstToCPU,                 /* ROBO Broadcast to CPU. */
    bcmSwitchExternalL3,                /* Enable external memory for L3. */
    bcmSwitchL3EgressMode,              /* Enable advanced egress management. */
    bcmSwitchMplsIngressPortCheck,      /* Enable MPLS ILM ingress port checks. */
    bcmSwitchSourceModBlockUcast,       /* Apply source modid block on unicast
                                           packets only. */
    bcmSwitchSourceModBlockControlOpcode, /* Apply source modid block on system
                                           control packets. */
    bcmSwitchEgressBlockUcast,          /* Apply egress mask on unicast packets
                                           only. */
    bcmSwitchAlternateStoreForward,     /* Alternate Store and Forward. */
    bcmSwitchWarmBoot,                  /* Set Warm boot state. */
    bcmSwitchUnknownIpmcAsMcast,        /* Threat unknown IPMC as L2 Mcast. */
    bcmSwitchTunnelUnknownIpmcDrop,     /* Drop unknown IPMC for incomming
                                           tunnel. */
    bcmSwitchDhcpLearn,                 /* Do not learn MACSA of DHCP packet. */
    bcmSwitchIpmcTtl1ToCpu,             /* Copy L3 Mcast with TTL 1 to CPU. */
    bcmSwitchL3UcastTtl1ToCpu,          /* Copy L3 Ucast with TTL 1 to CPU. */
    bcmSwitchDosAttackFlagZeroSeqZero,  /* Null scan. */
    bcmSwitchHgHdrExtLengthEnable,      /* Use HiGig+ HDR_EXT_LEN field. */
    bcmSwitchDosAttackSynFrag,          /* Drop TCP SYN packet with source port
                                           0-1023 for the first segment. */
    bcmSwitchIp4McastL2DestCheck,       /* Check MACDA and IPv4 DIP address
                                           match. */
    bcmSwitchIp6McastL2DestCheck,       /* Check MACDA and IPv6 DIP address
                                           match. */
    bcmSwitchL3TunnelUrpfMode,          /* RPF mode for unicast tunneled
                                           packets. */
    bcmSwitchL3TunnelUrpfDefaultRoute,  /* Enable URPF default gateway check for
                                           unicast tunneled packets. */
    bcmSwitchL3UrpfFailToCpu,           /* Enable trap URPF fail packets to CPU. */
    bcmSwitchL3UrpfRouteEnable,         /* Enable route lookup for URPF check. */
    bcmSwitchL3UrpfMode,                /* Port rpf mode for unicast packets. */
    bcmSwitchL3UrpfDefaultRoute,        /* Enable URPF default gateway check. */
    bcmSwitchIngressRateLimitIncludeIFG, /* Add bytes to ingress rate limiting
                                           for IFG. */
    bcmSwitchRateLimitLinear,           /* Use linear limits for shaping and
                                           egress metering. */
    bcmSwitchHashL2Dual,                /* Secondary Hash Select for L2. */
    bcmSwitchHashL3Dual,                /* Secondary Hash Select for L3. */
    bcmSwitchHashDualMoveDepth,         /* Maximum moves in dual hash mode. */
    bcmSwitchSharedVlanEnable,          /* Enable shared vlan. */
    bcmSwitchSharedVlanL2McastEnable,   /* Use shared vlan for L2 mcast pkt. */
    bcmSwitchIpmcReplicationSharing,    /* IPMC replication uses lists. */
    bcmSwitchVrfMax,                    /* Maximum VRF ID for the device. */
    bcmSwitchMplsPerVlan,               /* Ability to enable/disable MPLS
                                           per-vlan. */
    bcmSwitchFailoverStackTrunk,        /* Trunk failover support for Stack
                                           ports. */
    bcmSwitchFailoverEtherTrunk,        /* Trunk failover support for Ether
                                           ports. */
    bcmSwitchClassBasedMoveFailPktToCpu, /* Class based check fail pkt to cpu. */
    bcmSwitchClassBasedMoveFailPktDrop, /* Drop class based check fail pkt. */
    bcmSwitchHgHdrMcastFlood,           /* Flood control value in Higig Header. */
    bcmSwitchHgHdrMcastFloodOverride,   /* Use flood control value in Higig
                                           header. */
    bcmSwitchHgHdrIpMcastFlood,         /* IPMC flood control value in Higig
                                           header. */
    bcmSwitchHgHdrIpMcastFloodOverride, /* Use IPMC flood ctrl value in Higig
                                           header. */
    bcmSwitchSTPBlockedFieldBypass,     /* Disable FP when STP state is blocked. */
    bcmSwitchL2PortBlocking,            /* Enable selective port blocking per
                                           MAC address. */
    bcmSwitchHashIpfixIngress,          /* Hash Select for Ingress IPFIX. */
    bcmSwitchHashIpfixIngressDual,      /* Secondary Hash Select for Ingress
                                           IPFIX. */
    bcmSwitchHashIpfixEgress,           /* Hash Select for Egress IPFIX. */
    bcmSwitchHashIpfixEgressDual,       /* Secondary Hash Select for Egress
                                           IPFIX. */
    bcmSwitchForceForwardFabricTrunk,   /* Fabric trunk resolution in force
                                           forward mode. */
    bcmSwitchUseGport,                  /* Enable GPORT format for
                                           destination/source representation. */
    bcmSwitchHgHdrMcastVlanRange,       /* HIGIG2 broadcast index range */
    bcmSwitchHgHdrMcastL2Range,         /* HIGIG2 multicast index range */
    bcmSwitchHgHdrMcastL3Range,         /* HIGIG2 IPMC index range */
    bcmSwitchMcastL2Range,              /* Multicast index range */
    bcmSwitchMcastL3Range,              /* IPMC index range */
    bcmSwitchKeepEgressRtHdr,           /* Leave SBX Egress Route Header on
                                           packets for a given port. */
    bcmSwitchCpuCopyDestination,        /* Destination for CPU bound packets. */
    bcmSwitchCpuProtoTimeSyncPrio,      /* Priority for Time-Sync packets to
                                           CPU. */
    bcmSwitchCpuProtoMmrpPrio,          /* Priority for MMRP packets to CPU. */
    bcmSwitchCpuProtoSrpPrio,           /* Priority for SRP packets to CPU. */
    bcmSwitchTimeSyncPktToCpu,          /* Time-Sync protocol packets to CPU. */
    bcmSwitchTimeSyncPktDrop,           /* Time-Sync protocol packets dropped. */
    bcmSwitchTimeSyncPktFlood,          /* Time-Sync protocol packets flooded to
                                           VLAN. */
    bcmSwitchMmrpPktToCpu,              /* MMRP protocol packets to CPU. */
    bcmSwitchMmrpPktDrop,               /* MMRP protocol packets dropped. */
    bcmSwitchMmrpPktFlood,              /* MMRP protocol packets flooded to
                                           VLAN. */
    bcmSwitchSrpPktToCpu,               /* SRP protocol packets to CPU. */
    bcmSwitchSrpPktDrop,                /* SRP protocol packets dropped. */
    bcmSwitchSrpPktFlood,               /* SRP protocol packets flooded to VLAN. */
    bcmSwitchL2McastAllRouterPortsAddEnable, /* Add all-router ports to every L2
                                           multicast entry. */
    bcmSwitchBypassMode,                /* Omit some switching features to
                                           decrease traffic latency. */
    bcmSwitchIpmcSameVlanL3Route,       /* Enable forwarding of known IPMC
                                           packets to the incoming vlan . */
    bcmSwitchAutoQueues,                /* Queues are prealllocated at init
                                           time. */
    bcmSwitchFieldCache,                /* Enable caching of Rule table or field
                                           entries */
    bcmSwitchFieldCommit,               /* Flush the cached Rule table or field
                                           entries to hardware */
    bcmSwitchIpmcCache,                 /* Enable caching of IP Multicast S,G
                                           entries */
    bcmSwitchIpmcCommit,                /* Flush the cached IP Multicast table
                                           entries to hardware */
    bcmSwitchL2Cache,                   /* Enable caching of MAC address entries */
    bcmSwitchL2Commit,                  /* Flush the cached MAC address table to
                                           hardware */
    bcmSwitchL3HostCache,               /* Enable caching of L3 Host table
                                           entries */
    bcmSwitchL3HostCommit,              /* Flush the cached L3 Host table to
                                           hardware */
    bcmSwitchL3RouteCache,              /* Enable caching of L3 Route table
                                           entries */
    bcmSwitchL3RouteCommit,             /* Flush the cached L3 Route table to
                                           hardware */
    bcmSwitch__Count 
} bcm_switch_control_t;

#define BCM_SWITCH_CONTROL_STR \
    "HgHdrErrToCpu", \
    "ClassTagPacketsToCpu", \
    "IpmcTunnelToCpu", \
    "StationMoveOverLearnLimitToCpu", \
    "McastUnknownErrToCpu", \
    "LearnLimitPriority", \
    "ControlOpcodePriority", \
    "CpuProtoBpduPriority", \
    "CpuProtoArpPriority", \
    "CpuProtoIgmpPriority", \
    "CpuProtoDhcpPriority", \
    "CpuProtoIpmcReservedPriority", \
    "CpuProtoIpOptionsPriority", \
    "CpuProtoExceptionsPriority", \
    "CpuProtocolPrio", \
    "CpuUnknownPrio", \
    "CpuSamplePrio", \
    "CpuDefaultPrio", \
    "L2StaticMoveToCpu", \
    "UnknownIpmcToCpu", \
    "UnknownMcastToCpu", \
    "UnknownUcastToCpu", \
    "NonIpL3ErrToCpu", \
    "L3HeaderErrToCpu", \
    "UnknownVlanToCpu", \
    "UnknownL3SrcToCpu", \
    "UnknownL3DestToCpu", \
    "IpmcPortMissToCpu", \
    "IpmcErrorToCpu", \
    "VCLabelMissToCpu", \
    "SourceRouteToCpu", \
    "LLCSAP1", \
    "LLCSAP2", \
    "SampleIngressRandomSeed", \
    "SampleEgressRandomSeed", \
    "CpuFpCopyPrio", \
    "CpuIcmpRedirectPrio", \
    "CpuMtuFailPrio", \
    "CpuMirrorPrio", \
    "CpuLookupFpCopyPrio", \
    "L2NonStaticMoveToCpu", \
    "V6L3ErrToCpu", \
    "V6L3DstMissToCpu", \
    "V4L3ErrToCpu", \
    "V4L3DstMissToCpu", \
    "TunnelErrToCpu", \
    "MartianAddrToCpu", \
    "MartianAddr", \
    "L3UcTtlErrToCpu", \
    "L3SlowpathToCpu", \
    "IpmcTtlErrToCpu", \
    "DosAttackToCpu", \
    "DosAttackSipEqualDip", \
    "DosAttackMinTcpHdrSize", \
    "DosAttackV4FirstFrag", \
    "DosAttackTcpFlags", \
    "DosAttackL4Port", \
    "DosAttackTcpFrag", \
    "DosAttackIcmp", \
    "DosAttackIcmpPktOversize", \
    "DosAttackMACSAEqualMACDA", \
    "DosAttackIcmpV6PingSize", \
    "DosAttackIcmpFragments", \
    "DosAttackTcpOffset", \
    "DosAttackUdpPortsEqual", \
    "DosAttackTcpPortsEqual", \
    "DosAttackTcpFlagsSF", \
    "DosAttackTcpFlagsFUP", \
    "DosAttackTcpHdrPartial", \
    "DosAttackPingFlood", \
    "DosAttackSynFlood", \
    "DosAttackTcpSmurf", \
    "DosAttackTcpXMas", \
    "DosAttackL3Header", \
    "IcmpRedirectToCpu", \
    "MplsErrToCpu", \
    "MplsSequenceErrToCpu", \
    "MplsLabelMissToCpu", \
    "MplsTtlErrToCpu", \
    "MplsInvalidL3PayloadToCpu", \
    "MplsInvalidActionToCpu", \
    "SharedVlanMismatchToCpu", \
    "L3SrcUrpfErrToCpu", \
    "GreSourceRoutingToCpu", \
    "EnifilterDropToCpu", \
    "ArpReplyToCpu", \
    "ArpReplyDrop", \
    "ArpRequestToCpu", \
    "ArpRequestDrop", \
    "NdPktToCpu", \
    "NdPktDrop", \
    "McastFloodBlocking", \
    "IgmpPktToCpu", \
    "IgmpPktDrop", \
    "DhcpPktToCpu", \
    "DhcpPktDrop", \
    "MldPktToCpu", \
    "MldPktDrop", \
    "V4ResvdMcPktToCpu", \
    "V4ResvdMcPktDrop", \
    "V4ResvdMcPktFlood", \
    "V6ResvdMcPktToCpu", \
    "V6ResvdMcPktDrop", \
    "V6ResvdMcPktFlood", \
    "IgmpReportLeaveToCpu", \
    "IgmpReportLeaveDrop", \
    "IgmpReportLeaveFlood", \
    "IgmpQueryToCpu", \
    "IgmpQueryDrop", \
    "IgmpQueryFlood", \
    "IgmpUnknownToCpu", \
    "IgmpUnknownDrop", \
    "IgmpUnknownFlood", \
    "MldReportDoneToCpu", \
    "MldReportDoneDrop", \
    "MldReportDoneFlood", \
    "MldQueryToCpu", \
    "MldQueryDrop", \
    "MldQueryFlood", \
    "IpmcV4RouterDiscoveryToCpu", \
    "IpmcV4RouterDiscoveryDrop", \
    "IpmcV4RouterDiscoveryFlood", \
    "IpmcV6RouterDiscoveryToCpu", \
    "IpmcV6RouterDiscoveryDrop", \
    "IpmcV6RouterDiscoveryFlood", \
    "DirectedMirroring", \
    "PktAge", \
    "RemoteL2Lookup", \
    "McastFloodDefault", \
    "ParityErrorToCpu", \
    "L3MtuFailToCpu", \
    "MeterAdjust", \
    "HashL2", \
    "HashL3", \
    "HashMultipath", \
    "HashControl", \
    "MirrorStackMode", \
    "MirrorSrcModCheck", \
    "MirrorUnmarked", \
    "DestPortHGTrunk", \
    "ColorSelect", \
    "ModuleLoopback", \
    "SrcModBlockMirrorCopy", \
    "SrcModBlockMirrorOnly", \
    "HashSeed0", \
    "HashSeed1", \
    "HashField0Config", \
    "HashField1Config", \
    "HashSelectControl", \
    "HashIP4Field0", \
    "HashIP4Field1", \
    "HashIP6Field0", \
    "HashIP6Field1", \
    "HashL2Field0", \
    "HashL2Field1", \
    "HashMPLSField0", \
    "HashMPLSField1", \
    "HashHG2UnknownField0", \
    "HashHG2UnknownField1", \
    "TrunkHashSet0UnicastOffset", \
    "TrunkHashSet1UnicastOffset", \
    "TrunkHashSet0NonUnicastOffset", \
    "TrunkHashSet1NonUnicastOffset", \
    "FabricTrunkHashSet0UnicastOffset", \
    "FabricTrunkHashSet1UnicastOffset", \
    "FabricTrunkHashSet0NonUnicastOffset", \
    "FabricTrunkHashSet1NonUnicastOffset", \
    "LoadBalanceHashSet0UnicastOffset", \
    "LoadBalanceHashSet1UnicastOffset", \
    "LoadBalanceHashSet0NonUnicastOffset", \
    "LoadBalanceHashSet1NonUnicastOffset", \
    "UniformUcastTrunkDistribution", \
    "UniformFabricTrunkDistribution", \
    "ECMPHashSet0Offset", \
    "ECMPHashSet1Offset", \
    "CpuToCpuEnable", \
    "IgmpUcastEnable", \
    "MldUcastEnable", \
    "IgmpReservedMcastEnable", \
    "MldReservedMcastEnable", \
    "MldDirectAttachedOnly", \
    "PortEgressBlockL2", \
    "PortEgressBlockL3", \
    "BpduInvalidVlanDrop", \
    "MirrorInvalidVlanDrop", \
    "RemoteLearnTrust", \
    "SourceMacZeroDrop", \
    "IpmcGroupMtu", \
    "ModuleType", \
    "IgmpToCPU", \
    "BpduToCPU", \
    "8021xToCPU", \
    "BcstToCPU", \
    "ExternalL3", \
    "L3EgressMode", \
    "MplsIngressPortCheck", \
    "SourceModBlockUcast", \
    "SourceModBlockControlOpcode", \
    "EgressBlockUcast", \
    "AlternateStoreForward", \
    "WarmBoot", \
    "UnknownIpmcAsMcast", \
    "TunnelUnknownIpmcDrop", \
    "DhcpLearn", \
    "IpmcTtl1ToCpu", \
    "L3UcastTtl1ToCpu", \
    "DosAttackFlagZeroSeqZero", \
    "HgHdrExtLengthEnable", \
    "DosAttackSynFrag", \
    "Ip4McastL2DestCheck", \
    "Ip6McastL2DestCheck", \
    "L3TunnelUrpfMode", \
    "L3TunnelUrpfDefaultRoute", \
    "L3UrpfFailToCpu", \
    "L3UrpfRouteEnable", \
    "L3UrpfMode", \
    "L3UrpfDefaultRoute", \
    "IngressRateLimitIncludeIFG", \
    "RateLimitLinear", \
    "HashL2Dual", \
    "HashL3Dual", \
    "HashDualMoveDepth", \
    "SharedVlanEnable", \
    "SharedVlanL2McastEnable", \
    "IpmcReplicationSharing", \
    "VrfMax", \
    "MplsPerVlan", \
    "FailoverStackTrunk", \
    "FailoverEtherTrunk", \
    "ClassBasedMoveFailPktToCpu", \
    "ClassBasedMoveFailPktDrop", \
    "HgHdrMcastFlood", \
    "HgHdrMcastFloodOverride", \
    "HgHdrIpMcastFlood", \
    "HgHdrIpMcastFloodOverride", \
    "STPBlockedFieldBypass", \
    "L2PortBlocking", \
    "HashIpfixIngress", \
    "HashIpfixIngressDual", \
    "HashIpfixEgress", \
    "HashIpfixEgressDual", \
    "ForceForwardFabricTrunk", \
    "UseGport", \
    "HgHdrMcastVlanRange", \
    "HgHdrMcastL2Range", \
    "HgHdrMcastL3Range", \
    "McastL2Range", \
    "McastL3Range", \
    "KeepEgressRtHdr", \
    "CpuCopyDestination", \
    "CpuProtoTimeSyncPrio", \
    "CpuProtoMmrpPrio", \
    "CpuProtoSrpPrio", \
    "TimeSyncPktToCpu", \
    "TimeSyncPktDrop", \
    "TimeSyncPktFlood", \
    "MmrpPktToCpu", \
    "MmrpPktDrop", \
    "MmrpPktFlood", \
    "SrpPktToCpu", \
    "SrpPktDrop", \
    "SrpPktFlood", \
    "L2McastAllRouterPortsAddEnable", \
    "BypassMode", \
    "IpmcSameVlanL3Route", \
    "AutoQueues", \
    "FieldCache", \
    "FieldCommit", \
    "IpmcCache", \
    "IpmcCommit", \
    "L2Cache", \
    "L2Commit", \
    "L3HostCache", \
    "L3HostCommit", \
    "L3RouteCache", \
    "L3RouteCommit" 

/* Module types for bcmSwitchModuleType. */
#define BCM_SWITCH_MODULE_UNKNOWN   0          
#define BCM_SWITCH_MODULE_XGS1      1          
#define BCM_SWITCH_MODULE_XGS2      2          
#define BCM_SWITCH_MODULE_XGS3      3          

/* Unicast RPF lookup modes. */
#define BCM_SWITCH_URPF_DISABLE (0)        
#define BCM_SWITCH_URPF_LOOSE   (1)        
#define BCM_SWITCH_URPF_STRICT  (2)        

/* Argument formatting macro for bcmSwitchModuleType. */
#define BCM_SWITCH_CONTROL_MOD_TYPE_PACK(modid, mod_type)  \
    (((modid) << 16) | (mod_type & 0xFFFF)) 
#define BCM_SWITCH_CONTROL_MODID_UNPACK(arg)  \
    (((arg) >> 16) & 0xFFFF) 
#define BCM_SWITCH_CONTROL_MODTYPE_UNPACK(arg)  \
    (((arg) >> 0) & 0xFFFF) 

/* Configure port-specific and device-wide operating modes. */
extern int bcm_switch_control_get(
    int unit, 
    bcm_switch_control_t type, 
    int *arg);

/* Configure port-specific and device-wide operating modes. */
extern int bcm_switch_control_set(
    int unit, 
    bcm_switch_control_t type, 
    int arg);

/* Configure port-specific and device-wide operating modes. */
extern int bcm_switch_control_port_get(
    int unit, 
    bcm_port_t port, 
    bcm_switch_control_t type, 
    int *arg);

/* Configure port-specific and device-wide operating modes. */
extern int bcm_switch_control_port_set(
    int unit, 
    bcm_port_t port, 
    bcm_switch_control_t type, 
    int arg);

/* Backward compatibility. */
#define bcm_switch_port_control_get bcm_switch_control_port_set 
#define bcm_switch_port_control_set bcm_switch_control_port_set 

#define BCM_HASH_ZERO           0x00000001 /* Always return 0 (debug only). */
#define BCM_HASH_LSB            0x00000002 /* Return LSB of key. */
#define BCM_HASH_CRC16L         0x00000003 /* Lower bits of CRC-16. */
#define BCM_HASH_CRC16U         0x00000004 /* Upper bits of CRC-16. */
#define BCM_HASH_CRC32L         0x00000005 /* Lower bits of CRC-32. */
#define BCM_HASH_CRC32U         0x00000006 /* Upper bits of CRC-32. */

/* Multipath (ECMP/WCMP) hashing. */
#define BCM_HASH_CONTROL_MULTIPATH_L4PORTS  0x0001     /* Use TCP/UDP ports. */
#define BCM_HASH_CONTROL_MULTIPATH_DIP      0x0002     /* Use destination IP
                                                          address. */
#define BCM_HASH_CONTROL_MULTIPATH_USERDEF(_val)  \
    (((_val) & 0xff) << 24) 
#define BCM_HASH_CONTROL_MULTIPATH_USERDEF_VAL(c)  \
    ((c) >> 24 & 0xff) 

/* Unicast trunk hash controls. */
#define BCM_HASH_CONTROL_TRUNK_UC_XGS2      0x0004     /* 5695 compatible hash. */
#define BCM_HASH_CONTROL_TRUNK_UC_SRCPORT   0x0008     /* Use source port. */

/* Non-unicast trunk block mask hash controls. */
#define BCM_HASH_CONTROL_TRUNK_NUC_DST      0x0010     /* Use destination MAC or
                                                          IP address. */
#define BCM_HASH_CONTROL_TRUNK_NUC_SRC      0x0020     /* Use source MAC or IP
                                                          address. */
#define BCM_HASH_CONTROL_TRUNK_NUC_MODPORT  0x0040     /* Use module ID and
                                                          port. */

/* Use enhanced (aka. RTAG7) hashing algorithm. */
#define BCM_HASH_CONTROL_ECMP_ENHANCE       0x0080     /* Use enhanced ECMP
                                                          hashing. */
#define BCM_HASH_CONTROL_TRUNK_NUC_ENHANCE  0x0100     /* Use enhanced
                                                          non-unicast trunk
                                                          hashing. */

/* Enhanced hash field config control. */
#define BCM_HASH_FIELD_CONFIG_CRC16XOR8 0x00000001 /* 8-bit CRC16 + 8-bit XOR8. */
#define BCM_HASH_FIELD_CONFIG_CRC16XOR4 0x00000002 /* 8-bit CRC16 + 8-bit XOR4. */
#define BCM_HASH_FIELD_CONFIG_CRC16XOR2 0x00000003 /* 8-bit CRC16 + 8-bit XOR2. */
#define BCM_HASH_FIELD_CONFIG_CRC16XOR1 0x00000004 /* 8-bit CRC16 + 8-bit XOR1. */
#define BCM_HASH_FIELD_CONFIG_CRC16     0x00000005 /* 16-bit CRC16. */

/* Enhanced hash field selection disable control. */
#define BCM_HASH_FIELD0_DISABLE_IP4         0x00000001 /* Selection 0 for IPv4
                                                          packets. */
#define BCM_HASH_FIELD1_DISABLE_IP4         0x00000002 /* Selection 1 for IPv4
                                                          packets. */
#define BCM_HASH_FIELD0_DISABLE_IP6         0x00000004 /* Selection 0 for IPv6
                                                          packets. */
#define BCM_HASH_FIELD1_DISABLE_IP6         0x00000008 /* Selection 1 for IPv6
                                                          packets. */
#define BCM_HASH_FIELD0_DISABLE_MPLS        0x00000010 /* Selection 0 for MPLS
                                                          packets. */
#define BCM_HASH_FIELD1_DISABLE_MPLS        0x00000020 /* Selection 1 for MPLS
                                                          packets. */
#define BCM_HASH_FIELD0_DISABLE_TUNNEL_IP4_IP 0x00000040 /* Selection 0 for tunnel
                                                          IPv4 over IPv4
                                                          packets. */
#define BCM_HASH_FIELD1_DISABLE_TUNNEL_IP4_IP 0x00000080 /* Selection 1 for tunnel
                                                          IPv4 over IPv4
                                                          packets. */
#define BCM_HASH_FIELD0_DISABLE_TUNNEL_IP6_IP 0x00000100 /* Selection 0 for tunnel
                                                          IPv6 over IPv4
                                                          packets. */
#define BCM_HASH_FIELD1_DISABLE_TUNNEL_IP6_IP 0x00000200 /* Selection 1 for tunnel
                                                          IPv6 over IPv4
                                                          packets. */
#define BCM_HASH_FIELD0_DISABLE_TUNNEL_IP4_GRE 0x00000400 /* Selection 0 for tunnel
                                                          IPv4 over GRE packets. */
#define BCM_HASH_FIELD1_DISABLE_TUNNEL_IP4_GRE 0x00000800 /* Selection 1 for tunnel
                                                          IPv4 over GRE packets. */
#define BCM_HASH_FIELD0_DISABLE_TUNNEL_IP6_GRE 0x00001000 /* Selection 0 for tunnel
                                                          IPv6 over GRE packets. */
#define BCM_HASH_FIELD1_DISABLE_TUNNEL_IP6_GRE 0x00002000 /* Selection 1 for tunnel
                                                          IPv6 over GRE packets. */
#define BCM_HASH_FIELD0_DISABLE_TUNNEL_IP4_IP6 0x00004000 /* Selection 0 for tunnel
                                                          IPv4 over IPv6
                                                          packets. */
#define BCM_HASH_FIELD1_DISABLE_TUNNEL_IP4_IP6 0x00008000 /* Selection 1 for tunnel
                                                          IPv4 over IPv6
                                                          packets. */
#define BCM_HASH_FIELD0_DISABLE_TUNNEL_IP6_IP6 0x00010000 /* Selection 0 for tunnel
                                                          IPv6 over IPv6
                                                          packets. */
#define BCM_HASH_FIELD1_DISABLE_TUNNEL_IP6_IP6 0x00020000 /* Selection 1 for tunnel
                                                          IPv6 over IPv6
                                                          packets. */

/* Enhanced hash field selection. */
#define BCM_HASH_FIELD_DSTMOD       0x00000001 /* Destination module ID. */
#define BCM_HASH_FIELD_DSTPORT      0x00000002 /* Destination port ID. */
#define BCM_HASH_FIELD_SRCMOD       0x00000004 /* Source modle ID. */
#define BCM_HASH_FIELD_SRCPORT      0x00000008 /* Souce port ID. */
#define BCM_HASH_FIELD_PROTOCOL     0x00000010 /* Protocol ID. */
#define BCM_HASH_FIELD_DSTL4        0x00000020 /* Destination L4 port. */
#define BCM_HASH_FIELD_SRCL4        0x00000040 /* Source L4 port. */
#define BCM_HASH_FIELD_VLAN         0x00000080 /* VLAN ID. */
#define BCM_HASH_FIELD_IP4DST_LO    0x00000100 /* IPv4 destination address lower
                                                  16 bits. */
#define BCM_HASH_FIELD_IP4DST_HI    0x00000200 /* IPv4 destination address upper
                                                  16 bits. */
#define BCM_HASH_FIELD_IP4SRC_LO    0x00000400 /* IPv4 source address lower 16
                                                  bits. */
#define BCM_HASH_FIELD_IP4SRC_HI    0x00000800 /* IPv4 source address upper 16
                                                  bits. */
#define BCM_HASH_FIELD_IP6DST_LO    0x00001000 /* IPv6 collapsed destination
                                                  address lower 16 bits. */
#define BCM_HASH_FIELD_IP6DST_HI    0x00002000 /* IPv6 collapsed destination
                                                  address upper 16 bits. */
#define BCM_HASH_FIELD_IP6SRC_LO    0x00004000 /* IPv6 collapsed source address
                                                  lower 16 bits. */
#define BCM_HASH_FIELD_IP6SRC_HI    0x00008000 /* IPv6 collapsed source address
                                                  upper 16 bits. */
#define BCM_HASH_FIELD_NXT_HDR      0x00010000 /* Next header. */
#define BCM_HASH_FIELD_ETHER_TYPE   0x00020000 /* Ether type. */
#define BCM_HASH_FIELD_MACDA_LO     0x00040000 /* MAC destination address lower
                                                  16 bits. */
#define BCM_HASH_FIELD_MACDA_MI     0x00080000 /* MAC destination address middle
                                                  16 bits. */
#define BCM_HASH_FIELD_MACDA_HI     0x00100000 /* MAC destination address upper
                                                  16 bits. */
#define BCM_HASH_FIELD_MACSA_LO     0x00200000 /* MAC source address lower 16
                                                  bits. */
#define BCM_HASH_FIELD_MACSA_MI     0x00400000 /* MAC source address middle 16
                                                  bits. */
#define BCM_HASH_FIELD_MACSA_HI     0x00800000 /* MAC source address upper 16
                                                  bits. */
#define BCM_HASH_FIELD_LOAD_BALANCE 0x01000000 /* Load balance ID - HiGig2 only. */
#define BCM_HASH_FIELD_RSVD_LABELS  0x02000000 /* Reserved second label, top
                                                  label. */
#define BCM_HASH_FIELD_2ND_LABEL    0x04000000 /* Second label. */
#define BCM_HASH_FIELD_TOP_LABEL    0x08000000 /* Top label. */

/* Stacking mode select. */
#define BCM_MIRROR_STACK_MODE_XGS3  0          /* Stacking with BCM5650x
                                                  (BCM5610x, BCM5630x). */
#define BCM_MIRROR_STACK_MODE_XGS1  1          /* Stacking with BCM5670. */
#define BCM_MIRROR_STACK_MODE_XGS2  2          /* Stacking with BCM5675-A0. */

#define BCM_COLOR_PRIORITY      0          /* Priority->COLOR mapping. */
#define BCM_COLOR_OUTER_CFI     1          /* SPVLAN CFI->COLOR mapping. */
#define BCM_COLOR_INNER_CFI     2          /* CVLAN CFI->COLOR mapping. */

/* IGM/MLD Action select. */
#define BCM_SWITCH_FORWARD      0x00000001 
#define BCM_SWITCH_FLOOD        0x00000002 
#define BCM_SWITCH_DROP         0x00000004 
#define BCM_SWITCH_CPU          0x00000008 

/* Switch features bypass mode */
#define BCM_SWITCH_BYPASS_NONE      0          /* No switch logic bypassed. */
#define BCM_SWITCH_BYPASS_L3_ONLY   1          /* L3 switch logic bypassed. */
#define BCM_SWITCH_BYPASS_L3_AND_FP 2          /* L3 and FP switch logic
                                                  bypassed. */

#endif /* __BCM_SWITCH_H__ */
